1
00:00:00,000 --> 00:00:02,060
you

2
00:00:30,000 --> 00:00:32,060
you

3
00:01:00,000 --> 00:01:02,060
you

4
00:01:30,000 --> 00:01:32,060
you

5
00:02:00,000 --> 00:02:02,060
you

6
00:02:30,000 --> 00:02:32,060
you

7
00:03:00,000 --> 00:03:02,060
you

8
00:03:30,000 --> 00:03:32,060
you

9
00:04:00,000 --> 00:04:02,060
you

10
00:04:30,000 --> 00:04:32,060
you

11
00:05:00,000 --> 00:05:02,060
you

12
00:05:02,060 --> 00:05:04,060
you

13
00:05:30,000 --> 00:05:32,060
you

14
00:05:52,000 --> 00:05:54,060
you

15
00:05:54,060 --> 00:05:56,040
you

16
00:06:00,000 --> 00:06:02,040
you

17
00:06:31,000 --> 00:06:32,280
Yeah.

18
00:06:32,280 --> 00:06:34,600
So what is embedded graphics?

19
00:06:34,600 --> 00:06:36,360
I'm going to kind of go back to basics.

20
00:06:36,360 --> 00:06:40,320
I kind of want to come together for the background.

21
00:06:40,320 --> 00:06:42,480
Embedded graphics is integrated screens

22
00:06:42,480 --> 00:06:44,280
of all sizes and resolutions, right?

23
00:06:44,280 --> 00:06:47,840
We think of the phone, but honestly, they're all around us.

24
00:06:47,840 --> 00:06:48,800
We see them everywhere.

25
00:06:48,800 --> 00:06:52,160
We don't think about what really powers them.

26
00:06:52,160 --> 00:06:54,360
We have automobiles that have multiple screens.

27
00:06:54,360 --> 00:06:58,640
We call that IVI infotainment, in-vehicle infotainment,

28
00:06:58,760 --> 00:07:00,760
that also shares the same chip that

29
00:07:00,760 --> 00:07:03,000
does the cluster, the speedometer, or rear seat

30
00:07:03,000 --> 00:07:05,440
entertainment, or camera, or whatever.

31
00:07:05,440 --> 00:07:06,560
You have watches.

32
00:07:06,560 --> 00:07:07,520
You have phones.

33
00:07:07,520 --> 00:07:08,200
You have tablets.

34
00:07:08,200 --> 00:07:10,040
You have refrigerators.

35
00:07:10,040 --> 00:07:13,000
All of these require GPU.

36
00:07:13,000 --> 00:07:14,600
And so I look at this, and let me

37
00:07:14,600 --> 00:07:16,320
see if I can get that little text off.

38
00:07:22,920 --> 00:07:26,560
So SoC architecture considerations.

39
00:07:26,600 --> 00:07:28,800
So is the device, your end device, or the SoC

40
00:07:28,800 --> 00:07:30,200
you're making your end device for,

41
00:07:30,200 --> 00:07:33,120
is it a single-purpose device?

42
00:07:33,120 --> 00:07:36,400
Are we creating an appliance, or are we creating a platform?

43
00:07:36,400 --> 00:07:37,840
What's an example of an appliance?

44
00:07:37,840 --> 00:07:40,560
Appliance is like a video phone.

45
00:07:40,560 --> 00:07:42,320
All it does is video phone.

46
00:07:42,320 --> 00:07:47,040
Platform is like a mobile phone, or even a tablet,

47
00:07:47,040 --> 00:07:49,080
something that you can load applications on.

48
00:07:49,080 --> 00:07:52,160
You have to support a very complex array

49
00:07:52,160 --> 00:07:53,240
of different applications.

50
00:07:53,240 --> 00:07:57,720
You have to have stories, and security, and all that stuff.

51
00:07:57,720 --> 00:07:58,560
Power requirements.

52
00:07:58,560 --> 00:07:59,800
Is it plugged into the wall?

53
00:07:59,800 --> 00:08:01,200
Is it plugged into a car battery?

54
00:08:01,200 --> 00:08:02,240
Is it plugged in?

55
00:08:02,240 --> 00:08:03,840
Do you have an infinite amount of power?

56
00:08:03,840 --> 00:08:05,160
Or do you have a battery, something

57
00:08:05,160 --> 00:08:06,760
that you carry in your pocket that you

58
00:08:06,760 --> 00:08:09,840
expect to last all day long, and maybe even longer?

59
00:08:09,840 --> 00:08:10,880
How many days of use?

60
00:08:10,880 --> 00:08:12,640
That's one of the things that I hear at my office

61
00:08:12,640 --> 00:08:13,640
more than anything else.

62
00:08:13,640 --> 00:08:15,680
How many days of use can you get out of this?

63
00:08:15,680 --> 00:08:17,400
And so we have to concern ourselves

64
00:08:17,400 --> 00:08:19,800
with something called sustained power over peak power.

65
00:08:19,800 --> 00:08:22,880
I think when you look at things like the latest

66
00:08:22,880 --> 00:08:24,600
GPUs that are in discrete cards, you're

67
00:08:24,600 --> 00:08:27,800
constantly worried about, what can it do?

68
00:08:27,800 --> 00:08:30,240
Completely highest frequency, highest performance,

69
00:08:30,240 --> 00:08:30,800
what's that?

70
00:08:30,800 --> 00:08:32,240
But nobody can ever last that long.

71
00:08:32,240 --> 00:08:36,080
Even the discrete cards, which I'll talk about next,

72
00:08:36,080 --> 00:08:39,160
has thermal requirements, where it will completely

73
00:08:39,160 --> 00:08:40,240
overheat and meltdown.

74
00:08:40,240 --> 00:08:42,280
So the next thing I'd say is thermal requirements.

75
00:08:42,280 --> 00:08:44,440
Passive cooling, which means it doesn't have a fan.

76
00:08:44,440 --> 00:08:45,360
It's just a heat sink.

77
00:08:45,360 --> 00:08:47,960
Or maybe the device itself is the heat sink.

78
00:08:47,960 --> 00:08:48,960
Or is it active cooling?

79
00:08:48,960 --> 00:08:49,600
You have fans.

80
00:08:49,600 --> 00:08:52,520
You have liquid nitrogen. You have liquid cooling.

81
00:08:52,520 --> 00:08:54,120
What are you using to cool this thing?

82
00:08:54,120 --> 00:08:58,760
Because all of these devices create a lot of heat.

83
00:08:58,760 --> 00:08:59,720
How hot is too hot?

84
00:08:59,720 --> 00:09:01,640
I know on a mobile phone, we have requirements

85
00:09:01,640 --> 00:09:04,360
that they can't exceed 40 Celsius,

86
00:09:04,360 --> 00:09:05,640
which is pretty darn warm.

87
00:09:05,640 --> 00:09:07,480
You don't want somebody to burn their hands.

88
00:09:07,480 --> 00:09:09,400
This isn't like a pocket warmer.

89
00:09:09,400 --> 00:09:10,720
You want to be able to play it.

90
00:09:10,720 --> 00:09:12,080
And you want it to stay cool, which

91
00:09:12,080 --> 00:09:14,080
means that you have to throttle performance when

92
00:09:14,080 --> 00:09:16,120
you reach a certain thermal.

93
00:09:16,120 --> 00:09:18,480
Maintainability, I talked about this a little bit before.

94
00:09:18,480 --> 00:09:20,320
How long do you have to maintain this device?

95
00:09:20,320 --> 00:09:22,480
Is it one and done, which means you ship it

96
00:09:22,480 --> 00:09:25,880
and you never have to upgrade it again unless you have a recall?

97
00:09:25,880 --> 00:09:29,080
Or do you have to provide regular updates all the time

98
00:09:29,080 --> 00:09:31,120
to make sure that if somebody provides an exploit,

99
00:09:31,120 --> 00:09:32,080
you update it?

100
00:09:32,080 --> 00:09:34,920
Or if you find failures in the functionality,

101
00:09:34,920 --> 00:09:35,800
you have to update it.

102
00:09:35,800 --> 00:09:37,560
Or you have an operating system update.

103
00:09:37,560 --> 00:09:40,880
So your phone gets a Android OS update once a year.

104
00:09:40,880 --> 00:09:43,760
Samsung's on the hook for three or four years of support

105
00:09:43,760 --> 00:09:44,840
for every phone we sell.

106
00:09:44,840 --> 00:09:46,280
So that means for four years, we're

107
00:09:46,280 --> 00:09:48,520
going to give you Android updates.

108
00:09:48,520 --> 00:09:50,520
And then after that, you're kind of on your own.

109
00:09:53,480 --> 00:09:56,040
And so with all of these things, I

110
00:09:56,040 --> 00:09:58,040
like to talk about the triangle trade-offs, which

111
00:09:58,040 --> 00:09:59,040
everybody's heard about.

112
00:09:59,040 --> 00:10:01,600
Performance, PPA, performance, power, and area.

113
00:10:01,600 --> 00:10:04,080
Performance is obvious.

114
00:10:04,080 --> 00:10:08,120
How well will your device run?

115
00:10:08,120 --> 00:10:11,120
But not just on a GPU isolated situation,

116
00:10:11,120 --> 00:10:13,040
but also if the GPU is in contention

117
00:10:13,040 --> 00:10:14,480
with other things on the die.

118
00:10:14,640 --> 00:10:16,840
What happens if you're trying to play a video

119
00:10:16,840 --> 00:10:18,640
and you're also trying to render or trying

120
00:10:18,640 --> 00:10:20,000
to use your camera at the same time?

121
00:10:20,000 --> 00:10:22,080
You're trying to do an overlay on top of a camera.

122
00:10:22,080 --> 00:10:26,840
You're trying to do NPU, AI kind of recognition of faces

123
00:10:26,840 --> 00:10:28,400
while you're doing the camera.

124
00:10:28,400 --> 00:10:31,000
All of these things cause bandwidth contention, resource,

125
00:10:31,000 --> 00:10:32,760
and power contention.

126
00:10:32,760 --> 00:10:33,760
So how does it work?

127
00:10:33,760 --> 00:10:34,720
What's the performance?

128
00:10:34,720 --> 00:10:37,200
You have to look at the use cases.

129
00:10:37,200 --> 00:10:38,160
We also have power.

130
00:10:38,160 --> 00:10:41,320
Power, I think, is split between battery and thermals.

131
00:10:41,320 --> 00:10:42,960
And so sometimes you're not limited

132
00:10:42,960 --> 00:10:44,720
by how much power you can give something.

133
00:10:44,720 --> 00:10:46,880
You're limited by how warm it's gotten.

134
00:10:46,880 --> 00:10:50,080
And then also you have your days of use chart,

135
00:10:50,080 --> 00:10:52,360
which is like how many hours of constant use

136
00:10:52,360 --> 00:10:54,520
can you use for different dynamics.

137
00:10:54,520 --> 00:10:56,520
And then last is area.

138
00:10:56,520 --> 00:10:58,160
Nothing's free.

139
00:10:58,160 --> 00:11:00,160
And I'll talk about that more in the next slide.

140
00:11:00,160 --> 00:11:04,640
But for every chip that you fabricate,

141
00:11:04,640 --> 00:11:06,640
there is yield issues.

142
00:11:06,640 --> 00:11:08,480
And the yield issues might be from when

143
00:11:08,480 --> 00:11:10,280
you cut the die off of the wafer,

144
00:11:10,280 --> 00:11:12,560
when during the process of fabrication,

145
00:11:12,560 --> 00:11:15,000
maybe a microparticle landed on one of the chips

146
00:11:15,000 --> 00:11:17,160
and it's completely not usable anymore.

147
00:11:17,160 --> 00:11:18,440
And it's very expensive.

148
00:11:18,440 --> 00:11:21,920
In this example, you have the orange chips

149
00:11:21,920 --> 00:11:23,360
represent dies that are incomplete

150
00:11:23,360 --> 00:11:28,080
because you're putting a square chip on a round wafer.

151
00:11:28,080 --> 00:11:30,440
Defective dies are in red based off testing.

152
00:11:30,440 --> 00:11:31,360
Good dies are green.

153
00:11:31,360 --> 00:11:33,440
So you're not always going to get all the chips

154
00:11:33,440 --> 00:11:35,680
on a die, on a wafer.

155
00:11:35,680 --> 00:11:36,880
Maybe a couple of questions.

156
00:11:36,880 --> 00:11:37,960
I've only one.

157
00:11:37,960 --> 00:11:39,600
Why is it so difficult?

158
00:11:39,600 --> 00:11:43,200
Why isn't it perfect when it's manufactured?

159
00:11:43,200 --> 00:11:46,560
So the way that wafers are grown,

160
00:11:46,560 --> 00:11:49,920
or that the silicon is grown, it's grown in ingots.

161
00:11:49,920 --> 00:11:53,120
And ingots are literally crystallized growths

162
00:11:53,120 --> 00:11:55,600
that look like you're growing a candle.

163
00:11:55,600 --> 00:11:57,040
So you have somebody make a candle,

164
00:11:57,040 --> 00:11:59,240
and you dip a string into wax, and you pull it out.

165
00:11:59,240 --> 00:12:02,480
And you have these cylindrical bullet looking candles.

166
00:12:02,480 --> 00:12:04,680
That's exactly how they make silicon ingots.

167
00:12:04,680 --> 00:12:08,800
They dip very pure, I don't know what it is,

168
00:12:09,800 --> 00:12:15,640
whatever the stem is, into a very, very pure source

169
00:12:15,640 --> 00:12:17,480
of silicon sand melted.

170
00:12:17,480 --> 00:12:20,240
And then they slowly pull it out of that sand.

171
00:12:20,240 --> 00:12:22,560
And I'm oversimplifying greatly.

172
00:12:22,560 --> 00:12:25,040
And it crystallizes, and it forms

173
00:12:25,040 --> 00:12:28,080
these perfect crystalline silicon structures.

174
00:12:28,080 --> 00:12:30,200
And it forms the same way you would a candle

175
00:12:30,200 --> 00:12:31,680
being pulled out of wax.

176
00:12:31,680 --> 00:12:33,800
And so with that, the easiest way they found

177
00:12:33,800 --> 00:12:37,640
is that it's going to come in a circular pattern.

178
00:12:37,760 --> 00:12:41,280
And so for the longest time, most fabs

179
00:12:41,280 --> 00:12:43,520
were 100 millimeter wafer size, which

180
00:12:43,520 --> 00:12:46,680
means that the diameter of the wafer was 100 millimeters.

181
00:12:46,680 --> 00:12:47,640
And then it got to 200.

182
00:12:47,640 --> 00:12:49,880
Now we have a standard of 300 millimeters.

183
00:12:49,880 --> 00:12:52,200
And some people are trying to pull even bigger.

184
00:12:52,200 --> 00:12:54,240
But what that's going to cost is a lot of tooling

185
00:12:54,240 --> 00:12:57,000
we've done, and it's like industries and consortiums.

186
00:12:57,000 --> 00:12:58,640
Some people want it, some people don't.

187
00:12:58,640 --> 00:13:01,720
So we've been stuck at 300 for a good decade or so.

188
00:13:01,720 --> 00:13:03,720
And of that 300, I actually have an exercise.

189
00:13:03,720 --> 00:13:06,680
We'll go into it next.

190
00:13:06,680 --> 00:13:09,600
So actually, before I do that exercise,

191
00:13:09,600 --> 00:13:12,140
let's talk about fabrication, how it's getting more expensive.

192
00:13:12,140 --> 00:13:19,080
So back in 90 nanometers, which I think is 2005,

193
00:13:19,080 --> 00:13:28,080
a wafer costs $1,650.

194
00:13:28,080 --> 00:13:30,400
Then as you went to 65 nanometers,

195
00:13:30,400 --> 00:13:34,680
it went to about 2,000, then 2,200, and 3,000, and 3,600.

196
00:13:34,680 --> 00:13:38,440
But then right about here, it starts jumping extremely high.

197
00:13:38,440 --> 00:13:40,760
And that's because if you look at the feature size

198
00:13:40,760 --> 00:13:43,060
we're getting to, we're going from 16 and 12 nanometers

199
00:13:43,060 --> 00:13:45,760
to 10, to 7, to 5.

200
00:13:45,760 --> 00:13:48,000
We're hitting the limits of physics,

201
00:13:48,000 --> 00:13:50,800
which means that more and more things can go wrong.

202
00:13:50,800 --> 00:13:54,120
The more transistors you pack into a silicon wafer,

203
00:13:54,120 --> 00:13:56,400
the more opportunities for something to go wrong,

204
00:13:56,400 --> 00:13:57,440
honestly.

205
00:13:57,440 --> 00:14:01,080
And so it's just the yields are getting like,

206
00:14:01,080 --> 00:14:02,780
the yields are shrinking because there's

207
00:14:02,780 --> 00:14:04,040
more opportunities for things.

208
00:14:04,120 --> 00:14:06,360
The components for tooling are way more expensive.

209
00:14:06,360 --> 00:14:09,760
The lithography, which is like when they pattern the dyes

210
00:14:09,760 --> 00:14:13,560
using extreme ultraviolet light, and the photoresist,

211
00:14:13,560 --> 00:14:15,020
and the chemicals, all of this stuff

212
00:14:15,020 --> 00:14:18,880
is getting more and more difficult and harder.

213
00:14:18,880 --> 00:14:21,120
And it has to have extreme precision

214
00:14:21,120 --> 00:14:23,440
that there's going to be more and more room for error.

215
00:14:23,440 --> 00:14:26,320
Things that were considered noise two generations back

216
00:14:26,320 --> 00:14:28,480
are now considered feature sizes.

217
00:14:28,480 --> 00:14:30,600
And so things are getting way more expensive.

218
00:14:30,600 --> 00:14:32,720
And so the last 10 nanometers, and this

219
00:14:32,720 --> 00:14:35,040
is where Intel really kind of faltered for a long time,

220
00:14:35,040 --> 00:14:36,120
the wafer cost.

221
00:14:36,120 --> 00:14:38,160
And this information is not Samsung.

222
00:14:38,160 --> 00:14:40,160
This is actually TSMC I found off the web.

223
00:14:40,160 --> 00:14:42,280
So I want to say I'm not giving retreat secrets.

224
00:14:42,280 --> 00:14:44,840
So I put a link under most of these tables.

225
00:14:44,840 --> 00:14:47,600
And it may be right, but I don't care about the actual numbers.

226
00:14:47,600 --> 00:14:50,760
I care about the trend.

227
00:14:50,760 --> 00:14:54,480
6,000, 9,000, and then with 5 nanometers

228
00:14:54,480 --> 00:15:00,040
is about $16,000, $17,000 per wafer, per single thing.

229
00:15:00,080 --> 00:15:02,840
And so the question becomes, what's the cost?

230
00:15:02,840 --> 00:15:07,080
How are we going to make money if the wafers cost $17,000

231
00:15:07,080 --> 00:15:08,800
per wafer?

232
00:15:08,800 --> 00:15:11,880
And so let's do a cost exercise.

233
00:15:11,880 --> 00:15:13,920
You don't have to actually come up with a number,

234
00:15:13,920 --> 00:15:16,120
but I'm just going to kind of put the question to you.

235
00:15:16,120 --> 00:15:20,120
You assume you have a 300 millimeter diameter wafer.

236
00:15:20,120 --> 00:15:24,520
Each SOC is 100 millimeters square.

237
00:15:24,520 --> 00:15:26,560
You usually do 25 layers.

238
00:15:26,560 --> 00:15:28,920
Like you bake like a multi-tiered pie,

239
00:15:28,920 --> 00:15:30,960
or a multi-tiered cake every time you do silicon

240
00:15:30,960 --> 00:15:31,720
manufacturing.

241
00:15:31,720 --> 00:15:33,120
And so you do one layer, then you

242
00:15:33,120 --> 00:15:34,720
put another layer of transistors, another layer

243
00:15:34,720 --> 00:15:35,320
of transistors.

244
00:15:35,320 --> 00:15:37,040
You do it like 25 times.

245
00:15:37,040 --> 00:15:39,560
So that recipe, according to that previous slide,

246
00:15:39,560 --> 00:15:43,240
was about $17,000 for a wafer at 5 nanometers.

247
00:15:43,240 --> 00:15:46,680
10% of those SOCs are non-viable because of that edge geometry

248
00:15:46,680 --> 00:15:47,360
I talked about.

249
00:15:47,360 --> 00:15:52,120
You're putting square silicon dies on round silicon wafers.

250
00:15:52,120 --> 00:15:54,920
And then each package, which I didn't even talk about,

251
00:15:54,920 --> 00:15:56,880
like you cut these little pieces of silicon out,

252
00:15:56,880 --> 00:15:58,680
you have to put them in that little rubber

253
00:15:58,680 --> 00:16:00,600
thing that actually has metal prongs that

254
00:16:00,600 --> 00:16:02,720
talk to the rest of the motherboard.

255
00:16:02,720 --> 00:16:03,960
That actually costs money.

256
00:16:03,960 --> 00:16:06,200
And actually, to put that silicon die

257
00:16:06,200 --> 00:16:09,760
and wire it up to the external packaging also costs money.

258
00:16:09,760 --> 00:16:12,680
And so let's just assume that's a $10 cost.

259
00:16:12,680 --> 00:16:15,120
So all this to say, I'm not going to make you do it,

260
00:16:15,120 --> 00:16:16,880
but to give you background, what's

261
00:16:16,880 --> 00:16:18,080
it really going to look like?

262
00:16:18,080 --> 00:16:20,920
So you use your simple ninth grade math.

263
00:16:20,920 --> 00:16:25,040
And you know that area of a circle is pi r squared.

264
00:16:25,040 --> 00:16:27,400
Radius is 300 divided by 2.

265
00:16:27,440 --> 00:16:30,200
So we get about 71,000 millimeters squared

266
00:16:30,200 --> 00:16:31,400
of area to work with.

267
00:16:31,400 --> 00:16:32,840
We cut 10% off.

268
00:16:32,840 --> 00:16:34,560
We get about 64,000.

269
00:16:34,560 --> 00:16:37,880
And then we just do a simple divide by 100.

270
00:16:37,880 --> 00:16:41,280
And we get about 640 chips.

271
00:16:41,280 --> 00:16:47,000
If that's 17,000 divided by 640, it's about $27 just

272
00:16:47,000 --> 00:16:50,760
in pure manufacturing cost.

273
00:16:50,760 --> 00:16:53,880
It has nothing to do with all of the IP and R&D

274
00:16:53,880 --> 00:16:56,760
and everything else that had to go into that.

275
00:16:56,760 --> 00:16:59,160
And then you add $10, and it's $37 per chip.

276
00:16:59,160 --> 00:17:01,280
And that's perfect yield, by the way.

277
00:17:01,280 --> 00:17:02,520
Let's be realistic.

278
00:17:02,520 --> 00:17:04,320
Let's say 50% yield.

279
00:17:04,320 --> 00:17:08,040
And most of the time, a mature process can get up to 80% to 90%.

280
00:17:08,040 --> 00:17:11,120
But a very new process will be more like 50%.

281
00:17:11,120 --> 00:17:14,200
Now each SOC is more like $65.

282
00:17:14,200 --> 00:17:17,440
And the SOC, which is the chip on a phone, for instance,

283
00:17:17,440 --> 00:17:20,360
is not the most expensive part of the phone the screen is.

284
00:17:20,360 --> 00:17:23,160
And so it's just to kind of give you

285
00:17:23,160 --> 00:17:25,080
an idea that at some point, there's

286
00:17:25,080 --> 00:17:27,400
reasons why companies like Global Foundry decided,

287
00:17:27,400 --> 00:17:28,760
I'm going to stop at 16.

288
00:17:28,760 --> 00:17:30,400
It's not making money.

289
00:17:30,400 --> 00:17:33,320
And so there's really only two to three major silicon

290
00:17:33,320 --> 00:17:34,360
manufacturers out there.

291
00:17:34,360 --> 00:17:38,080
There's TSMC, Samsung, and Intel.

292
00:17:38,080 --> 00:17:41,400
And I have to be honest, TSMC is doing really well.

293
00:17:41,400 --> 00:17:42,880
Samsung is close second.

294
00:17:42,880 --> 00:17:46,120
Intel, not so much.

295
00:17:46,120 --> 00:17:48,240
Yeah?

296
00:17:48,240 --> 00:17:51,800
Going off that Global Foundry point that you said,

297
00:17:51,800 --> 00:17:55,040
going off at 15, what's the benefit of going smaller?

298
00:17:55,560 --> 00:17:57,160
What's the benefit of going smaller?

299
00:17:57,160 --> 00:17:58,040
Actually, that's a good question.

300
00:17:58,040 --> 00:17:59,160
What do you think in the audience?

301
00:17:59,160 --> 00:18:00,360
What do you think the benefit of going smaller would be?

302
00:18:00,360 --> 00:18:00,880
Yeah.

303
00:18:06,400 --> 00:18:06,960
It's more energy.

304
00:18:06,960 --> 00:18:07,360
Why is it?

305
00:18:07,360 --> 00:18:08,120
That's the better question.

306
00:18:08,120 --> 00:18:09,480
Why is it more energy efficient?

307
00:18:09,480 --> 00:18:12,600
Well, I think the reason is, I mean,

308
00:18:12,600 --> 00:18:14,760
it's more of a longer wire.

309
00:18:14,760 --> 00:18:16,680
Like, you know, it's more efficient

310
00:18:16,680 --> 00:18:18,120
if you can get it to work longer.

311
00:18:18,120 --> 00:18:20,840
Yep.

312
00:18:20,840 --> 00:18:22,960
So electrons are traveling shorter distances

313
00:18:22,960 --> 00:18:24,400
to do the same amount of work.

314
00:18:24,400 --> 00:18:26,400
So that means you need less power to do so.

315
00:18:26,400 --> 00:18:29,800
And you can also fit more logic in a wafer.

316
00:18:29,800 --> 00:18:32,760
And so less power, more function.

317
00:18:32,760 --> 00:18:34,720
It's kind of a double whammy.

318
00:18:34,720 --> 00:18:36,920
However, like we talked about, it's not for free.

319
00:18:36,920 --> 00:18:38,920
There's a lot of technology and a lot of thought,

320
00:18:38,920 --> 00:18:41,000
a lot of R&D, and a lot of process

321
00:18:41,000 --> 00:18:42,920
that has to be figured out to make that work.

322
00:18:45,360 --> 00:18:47,360
And so he was showing me the ENIAC,

323
00:18:47,360 --> 00:18:48,880
like that's on the computing area.

324
00:18:48,880 --> 00:18:52,400
And you look at that, and you think about how simple that was.

325
00:18:52,400 --> 00:18:54,120
And I actually have a slide talking about it.

326
00:18:54,120 --> 00:18:56,360
And we'll go through how shrinking has actually

327
00:18:56,360 --> 00:18:58,480
improved compute performance over time in a slide

328
00:18:58,480 --> 00:19:01,640
a little bit later on.

329
00:19:01,640 --> 00:19:05,320
So I keep talking about how expensive silicon

330
00:19:05,320 --> 00:19:08,160
manufacturing is, and how are we going

331
00:19:08,160 --> 00:19:11,280
to keep paying this cost over and over and over again?

332
00:19:11,280 --> 00:19:13,520
Is it going to keep reaping rewards to keep shrinking?

333
00:19:13,520 --> 00:19:15,800
The answer is maybe.

334
00:19:15,800 --> 00:19:17,520
And so we have to be, as engineers,

335
00:19:17,520 --> 00:19:19,240
we have to work within those constraints

336
00:19:19,240 --> 00:19:21,080
that we have to spend a certain amount of money

337
00:19:21,080 --> 00:19:22,280
to make something, and we have to sell it

338
00:19:22,280 --> 00:19:24,480
for a certain amount of money.

339
00:19:24,480 --> 00:19:27,800
And so the way we do it in the silicon world

340
00:19:27,800 --> 00:19:30,840
is we have to make tiers of SOCs.

341
00:19:30,840 --> 00:19:33,680
What that means is that you make a super everything

342
00:19:33,680 --> 00:19:35,440
in the kitchen sink SOC, then you

343
00:19:35,440 --> 00:19:37,880
take some of those features off, make a mid-tier SOC,

344
00:19:37,880 --> 00:19:40,000
and then you take even more features off,

345
00:19:40,000 --> 00:19:42,080
make a low-tier SOC.

346
00:19:42,080 --> 00:19:45,680
And that's going to be big, medium, and small.

347
00:19:45,680 --> 00:19:47,260
And that will be for different layers.

348
00:19:47,260 --> 00:19:48,760
Let's say in the phone culture, it'd

349
00:19:48,760 --> 00:19:51,720
be flagship phones, high phones, which

350
00:19:51,720 --> 00:19:54,160
are really good but not quite flagship,

351
00:19:54,160 --> 00:19:56,200
and then mid- and then low-tier, which

352
00:19:56,200 --> 00:19:58,600
are something you'd want to give your kid.

353
00:19:58,600 --> 00:20:01,480
And so that's one way to do it.

354
00:20:01,480 --> 00:20:04,200
And so you can also design a smaller chip,

355
00:20:04,200 --> 00:20:06,480
like we said, to have similar capabilities with less cores

356
00:20:06,480 --> 00:20:09,840
and cache to make it smaller so it's cheaper to make.

357
00:20:09,840 --> 00:20:12,040
Or we can actually reuse some of the broken parts.

358
00:20:12,040 --> 00:20:14,040
And I don't think people like to hear that.

359
00:20:14,040 --> 00:20:17,080
But what happens is that if we find a chip

360
00:20:17,080 --> 00:20:19,040
and it has one core that's bad, we just

361
00:20:19,080 --> 00:20:21,720
lock off that core in the firmware,

362
00:20:21,720 --> 00:20:22,880
and we use everything else.

363
00:20:22,880 --> 00:20:25,520
And we sell it as a GPU light.

364
00:20:25,520 --> 00:20:29,360
That's exactly it.

365
00:20:29,360 --> 00:20:31,640
I mean, when you think about the XT versus whatever,

366
00:20:31,640 --> 00:20:32,480
everybody does this.

367
00:20:32,480 --> 00:20:33,380
This isn't a secret.

368
00:20:33,380 --> 00:20:35,160
In fact, back when I was in college,

369
00:20:35,160 --> 00:20:38,880
they had, anybody ever heard of Silicon Graphics Company?

370
00:20:38,880 --> 00:20:40,840
They used to sell something called the Octane.

371
00:20:40,840 --> 00:20:43,120
And they used to ship every Octane with,

372
00:20:43,120 --> 00:20:47,000
I'm making this number up, but let's say 8 megabytes of RAM.

373
00:20:47,000 --> 00:20:48,520
And that was a big deal.

374
00:20:48,520 --> 00:20:51,280
But they wouldn't enable all 8 megabytes of RAM.

375
00:20:51,280 --> 00:20:52,760
They'd enable 2.

376
00:20:52,760 --> 00:20:54,180
And then if you bought the upgrade,

377
00:20:54,180 --> 00:20:56,480
they would enable 4.

378
00:20:56,480 --> 00:20:58,720
But the similar thing, but backwards,

379
00:20:58,720 --> 00:21:02,100
is you sell something that is almost good enough,

380
00:21:02,100 --> 00:21:03,680
and then people are willing to buy it.

381
00:21:03,680 --> 00:21:06,000
So kind of like gently, gently bruised fruit.

382
00:21:09,840 --> 00:21:11,920
And so when we look at scalability

383
00:21:11,920 --> 00:21:14,480
as an investment reuse, we want to take

384
00:21:14,480 --> 00:21:16,520
all of the same software and all of the same things

385
00:21:16,560 --> 00:21:19,040
that we did for this massive flagship product.

386
00:21:19,040 --> 00:21:20,400
And then we want to right size it

387
00:21:20,400 --> 00:21:23,680
and reuse all that same things and sell similar,

388
00:21:23,680 --> 00:21:25,520
but smaller part in multiple segments

389
00:21:25,520 --> 00:21:27,560
so we could reuse that same effort.

390
00:21:27,560 --> 00:21:30,680
And this is used also everywhere in the industry.

391
00:21:30,680 --> 00:21:32,440
And so here's an example.

392
00:21:32,440 --> 00:21:34,580
And this is, I don't know what they call this,

393
00:21:34,580 --> 00:21:37,600
but I call it like a bus diagram of an SOC

394
00:21:37,600 --> 00:21:39,040
where you have all the different things.

395
00:21:39,040 --> 00:21:40,400
And I'll just go over the main ones,

396
00:21:40,400 --> 00:21:41,680
which you have a camera and an ISP.

397
00:21:41,680 --> 00:21:43,800
ISP stands for image signal processor.

398
00:21:43,800 --> 00:21:46,640
It takes all of the bare information from the camera,

399
00:21:46,640 --> 00:21:48,480
it makes it into RGB or YUV,

400
00:21:48,480 --> 00:21:50,440
and then it sends it on, it saves it to disk.

401
00:21:50,440 --> 00:21:51,540
Or maybe it does some processing,

402
00:21:51,540 --> 00:21:54,000
like maybe it denoises, maybe it does stabilization,

403
00:21:54,000 --> 00:21:57,120
maybe it does HDR.

404
00:21:57,120 --> 00:21:58,360
It does all these kinds of processes

405
00:21:58,360 --> 00:22:00,000
that make camera pictures look good,

406
00:22:00,000 --> 00:22:01,400
and then it saves it to memory.

407
00:22:01,400 --> 00:22:04,720
You have a GPU, you have an arm or a CPU cluster,

408
00:22:04,720 --> 00:22:08,320
big, little, you know, big CPU cores, little CPU cores.

409
00:22:08,320 --> 00:22:10,400
You have an NPU, which is a neural processing unit.

410
00:22:10,400 --> 00:22:12,880
VP, which is your video codec,

411
00:22:12,920 --> 00:22:15,800
like thing that decodes your movies.

412
00:22:15,800 --> 00:22:20,640
DPU, which is a display controller, you know, display unit.

413
00:22:20,640 --> 00:22:21,680
You have the display,

414
00:22:21,680 --> 00:22:23,600
and then you have these things I call PHYs,

415
00:22:23,600 --> 00:22:25,520
or physical outputs and inputs.

416
00:22:25,520 --> 00:22:26,800
And these are the different kinds of things.

417
00:22:26,800 --> 00:22:28,760
Like everybody's heard of like HDMI,

418
00:22:28,760 --> 00:22:31,600
but, and you have HDMI in and you have HDMI out,

419
00:22:31,600 --> 00:22:32,480
and that's what most people do.

420
00:22:32,480 --> 00:22:34,880
Or maybe they think of it as like USB-C

421
00:22:34,880 --> 00:22:36,960
or something like that, or even display port.

422
00:22:36,960 --> 00:22:39,040
But we also have like things like parallel ports

423
00:22:39,040 --> 00:22:41,640
and MIPI-CSI, which is a camera interface

424
00:22:41,640 --> 00:22:42,520
that you've probably never heard of.

425
00:22:42,520 --> 00:22:45,640
MIPI-DSI, which is like a localized display interface

426
00:22:45,640 --> 00:22:46,640
you've probably never heard of.

427
00:22:46,640 --> 00:22:49,080
So all these other things that they do.

428
00:22:49,080 --> 00:22:51,400
And then above all beyond, you have your memory unit,

429
00:22:51,400 --> 00:22:53,000
your RAM controller,

430
00:22:53,000 --> 00:22:54,240
and then you have all these other things

431
00:22:54,240 --> 00:22:55,520
that you may or may not have,

432
00:22:55,520 --> 00:22:59,800
like a 2D engine, a GPIO UART.

433
00:22:59,800 --> 00:23:02,000
UART's like a serial port.

434
00:23:02,960 --> 00:23:05,280
SATA for your hard drives, PCI.

435
00:23:05,280 --> 00:23:07,960
If you have to, you have your MMC SD card,

436
00:23:07,960 --> 00:23:10,280
if you have a little card you put in your phone.

437
00:23:10,280 --> 00:23:12,760
HDMI security controller,

438
00:23:12,760 --> 00:23:15,560
your PWM pulse width modulation, I squared C,

439
00:23:15,560 --> 00:23:17,200
like all of these things that you've never heard of

440
00:23:17,200 --> 00:23:19,000
that are on almost every device.

441
00:23:19,000 --> 00:23:21,120
Like, has anybody played with like Arduinos

442
00:23:21,120 --> 00:23:23,520
or have anybody ever played with like Raspberry Pis?

443
00:23:23,520 --> 00:23:25,240
Raspberry Pis has all of this stuff too.

444
00:23:25,240 --> 00:23:26,680
You just never heard of it before

445
00:23:26,680 --> 00:23:27,520
because you never really use it.

446
00:23:27,520 --> 00:23:29,840
You might use the GPIO pins or something like that,

447
00:23:29,840 --> 00:23:31,760
but it actually has a lot more stuff.

448
00:23:31,760 --> 00:23:33,960
Anyway, so you make this huge device

449
00:23:33,960 --> 00:23:36,040
and then this is your flagship.

450
00:23:36,040 --> 00:23:37,800
And then what happens is you cut off things.

451
00:23:37,800 --> 00:23:39,800
You make the GPU smaller,

452
00:23:40,320 --> 00:23:41,880
you take the NPU off, you just do it in CPU.

453
00:23:41,880 --> 00:23:43,760
You take some of the CPU cores out

454
00:23:43,760 --> 00:23:45,040
and all of a sudden you've shrunk,

455
00:23:45,040 --> 00:23:47,880
you've kept the same soul of the chip,

456
00:23:47,880 --> 00:23:49,720
but you've shrunk the capabilities

457
00:23:49,720 --> 00:23:52,040
in order to sell it for cheaper on a smaller die.

458
00:23:52,040 --> 00:23:53,880
And then you might even do it once more.

459
00:23:53,880 --> 00:23:56,280
Just have CPU, memory, a few other things,

460
00:23:56,280 --> 00:23:57,360
video and display.

461
00:23:57,360 --> 00:24:00,800
And this is kind of like a Kindle e-reader or something,

462
00:24:00,800 --> 00:24:01,640
you know?

463
00:24:01,640 --> 00:24:03,800
And so we use the same kinds of IP,

464
00:24:03,800 --> 00:24:06,600
we make smaller SoCs and we reuse in order to

465
00:24:07,560 --> 00:24:08,800
make it cheaper to sell it

466
00:24:08,800 --> 00:24:11,840
to more mass product and volumization, right?

467
00:24:11,840 --> 00:24:15,080
So SoC reuse multiple products.

468
00:24:15,080 --> 00:24:19,040
IoT can be defined as a microcontroller

469
00:24:19,040 --> 00:24:21,480
and an ethernet stack, right?

470
00:24:21,480 --> 00:24:23,120
Everything is IoT.

471
00:24:23,120 --> 00:24:26,920
So you have digital bird feeders and drones and vacuums

472
00:24:26,920 --> 00:24:29,120
and cars, car-backed entertainment

473
00:24:29,120 --> 00:24:30,640
or airplane-backed entertainment.

474
00:24:30,640 --> 00:24:32,840
All of these are using the same kinds of SoCs.

475
00:24:32,840 --> 00:24:34,240
So this is all the same chip,

476
00:24:34,240 --> 00:24:36,440
maybe shrunk down or grown, whatever,

477
00:24:37,280 --> 00:24:38,720
but I think we take it into account

478
00:24:38,720 --> 00:24:41,560
that they all have specific use cases,

479
00:24:41,560 --> 00:24:43,320
but they're all basically the same.

480
00:24:44,440 --> 00:24:47,360
And so another way to reduce high development costs

481
00:24:47,360 --> 00:24:49,680
is doing something called pin muxing.

482
00:24:49,680 --> 00:24:52,320
Pin muxing is when you use the same pins

483
00:24:52,320 --> 00:24:54,760
for two different purposes in different modes.

484
00:24:54,760 --> 00:24:59,080
And so sometimes you might have pins

485
00:24:59,080 --> 00:25:01,120
that you use for some kind of like,

486
00:25:01,120 --> 00:25:04,040
I don't know, SD card connector.

487
00:25:04,040 --> 00:25:05,600
And instead of having an SD card connector,

488
00:25:05,600 --> 00:25:06,920
you use them for GPIO.

489
00:25:06,920 --> 00:25:07,840
Or if it's high speed,

490
00:25:07,840 --> 00:25:09,720
instead of using it for a wifi connector,

491
00:25:09,720 --> 00:25:11,960
like you're gonna hook it up to a wifi antenna,

492
00:25:11,960 --> 00:25:14,680
maybe you use it for an ethernet jack

493
00:25:14,680 --> 00:25:15,920
and maybe they just, they're connected,

494
00:25:15,920 --> 00:25:19,040
you muxed it, you set some register on the SoC

495
00:25:19,040 --> 00:25:20,720
and you're saying, this is gonna be an ethernet mode.

496
00:25:20,720 --> 00:25:23,440
Pretend that you have a RJ45 connected to it.

497
00:25:23,440 --> 00:25:24,360
Does that make sense?

498
00:25:24,360 --> 00:25:25,560
So you do this pin muxing

499
00:25:25,560 --> 00:25:27,240
and then you can use the same kinds of chips

500
00:25:27,240 --> 00:25:28,600
and different kinds of configuration.

501
00:25:28,600 --> 00:25:32,160
That's also a way to reuse the same packaging

502
00:25:32,160 --> 00:25:33,560
because then you don't even have to repackage,

503
00:25:33,560 --> 00:25:34,800
you just change the mode.

504
00:25:36,320 --> 00:25:38,520
And then another way that's actually pretty recent

505
00:25:38,520 --> 00:25:39,880
is something called chiplets.

506
00:25:39,880 --> 00:25:41,720
Has anybody heard of chiplets before?

507
00:25:43,760 --> 00:25:48,760
Okay, imagine you saw that we have these like shrinking nodes

508
00:25:49,080 --> 00:25:51,440
where we have like 16 nanometers to 10 nanometers

509
00:25:51,440 --> 00:25:53,520
to five nanometers to whatever nanometers.

510
00:25:55,840 --> 00:25:59,840
What we can do is maybe not all of the IP on an SoC

511
00:25:59,840 --> 00:26:02,520
need to be in the latest and greatest node.

512
00:26:02,560 --> 00:26:05,720
Like the five nanometer node is the most expensive.

513
00:26:05,720 --> 00:26:10,720
Do we really need our video decoder to be in that mode?

514
00:26:11,160 --> 00:26:13,880
The video decoder on average runs at three or 400 megahertz,

515
00:26:13,880 --> 00:26:15,560
not very high demand.

516
00:26:15,560 --> 00:26:20,120
The GPU and CPU run on the order of one to two gigahertz.

517
00:26:20,120 --> 00:26:23,200
So you can use an older technology for video decode.

518
00:26:23,200 --> 00:26:24,280
You don't even have to remake it.

519
00:26:24,280 --> 00:26:27,240
You just kind of, you make a,

520
00:26:27,240 --> 00:26:29,120
add this thing called an interposer,

521
00:26:29,120 --> 00:26:30,800
which is where you have these bumps

522
00:26:30,800 --> 00:26:32,320
on the bottom of your die

523
00:26:33,120 --> 00:26:34,600
and you connect them in a special packaging way.

524
00:26:34,600 --> 00:26:38,880
And then you can use IPs of several different nodes

525
00:26:38,880 --> 00:26:40,480
on the same device.

526
00:26:41,480 --> 00:26:43,640
Now, this is an extreme case, I'll be honest.

527
00:26:43,640 --> 00:26:45,440
I think what we're gonna see in the future

528
00:26:45,440 --> 00:26:47,640
is going to be something like one or two nodes

529
00:26:47,640 --> 00:26:49,960
where you have last year's node and this year's node.

530
00:26:49,960 --> 00:26:52,080
And then you're using a lot of the less important things

531
00:26:52,080 --> 00:26:54,080
in last year's node and some of the more important things

532
00:26:54,080 --> 00:26:55,480
in this year's node, right?

533
00:26:55,480 --> 00:26:57,400
And the reason we do that is to save money

534
00:26:57,400 --> 00:27:00,200
and also to save research and development costs.

535
00:27:00,200 --> 00:27:01,400
And so this is also something,

536
00:27:01,400 --> 00:27:02,440
this is actually kind of funny

537
00:27:02,440 --> 00:27:04,440
because if you remember what I was talking about being,

538
00:27:04,440 --> 00:27:06,960
when I was in college, all the chips were separate

539
00:27:06,960 --> 00:27:08,600
and then we had a motherboard connecting them.

540
00:27:08,600 --> 00:27:09,920
Now they're still in the same package

541
00:27:09,920 --> 00:27:11,320
and we're separating them again.

542
00:27:11,320 --> 00:27:13,520
And so it's kind of like the circle of life.

543
00:27:15,560 --> 00:27:18,760
Oh, and the other thing to know is that like

544
00:27:18,760 --> 00:27:19,600
when you have an SOC,

545
00:27:19,600 --> 00:27:21,840
you have different clock and power domains.

546
00:27:21,840 --> 00:27:23,880
Some IPs require really, really fast clocks.

547
00:27:23,880 --> 00:27:25,760
Some of them require really, really slow clock

548
00:27:25,760 --> 00:27:27,320
because they don't really do much.

549
00:27:28,360 --> 00:27:30,800
And yeah, I think that's the main point.

550
00:27:31,560 --> 00:27:35,720
So the question on chips, is that still the same wafer

551
00:27:35,720 --> 00:27:38,560
or is that different wafers now?

552
00:27:38,560 --> 00:27:40,040
It's different wafers.

553
00:27:40,960 --> 00:27:44,760
And so what you might do is in a very simple example,

554
00:27:44,760 --> 00:27:48,840
you might have half of your SOC on one older wafer

555
00:27:48,840 --> 00:27:51,600
and then the other half of your SOC on another wafer.

556
00:27:51,600 --> 00:27:54,320
You just kind of stack them like Legos

557
00:27:54,320 --> 00:27:56,200
and just make sure all the bumps

558
00:27:56,200 --> 00:27:59,920
and all of the vias kind of connect the right way.

559
00:27:59,920 --> 00:28:01,240
And you kind of align them.

560
00:28:02,080 --> 00:28:02,920
You glue them together.

561
00:28:02,920 --> 00:28:03,800
That's, I'm oversimplifying,

562
00:28:03,800 --> 00:28:05,520
but yeah, you align them, you glue them together.

563
00:28:05,520 --> 00:28:06,360
You're done.

564
00:28:08,560 --> 00:28:11,520
Embedded graphics use case analysis.

565
00:28:12,920 --> 00:28:16,200
So bandwidth for GPUs is more or less based

566
00:28:16,200 --> 00:28:18,200
on resolution FPS that you desire, right?

567
00:28:18,200 --> 00:28:19,800
That's very simple.

568
00:28:20,880 --> 00:28:23,240
And when we look at an exercise,

569
00:28:23,240 --> 00:28:25,680
I used to work for an IoT-ish company

570
00:28:25,680 --> 00:28:27,040
and we used to go in front of a customer

571
00:28:27,040 --> 00:28:28,880
and they say, what's your use case?

572
00:28:28,880 --> 00:28:31,080
And we'd have the back of the napkin kind of calculations.

573
00:28:31,920 --> 00:28:32,760
And I think every engineer needs

574
00:28:32,760 --> 00:28:33,600
to be able to do these things.

575
00:28:33,600 --> 00:28:36,240
Is this the chip or what chip would be good enough

576
00:28:36,240 --> 00:28:38,920
to do your use case for the lowest amount of money?

577
00:28:38,920 --> 00:28:41,160
And so they'd say, okay, well, this is what I want to do.

578
00:28:41,160 --> 00:28:42,760
And just so I can give you an example,

579
00:28:42,760 --> 00:28:44,200
how much bandwidth would be required

580
00:28:44,200 --> 00:28:49,200
just to render a 1080p60 video game?

581
00:28:50,480 --> 00:28:52,960
And so like, what does 1080p mean?

582
00:28:52,960 --> 00:28:54,960
Does anyone want to tell me?

583
00:28:54,960 --> 00:28:56,320
Like how many pixels, yeah.

584
00:28:58,360 --> 00:29:00,240
Right, it's about like 2 million, right?

585
00:29:00,920 --> 00:29:02,880
And then how many bytes are in a pixel?

586
00:29:08,800 --> 00:29:10,680
Three or four, right?

587
00:29:10,680 --> 00:29:13,680
Either have RGB or RGBA, right?

588
00:29:13,680 --> 00:29:16,240
Okay, and then 60 frames per second

589
00:29:16,240 --> 00:29:18,360
for self-explanatory.

590
00:29:18,360 --> 00:29:19,720
And so if you look at this,

591
00:29:21,800 --> 00:29:23,800
this is not including scratch mem or overdraw,

592
00:29:23,800 --> 00:29:25,320
which is like reading and writing.

593
00:29:25,320 --> 00:29:27,000
It's just to give you like the minimum

594
00:29:27,000 --> 00:29:28,640
of just pretending you're coming up with stuff

595
00:29:28,640 --> 00:29:29,480
from thin air and writing it.

596
00:29:29,760 --> 00:29:32,480
It's gonna be about 500 megabytes per second, okay?

597
00:29:32,480 --> 00:29:34,760
Now assume that you do have to read and write

598
00:29:34,760 --> 00:29:36,120
and do a bunch of other things.

599
00:29:36,120 --> 00:29:38,560
Now you're causing a lot of congestion.

600
00:29:38,560 --> 00:29:42,840
And 1080 isn't even the hot resolution, it's 4K.

601
00:29:42,840 --> 00:29:45,600
We take the same thing and we multiply that by four.

602
00:29:45,600 --> 00:29:48,920
You get like two gigs a second just on the bandwidth plus.

603
00:29:52,360 --> 00:29:54,760
And so we have to do some really interesting things.

604
00:29:54,760 --> 00:29:57,320
Like we have to really worry about polygon count

605
00:29:57,320 --> 00:29:58,160
with embedded.

606
00:29:59,520 --> 00:30:01,240
I worked at a company where we're working

607
00:30:01,240 --> 00:30:03,440
with car manufacturers and they have like,

608
00:30:04,400 --> 00:30:05,880
when you turn certain cars on,

609
00:30:05,880 --> 00:30:09,440
they show you that little model of a car in 3D spinning

610
00:30:09,440 --> 00:30:10,280
in front of the dash.

611
00:30:10,280 --> 00:30:11,720
Has anybody seen that before?

612
00:30:11,720 --> 00:30:12,560
And they hand it to us and say,

613
00:30:12,560 --> 00:30:14,120
this is going extremely slow.

614
00:30:14,120 --> 00:30:15,720
And I go, okay, well send it to us.

615
00:30:15,720 --> 00:30:16,640
Let's see what we can do.

616
00:30:16,640 --> 00:30:19,400
They had like a 2 million polygon,

617
00:30:19,400 --> 00:30:21,520
2 million polygon like model.

618
00:30:21,520 --> 00:30:22,840
And I go, what did you give me?

619
00:30:22,840 --> 00:30:25,560
He goes, we gave you the actual like CAD of the car.

620
00:30:26,920 --> 00:30:28,080
And that's an extreme example.

621
00:30:28,560 --> 00:30:30,120
But even when I worked in video games,

622
00:30:30,120 --> 00:30:33,200
we would have multiple LODs and we would make sure

623
00:30:33,200 --> 00:30:34,880
that the distance and the LOD matched up

624
00:30:34,880 --> 00:30:36,840
so that we weren't doing more processing than necessary.

625
00:30:36,840 --> 00:30:38,440
And so this is just an illustration to say

626
00:30:38,440 --> 00:30:42,120
that after a certain amount of triangles,

627
00:30:42,120 --> 00:30:43,520
there's no perceptible difference.

628
00:30:43,520 --> 00:30:45,520
And I think this is pretty obvious to a lot of you

629
00:30:45,520 --> 00:30:47,800
that have been doing graphics for a little while.

630
00:30:47,800 --> 00:30:51,360
So, but we still have to educate our own customers.

631
00:30:52,400 --> 00:30:54,640
And I also want to say that I've been alluding to this,

632
00:30:54,640 --> 00:30:57,920
that rendering is just one part of image composition.

633
00:30:58,760 --> 00:30:59,600
Like even when you're taking,

634
00:30:59,600 --> 00:31:01,680
think about like a camera situation.

635
00:31:01,680 --> 00:31:04,440
You're taking a video, but it's not just the video.

636
00:31:04,440 --> 00:31:07,760
Assuming that all of the ISP stuff that's happening,

637
00:31:07,760 --> 00:31:09,160
like all of the color correction

638
00:31:09,160 --> 00:31:10,560
and all of the camera interpolation,

639
00:31:10,560 --> 00:31:11,440
all that stuff's happening for free.

640
00:31:11,440 --> 00:31:14,880
You still have overlays and you have some digital smarts.

641
00:31:14,880 --> 00:31:18,120
And that means that the camera image has to be read

642
00:31:18,120 --> 00:31:20,800
and interpreted by either a CPU

643
00:31:20,800 --> 00:31:22,520
or a neural network processing or a GPU.

644
00:31:22,520 --> 00:31:24,160
And it has to have overlay drawn on top of it.

645
00:31:24,160 --> 00:31:26,160
So you can have a little box around the face

646
00:31:26,200 --> 00:31:27,720
or you can have like,

647
00:31:27,720 --> 00:31:29,920
what's your resolution that you're capturing it at?

648
00:31:29,920 --> 00:31:31,640
All that stuff happens and we take it for granted,

649
00:31:31,640 --> 00:31:33,720
but that's actually real work.

650
00:31:33,720 --> 00:31:35,760
And every time something like that does happen,

651
00:31:35,760 --> 00:31:37,720
it's another read and write on the bus.

652
00:31:41,360 --> 00:31:43,920
So here's another kind of calculation situation.

653
00:31:43,920 --> 00:31:47,440
So bandwidth requirements, part two, example use case.

654
00:31:47,440 --> 00:31:49,120
We have our, you know,

655
00:31:51,640 --> 00:31:54,480
your normal like UI for video, right?

656
00:31:54,480 --> 00:31:55,760
Just to do this much.

657
00:31:56,360 --> 00:31:57,720
And so we have a decoded video streaming

658
00:31:57,720 --> 00:32:00,080
in H.265 on 4K.

659
00:32:00,080 --> 00:32:03,440
We overlay 2D rendered UI on top of that video content.

660
00:32:04,440 --> 00:32:06,080
We read the composited frame.

661
00:32:06,080 --> 00:32:08,120
So the UI on top of the video,

662
00:32:08,120 --> 00:32:10,280
and then we spit it out to the display.

663
00:32:10,280 --> 00:32:12,280
Lots of people actually overlook the fact

664
00:32:12,280 --> 00:32:14,360
that we actually have to write this to a screen.

665
00:32:14,360 --> 00:32:15,720
None of that is free.

666
00:32:15,720 --> 00:32:18,520
And so when you think about how much bandwidth you need,

667
00:32:18,520 --> 00:32:20,480
how fast your bus needs to run,

668
00:32:20,480 --> 00:32:22,120
how much cash you might need,

669
00:32:22,120 --> 00:32:23,720
you have to take all of these things into account,

670
00:32:23,720 --> 00:32:25,480
especially for use cases.

671
00:32:26,200 --> 00:32:27,040
And so first things happen

672
00:32:27,040 --> 00:32:30,040
is you read the encoded information.

673
00:32:30,040 --> 00:32:32,320
You send that to the video codec.

674
00:32:32,320 --> 00:32:34,560
The video codec takes it and decodes it

675
00:32:34,560 --> 00:32:35,840
and sends it to the GPU.

676
00:32:35,840 --> 00:32:40,440
GPU overlays this pretty picture on top of it,

677
00:32:40,440 --> 00:32:42,160
sends it to the display controller.

678
00:32:42,160 --> 00:32:44,960
Display controller syncs it up with the display using Vsync

679
00:32:44,960 --> 00:32:46,480
and then ships out that image.

680
00:32:49,640 --> 00:32:53,360
So let's play a game called how powerful is your smartphone?

681
00:32:53,360 --> 00:32:54,200
Okay.

682
00:32:55,680 --> 00:32:56,960
So just as a history,

683
00:32:56,960 --> 00:32:59,840
I love the fact that you had ENIAC down the hall.

684
00:32:59,840 --> 00:33:04,840
In 1948, ENIAC had a magnificent 400 flops,

685
00:33:05,080 --> 00:33:07,360
400 floating operations per second.

686
00:33:07,360 --> 00:33:09,480
I mean, I think you can get enough people in a room

687
00:33:09,480 --> 00:33:12,280
and they could probably beat ENIAC, okay?

688
00:33:12,280 --> 00:33:13,320
But that was amazing.

689
00:33:13,320 --> 00:33:15,360
It was really, it's actually,

690
00:33:15,360 --> 00:33:17,160
I mean, for the time it was awesome.

691
00:33:18,240 --> 00:33:22,200
20 years later, the Cray-1 had 100 megaflops.

692
00:33:22,200 --> 00:33:23,920
We couldn't get enough people in a room to do that.

693
00:33:23,920 --> 00:33:25,440
That's pretty impressive as well.

694
00:33:26,280 --> 00:33:27,400
But it also took up, you know,

695
00:33:27,400 --> 00:33:29,160
probably a power plant worth of power

696
00:33:29,160 --> 00:33:32,280
and multiple, multiple rooms full of servers to do that.

697
00:33:32,280 --> 00:33:34,480
And then you have the Cray-3, 400,

698
00:33:34,480 --> 00:33:36,920
the next supercomputer in 1990,

699
00:33:36,920 --> 00:33:40,080
which wasn't as long as it seems.

700
00:33:40,080 --> 00:33:42,040
Anybody alive at 1990 other than me?

701
00:33:42,040 --> 00:33:43,480
Any, you're still on?

702
00:33:45,240 --> 00:33:46,080
Oh, man.

703
00:33:47,360 --> 00:33:48,920
I don't know how much I qualify.

704
00:33:48,920 --> 00:33:49,760
Yeah, okay.

705
00:33:49,760 --> 00:33:51,800
So in 1990, I was alive and kicking

706
00:33:51,800 --> 00:33:54,240
and playing video games at the time.

707
00:33:54,240 --> 00:33:58,720
That was 1.7 gigaflops was supercomputer powerful, okay?

708
00:33:58,720 --> 00:34:00,000
And now we look at consoles

709
00:34:00,000 --> 00:34:02,240
because I like to look at things that you know.

710
00:34:02,240 --> 00:34:06,360
So the original gangster Xbox was 20 gigaflops, okay?

711
00:34:06,360 --> 00:34:08,640
Xbox 360, 240 gigaflops.

712
00:34:08,640 --> 00:34:12,080
Xbox One, 1400 gigaflops.

713
00:34:12,080 --> 00:34:14,080
Xbox One X, six teraflops.

714
00:34:14,080 --> 00:34:16,680
That was the one released maybe two and a half years ago.

715
00:34:16,680 --> 00:34:18,400
Same thing, the PS PlayStation,

716
00:34:18,400 --> 00:34:19,240
I don't want to leave them out.

717
00:34:19,240 --> 00:34:20,560
It's very similar.

718
00:34:20,560 --> 00:34:21,760
On the last two generations,

719
00:34:21,760 --> 00:34:23,760
they're basically using the same chipset.

720
00:34:24,640 --> 00:34:27,000
So 1840 and 4200,

721
00:34:27,000 --> 00:34:30,120
but you can see like come from very meager beginnings

722
00:34:30,120 --> 00:34:32,400
and look how powerful they are now.

723
00:34:32,400 --> 00:34:36,840
And I say this, but even like just released from Nvidia,

724
00:34:38,280 --> 00:34:43,080
80 teraflops on a single device, 80 teraflops.

725
00:34:43,080 --> 00:34:45,920
That is, I have to say, it's amazing.

726
00:34:45,920 --> 00:34:49,880
Now the power on it is requiring close to a kilowatt,

727
00:34:49,880 --> 00:34:53,120
you know, and it is melting its connectors.

728
00:34:54,600 --> 00:34:55,880
But that's still pretty impressive

729
00:34:55,880 --> 00:34:58,040
if you keep the room cool enough.

730
00:34:58,040 --> 00:35:02,960
16,000 cores, frequency 2.2 to 2.5 gigahertz.

731
00:35:02,960 --> 00:35:05,640
Bus is basically a terabyte per second.

732
00:35:05,640 --> 00:35:07,760
GPU RAM, 24 gigabytes.

733
00:35:07,760 --> 00:35:11,600
Gigabytes of RAM on a GPU only.

734
00:35:12,480 --> 00:35:14,680
Okay, that's pretty impressive.

735
00:35:14,680 --> 00:35:16,960
And I want to compare this to a mobile phone.

736
00:35:18,360 --> 00:35:22,760
Samsung Galaxy phone from last year, one to two teraflops.

737
00:35:22,800 --> 00:35:25,200
I do want to say that's damn impressive, by the way,

738
00:35:25,200 --> 00:35:26,840
in your pocket.

739
00:35:26,840 --> 00:35:31,560
This is more than the Xbox One in your pocket, okay?

740
00:35:32,480 --> 00:35:35,760
Power, 2.5 sustained, 4.5 watts peak.

741
00:35:35,760 --> 00:35:36,720
What does that mean?

742
00:35:36,720 --> 00:35:40,000
That means that normal operation, you're only allowed 2.5,

743
00:35:40,000 --> 00:35:42,120
but if you really want to show off,

744
00:35:42,120 --> 00:35:43,880
you can get four and a half, but not for very long,

745
00:35:43,880 --> 00:35:46,240
like two to five minutes, okay?

746
00:35:46,240 --> 00:35:48,360
Cores, four to 12 shader cores,

747
00:35:48,360 --> 00:35:50,800
800 megahertz to 1.3 gigahertz

748
00:35:50,800 --> 00:35:52,120
are very frequency constrained

749
00:35:52,120 --> 00:35:53,960
because of the thermals and the power.

750
00:35:53,960 --> 00:35:56,840
Bus is 68 gigabytes per second.

751
00:35:56,840 --> 00:35:59,120
Okay, two orders of magnitude almost.

752
00:36:01,160 --> 00:36:03,680
GPU RAM, a whopping one gigabyte, which is a lot.

753
00:36:03,680 --> 00:36:05,000
I feel like I'm defending myself.

754
00:36:05,000 --> 00:36:06,600
I really shouldn't be.

755
00:36:06,600 --> 00:36:09,360
The mobile GPU is an impressive beast.

756
00:36:09,360 --> 00:36:11,320
Now, I want to ask you a question.

757
00:36:11,320 --> 00:36:12,520
Which is more efficient?

758
00:36:17,360 --> 00:36:18,200
Yeah.

759
00:36:19,160 --> 00:36:20,960
Yeah, I mean, it's a leading question, right?

760
00:36:25,640 --> 00:36:26,480
Yeah.

761
00:36:28,400 --> 00:36:29,240
Oh, sure.

762
00:36:29,240 --> 00:36:30,880
I can't tell you how much the GPU itself costs.

763
00:36:30,880 --> 00:36:32,240
Like I could, but I can't.

764
00:36:32,240 --> 00:36:37,240
But just to give you an idea that it's multiple hundreds.

765
00:36:38,920 --> 00:36:41,080
And so, yes, it's much cheaper.

766
00:36:41,080 --> 00:36:43,320
Maybe that wasn't a very fair,

767
00:36:43,320 --> 00:36:46,280
but you can't really buy the NVIDIA card by itself.

768
00:36:46,280 --> 00:36:47,720
You can't buy the NVIDIA chip by itself.

769
00:36:48,240 --> 00:36:49,840
It's hooked up to a bunch of stuff with RAM.

770
00:36:49,840 --> 00:36:51,680
You can't really buy the mobile phone by itself,

771
00:36:51,680 --> 00:36:53,480
like the chip, the GPU by itself.

772
00:36:53,480 --> 00:36:56,360
It's hooked up to a bunch of other stuff, so whatever.

773
00:36:56,360 --> 00:36:59,600
But yeah, so the cost, maybe not the right comparison,

774
00:36:59,600 --> 00:37:03,200
but the efficiency is pretty darn impressive.

775
00:37:03,200 --> 00:37:05,080
I don't know if I wrote anything on that,

776
00:37:05,080 --> 00:37:09,440
but you can see that if you were to take one kilowatt

777
00:37:09,440 --> 00:37:13,280
or even 800, and you look at the difference

778
00:37:13,280 --> 00:37:16,040
between 800 and two, or 800 and four,

779
00:37:16,040 --> 00:37:18,680
you're talking about 200 times, right?

780
00:37:18,680 --> 00:37:22,000
But then if you look at the shader TFLOPS difference,

781
00:37:22,000 --> 00:37:25,360
it's only a difference of 40 to 80 times.

782
00:37:25,360 --> 00:37:30,080
So we are basically one to two X more efficient, right?

783
00:37:31,200 --> 00:37:32,840
Just wanna make that clear, we win.

784
00:37:32,840 --> 00:37:33,680
Just joking.

785
00:37:34,600 --> 00:37:37,720
So I wanna talk about what is it like

786
00:37:37,720 --> 00:37:39,600
to work on embedded GPUs?

787
00:37:40,440 --> 00:37:42,680
I've done this almost my whole career.

788
00:37:42,920 --> 00:37:45,800
It's a weird thing because a lot of the sexy type

789
00:37:45,800 --> 00:37:48,560
of GPU work is done in different industries,

790
00:37:48,560 --> 00:37:49,840
not in the mobile phones.

791
00:37:49,840 --> 00:37:52,000
And just recently, like the last 10 years,

792
00:37:52,000 --> 00:37:54,480
the mobile GPUs really come into its own, right?

793
00:37:54,480 --> 00:37:56,520
Being able to play video games on your phone

794
00:37:56,520 --> 00:37:59,600
and have them not be card games is relatively new,

795
00:37:59,600 --> 00:38:00,480
five, 10 years.

796
00:38:02,800 --> 00:38:05,600
And so I look at this and I kind of talked about

797
00:38:05,600 --> 00:38:09,880
everything that the Samsung group kind of does in order.

798
00:38:09,880 --> 00:38:12,280
And I put three years, three months,

799
00:38:12,280 --> 00:38:14,400
and three weeks kind of, and some kind of,

800
00:38:14,400 --> 00:38:16,280
this is maybe a little deceptive of an order,

801
00:38:16,280 --> 00:38:18,600
just to give you kind of an idea of how things work.

802
00:38:18,600 --> 00:38:21,000
So first we start with marketing requirements gathering.

803
00:38:21,000 --> 00:38:22,400
If you're an engineer, you always have to do that.

804
00:38:22,400 --> 00:38:23,640
What do we have to build?

805
00:38:23,640 --> 00:38:24,800
Who's going to tell us?

806
00:38:24,800 --> 00:38:26,800
Are we going to look at competitive analysis?

807
00:38:26,800 --> 00:38:30,880
Are we gonna look at what our customers want?

808
00:38:30,880 --> 00:38:31,760
Why are we gonna build it?

809
00:38:31,760 --> 00:38:33,440
What's the killer app?

810
00:38:33,440 --> 00:38:35,200
Then we do software hardware co-design.

811
00:38:35,200 --> 00:38:36,600
What did we start with from last year?

812
00:38:36,600 --> 00:38:38,200
Where do we need to get to?

813
00:38:38,200 --> 00:38:39,280
How are we going to do that?

814
00:38:39,680 --> 00:38:43,680
What features and bits and bobs we need to add to it?

815
00:38:43,680 --> 00:38:45,800
We do hardware architecture, RTL design.

816
00:38:45,800 --> 00:38:47,600
Architecture is actually a macro level,

817
00:38:47,600 --> 00:38:50,480
like big swab changes.

818
00:38:50,480 --> 00:38:53,240
And then the RTL is kind of like implementation, right?

819
00:38:53,240 --> 00:38:55,240
Actually changing the gates using Verilog,

820
00:38:55,240 --> 00:38:57,840
actually figuring out how we're gonna get that done.

821
00:38:59,160 --> 00:39:02,040
Hardware validation and RTL design happen at the same time.

822
00:39:02,040 --> 00:39:04,800
They build a model as the RTL is being built.

823
00:39:04,800 --> 00:39:05,640
So you have two different ways

824
00:39:05,640 --> 00:39:06,640
of getting to the same information

825
00:39:06,640 --> 00:39:09,000
to make sure that you can test what you built

826
00:39:09,000 --> 00:39:10,440
and that it should work.

827
00:39:10,440 --> 00:39:12,600
And it's pretty amazing that you can build

828
00:39:12,600 --> 00:39:14,160
trillions of transistors in the device

829
00:39:14,160 --> 00:39:16,000
and get it to work on the first spin.

830
00:39:18,040 --> 00:39:19,600
Physical design device integration.

831
00:39:19,600 --> 00:39:21,200
This is when you,

832
00:39:21,200 --> 00:39:23,960
this is like the electrical engineering part of it.

833
00:39:23,960 --> 00:39:25,280
Like everything else I've been talking about

834
00:39:25,280 --> 00:39:26,760
is like computer engineering,

835
00:39:26,760 --> 00:39:28,040
but this is like the electrical engineering.

836
00:39:28,040 --> 00:39:29,800
This is where the rubber meets the road.

837
00:39:29,800 --> 00:39:33,160
You actually have electricity powering

838
00:39:33,160 --> 00:39:36,720
or the simulation of powering through the device.

839
00:39:36,720 --> 00:39:38,760
Where are you gonna meet your timings?

840
00:39:39,520 --> 00:39:40,360
How are you gonna do the layout?

841
00:39:40,360 --> 00:39:41,960
What kind of transistors are you gonna use?

842
00:39:41,960 --> 00:39:44,040
There's multiple, multiple flavors of transistors.

843
00:39:44,040 --> 00:39:45,840
Some of them are very leaky and fast

844
00:39:45,840 --> 00:39:47,720
and some of them are not leaky and slow.

845
00:39:47,720 --> 00:39:49,200
What can you get away with?

846
00:39:49,200 --> 00:39:50,240
All of these are trade-offs

847
00:39:50,240 --> 00:39:52,120
that a hardware designer has to make.

848
00:39:52,120 --> 00:39:54,040
And I'm not even smart enough to figure that stuff out.

849
00:39:54,040 --> 00:39:55,960
So we have very smart people doing,

850
00:39:55,960 --> 00:39:59,400
we call it PIPD, physical design, physical integration,

851
00:39:59,400 --> 00:40:00,600
device integration.

852
00:40:00,600 --> 00:40:02,000
Software driver validation.

853
00:40:02,000 --> 00:40:03,880
We add new features all the time.

854
00:40:03,880 --> 00:40:06,120
The OS is constantly changing.

855
00:40:06,120 --> 00:40:08,320
The API is constantly changing.

856
00:40:08,320 --> 00:40:09,920
The games are constantly changing.

857
00:40:09,920 --> 00:40:12,560
We have to make sure that they all work together.

858
00:40:12,560 --> 00:40:14,680
GPU tools, ecosystem enablement.

859
00:40:15,640 --> 00:40:18,040
You have to be able to debug your video games.

860
00:40:18,040 --> 00:40:19,880
You have to make sure that what you think you're drawing

861
00:40:19,880 --> 00:40:20,720
is what you're drawing

862
00:40:20,720 --> 00:40:22,480
and you're getting good performance.

863
00:40:22,480 --> 00:40:23,720
And if you're not, why?

864
00:40:23,720 --> 00:40:25,000
And so we have to provide that stuff

865
00:40:25,000 --> 00:40:27,640
so that people can actually debug the games.

866
00:40:27,640 --> 00:40:29,400
We have to do device productization.

867
00:40:29,400 --> 00:40:30,440
What does that mean?

868
00:40:30,440 --> 00:40:33,400
It means long time ago,

869
00:40:33,400 --> 00:40:36,520
when I worked on like MP3 players before the iPhone,

870
00:40:36,520 --> 00:40:37,360
you're welcome.

871
00:40:38,160 --> 00:40:40,160
We would put like, this is a real tech.

872
00:40:41,080 --> 00:40:43,000
Anybody ever heard of the Diamond Rio?

873
00:40:43,000 --> 00:40:45,480
Or you guys have heard of the iPod, right?

874
00:40:45,480 --> 00:40:48,120
There were MP3 players before the iPod.

875
00:40:48,120 --> 00:40:50,600
Okay, and those MP3 players were sad.

876
00:40:50,600 --> 00:40:52,200
And I worked on some of them.

877
00:40:54,000 --> 00:40:57,280
The Walkman was a flavor, but it had a tape deck.

878
00:40:57,280 --> 00:41:00,480
And then you had these like weird in between MP3 players

879
00:41:00,480 --> 00:41:02,600
that would have a little bit of flash, like 64 megs.

880
00:41:02,600 --> 00:41:04,640
And you can put like, and people were amazed.

881
00:41:04,640 --> 00:41:08,440
You can put like 100 songs on it, okay?

882
00:41:08,440 --> 00:41:11,640
And that was great because you had a cassette tape.

883
00:41:11,640 --> 00:41:14,400
Anyway, or a CD with 12 songs.

884
00:41:14,400 --> 00:41:16,200
Now you've got to 100 and that's amazing.

885
00:41:16,200 --> 00:41:18,240
So one of the tests we did, and this is an example,

886
00:41:18,240 --> 00:41:21,320
is we used to put a weight on a pencil

887
00:41:21,320 --> 00:41:22,840
on top of the fast forward button,

888
00:41:22,840 --> 00:41:25,000
and we go to home and we come back in the morning.

889
00:41:25,000 --> 00:41:27,960
And if it was still fast forwarding, you win.

890
00:41:27,960 --> 00:41:30,440
Okay, that's productization.

891
00:41:30,440 --> 00:41:32,040
I know that's a very simplistic example,

892
00:41:32,040 --> 00:41:34,840
but things that we do do is we fuzz

893
00:41:34,840 --> 00:41:36,960
or we do something called monkey testing,

894
00:41:36,960 --> 00:41:40,760
which is where we have a program pretend to hit buttons

895
00:41:40,760 --> 00:41:44,000
all over the Android screen and try to break it.

896
00:41:44,000 --> 00:41:47,480
Okay, and we do that and we have to pass 48 hours

897
00:41:47,480 --> 00:41:50,920
without it crashing in order to call it productization.

898
00:41:50,920 --> 00:41:53,800
Okay, and just be glad that people are doing this

899
00:41:53,800 --> 00:41:55,760
because how frustrated would you be

900
00:41:55,760 --> 00:41:57,440
if it crashed all the time?

901
00:41:57,440 --> 00:42:00,040
So productization is getting this polishing

902
00:42:00,040 --> 00:42:04,040
and getting all of the last minute bugs out of things.

903
00:42:05,480 --> 00:42:07,320
Application development.

904
00:42:07,320 --> 00:42:09,720
Sometimes we have new features

905
00:42:09,720 --> 00:42:11,080
and our customers don't know how to use them.

906
00:42:11,080 --> 00:42:12,440
We'll go into some of those a little later.

907
00:42:12,440 --> 00:42:14,280
And then field application engineering is,

908
00:42:14,280 --> 00:42:16,200
it's in the field, somebody reported a bug.

909
00:42:16,200 --> 00:42:18,760
How do we dive into that bug, look at the call stack,

910
00:42:18,760 --> 00:42:21,240
figure out what happened and fix it on an update?

911
00:42:21,240 --> 00:42:24,120
Okay, all of these things are important.

912
00:42:25,240 --> 00:42:27,040
And I kind of have this line in the middle.

913
00:42:27,040 --> 00:42:29,040
This is when the actual chip comes back

914
00:42:29,040 --> 00:42:30,760
and you can start working on real hardware.

915
00:42:30,760 --> 00:42:32,400
Everything before is emulation.

916
00:42:32,400 --> 00:42:35,080
Everything after is, we call it post-Silicon.

917
00:42:35,080 --> 00:42:36,720
After Silicon comes back.

918
00:42:36,720 --> 00:42:38,680
Pre-Silicon, post-Silicon.

919
00:42:39,680 --> 00:42:42,520
Okay, this is my team.

920
00:42:45,000 --> 00:42:48,360
We have, for Android, this should not be a surprise.

921
00:42:48,360 --> 00:42:50,880
We have three APIs we support.

922
00:42:52,040 --> 00:42:54,080
We have OpenGL and Vulkan and OpenCL.

923
00:42:54,080 --> 00:42:55,840
And we have a compiler team that supports

924
00:42:55,840 --> 00:42:58,680
all the shader compilers that do all of that work.

925
00:42:59,680 --> 00:43:02,280
And then we support a couple OSs, Linux and Android.

926
00:43:04,000 --> 00:43:06,200
And so we have a team for doing all this

927
00:43:06,200 --> 00:43:07,320
and I have a few more teams.

928
00:43:07,320 --> 00:43:09,760
And everything in blue is in user mode driver space

929
00:43:09,760 --> 00:43:12,520
and it's in C++ and everything in orange-ish peach,

930
00:43:12,520 --> 00:43:14,480
whatever the color is, in kernel mode driver space,

931
00:43:14,480 --> 00:43:16,160
privileged space, and it kind of interacts

932
00:43:16,160 --> 00:43:17,720
with the OS much closer, right?

933
00:43:19,040 --> 00:43:20,240
So that's basically the team.

934
00:43:20,240 --> 00:43:22,880
However, it's a little different.

935
00:43:22,880 --> 00:43:25,240
One thing that we did recently,

936
00:43:25,240 --> 00:43:26,880
and then we just productized it in last year's,

937
00:43:26,880 --> 00:43:28,720
was we got rid of our OpenGL driver.

938
00:43:29,840 --> 00:43:32,720
We converted it to a Google project

939
00:43:32,720 --> 00:43:34,720
that we help support called ANGLE,

940
00:43:34,720 --> 00:43:37,040
which stands for Almost Native Graphics Layer Engine.

941
00:43:37,040 --> 00:43:40,400
And it actually translates Vulkan into OpenGL,

942
00:43:40,400 --> 00:43:42,040
or OpenGL into Vulkan.

943
00:43:42,040 --> 00:43:44,520
And the reason we did that is because

944
00:43:44,520 --> 00:43:46,800
it reduces our total cost of ownership.

945
00:43:46,800 --> 00:43:49,560
If we only have support two APIs instead of three APIs,

946
00:43:49,560 --> 00:43:50,880
we win.

947
00:43:50,880 --> 00:43:52,920
This is a open source product.

948
00:43:52,920 --> 00:43:55,560
And so the community's supporting it in addition to us.

949
00:43:55,560 --> 00:43:58,000
So we actually distribute some of that cost

950
00:43:58,000 --> 00:43:59,920
of having to maintain a whole driver.

951
00:43:59,920 --> 00:44:01,280
And that's actually pretty cool.

952
00:44:01,280 --> 00:44:05,000
And also, it might, the hope is actually

953
00:44:05,000 --> 00:44:06,560
that we push people to using Vulkan

954
00:44:06,560 --> 00:44:08,440
because it's a much harder to use language.

955
00:44:08,440 --> 00:44:12,520
So if they can compile their OpenGL stuff into Vulkan,

956
00:44:12,520 --> 00:44:13,640
and they can do this at runtime,

957
00:44:13,640 --> 00:44:15,120
then maybe they'll just use Vulkan.

958
00:44:15,120 --> 00:44:18,160
But honestly, you guys have heard the Vulkan talk.

959
00:44:18,160 --> 00:44:20,240
It's a very complex, hard-to-use language.

960
00:44:20,240 --> 00:44:22,560
It's not as easy as OpenGL Hello World.

961
00:44:22,560 --> 00:44:25,200
Some of the classes are projected.

962
00:44:25,200 --> 00:44:27,920
I give them the option of sub-GL or what.

963
00:44:27,920 --> 00:44:28,880
Yeah, suckers.

964
00:44:28,880 --> 00:44:31,760
You don't want to use Vulkan.

965
00:44:31,760 --> 00:44:33,560
All right.

966
00:44:33,560 --> 00:44:35,840
So this is kind of another pictorial version.

967
00:44:35,840 --> 00:44:40,840
So a GLES application translates into ANGLE and RUNTIME.

968
00:44:40,840 --> 00:44:45,760
We actually redirect the OpenGL DLL into this ANGLE layer.

969
00:44:45,760 --> 00:44:50,560
It has its own compiler that recompiles GLSL into SPUR-V.

970
00:44:50,560 --> 00:44:53,600
SPUR-V and the state gets converted and put

971
00:44:53,600 --> 00:44:57,360
into the Vulkan, and then goes into our hardware abstraction

972
00:44:57,360 --> 00:45:01,920
layer, gets the kernel, the libdrm kernel on Linux.

973
00:45:01,920 --> 00:45:03,840
We'll make space and do the threading,

974
00:45:03,840 --> 00:45:07,000
send it down to the kernel driver, down to the GPU.

975
00:45:07,000 --> 00:45:09,040
Vulkan goes directly down, so it doesn't

976
00:45:09,040 --> 00:45:09,960
have this extra thing.

977
00:45:09,960 --> 00:45:12,320
We have OpenCL with its own ICD.

978
00:45:12,320 --> 00:45:15,160
So this is kind of what the call stack looks like for a driver.

979
00:45:15,600 --> 00:45:17,600
So if I was to update that picture, it would look like

980
00:45:17,600 --> 00:45:18,600
this.

981
00:45:18,600 --> 00:45:22,560
You can see apps can either call OpenGL, Vulkan, or OpenCL.

982
00:45:22,560 --> 00:45:25,880
Same thing, except really, the compiler now only

983
00:45:25,880 --> 00:45:27,400
has to support Vulkan and OpenCL.

984
00:45:27,400 --> 00:45:30,600
I can see I'm probably leading you to where I'm going next.

985
00:45:30,600 --> 00:45:33,680
So the nice thing about SPUR-V, a lot of you

986
00:45:33,680 --> 00:45:35,000
guys know what SPUR-V is, right?

987
00:45:35,000 --> 00:45:37,800
It's the compiler language that gets generated

988
00:45:37,800 --> 00:45:43,240
that's very low level, is that it's very versatile.

989
00:45:43,240 --> 00:45:47,800
And so you can basically start from any source shader language

990
00:45:47,800 --> 00:45:49,440
and compile into SPUR-V pretty easily,

991
00:45:49,440 --> 00:45:52,000
and actually compile from SPUR-V into any other shader language.

992
00:45:52,000 --> 00:45:53,840
So it's like a perfect, what we call,

993
00:45:53,840 --> 00:45:56,040
intermediate representation.

994
00:45:56,040 --> 00:45:59,240
And so because of this, we're actually

995
00:45:59,240 --> 00:46:02,040
doing the next project that I've kind of funded,

996
00:46:02,040 --> 00:46:04,520
is we're doing the same thing for OpenCL.

997
00:46:04,520 --> 00:46:06,360
We're going from OpenCL, and we're

998
00:46:06,360 --> 00:46:08,920
using a project called CLVK, and we're

999
00:46:08,920 --> 00:46:11,320
going to convert the OpenCL into Vulkan.

1000
00:46:11,320 --> 00:46:13,240
And what does this do?

1001
00:46:13,240 --> 00:46:15,360
It simplifies this picture a lot.

1002
00:46:15,360 --> 00:46:19,480
So now, my group really only has to support a Vulkan driver

1003
00:46:19,480 --> 00:46:20,640
once this gets done.

1004
00:46:20,640 --> 00:46:22,880
And I can put all of my engineers on one driver,

1005
00:46:22,880 --> 00:46:24,560
make it really good, and yet I can

1006
00:46:24,560 --> 00:46:26,640
support three different APIs.

1007
00:46:26,640 --> 00:46:28,120
I don't know how interesting this is,

1008
00:46:28,120 --> 00:46:30,280
but this is actually kind of the way a lot of things

1009
00:46:30,280 --> 00:46:30,800
are going.

1010
00:46:30,800 --> 00:46:36,120
If you're on a Windows box, you really have a DX12 driver.

1011
00:46:36,120 --> 00:46:39,600
Everybody has a DX12 driver, and the DX12 driver

1012
00:46:39,960 --> 00:46:43,800
and the DX9, DX10, DX11 are being translated into DX12.

1013
00:46:43,800 --> 00:46:46,880
And they actually have VK on DX, and that's

1014
00:46:46,880 --> 00:46:48,080
being translated into DX.

1015
00:46:48,080 --> 00:46:52,000
And so the model is, let people program in what they want,

1016
00:46:52,000 --> 00:46:55,800
and let it get converted into a singular native format

1017
00:46:55,800 --> 00:46:58,760
so that the hardware companies don't pull their hair out.

1018
00:46:58,760 --> 00:46:59,360
Yeah?

1019
00:46:59,360 --> 00:47:04,360
Is there any, like, if you convert OpenGL into Vulkan,

1020
00:47:04,360 --> 00:47:06,160
is there a performance increase, or is it

1021
00:47:06,160 --> 00:47:09,400
just like the actual translation

1022
00:47:09,400 --> 00:47:11,240
so that it runs the code?

1023
00:47:11,240 --> 00:47:12,840
There's two answers to that.

1024
00:47:12,840 --> 00:47:16,160
So one of them is we're hoping that there's not

1025
00:47:16,160 --> 00:47:17,560
an actual decrease.

1026
00:47:17,560 --> 00:47:18,920
However, there is a cost.

1027
00:47:18,920 --> 00:47:20,800
There's an overhead cost in the compilation.

1028
00:47:20,800 --> 00:47:23,560
You're compiling something twice.

1029
00:47:23,560 --> 00:47:27,200
So what we want to do is we want to take,

1030
00:47:27,200 --> 00:47:30,400
so Google has an initiative to get people to use Vulkan more.

1031
00:47:30,400 --> 00:47:32,320
And part of the reason is pretty obvious.

1032
00:47:32,320 --> 00:47:35,160
What is the Apple shading language?

1033
00:47:35,160 --> 00:47:35,800
Metal.

1034
00:47:36,480 --> 00:47:39,440
Is that a high level or a low level language?

1035
00:47:39,440 --> 00:47:40,760
Low level.

1036
00:47:40,760 --> 00:47:41,360
Yeah.

1037
00:47:41,360 --> 00:47:43,640
Apple used to use OpenGL, yes.

1038
00:47:43,640 --> 00:47:46,040
And then they decided to have their own.

1039
00:47:46,040 --> 00:47:50,920
And so if Android allows people to use GLSL and OpenGL,

1040
00:47:50,920 --> 00:47:53,600
it's really not as competitive as Metal,

1041
00:47:53,600 --> 00:47:54,960
because it's not as low level.

1042
00:47:54,960 --> 00:47:57,720
However, the programming model sucks on Vulkan,

1043
00:47:57,720 --> 00:47:58,720
I'll be honest.

1044
00:47:58,720 --> 00:48:01,680
And so the way to do it is to allow them to program OpenGL

1045
00:48:01,680 --> 00:48:04,840
and convert it, and eventually replace things

1046
00:48:04,880 --> 00:48:06,920
so that you don't have to do the double compile.

1047
00:48:10,360 --> 00:48:11,880
I want to talk about a little bit more

1048
00:48:11,880 --> 00:48:13,400
software-oriented responsibilities.

1049
00:48:13,400 --> 00:48:16,200
I alluded to this before.

1050
00:48:16,200 --> 00:48:18,680
My group's responsible for real products.

1051
00:48:18,680 --> 00:48:19,480
Yeah, go ahead.

1052
00:48:19,480 --> 00:48:21,880
I have a question.

1053
00:48:21,880 --> 00:48:25,440
So how long do you think OpenGL has

1054
00:48:25,440 --> 00:48:28,800
before it's fully phased out?

1055
00:48:28,800 --> 00:48:30,520
I don't think this is a secret, but I

1056
00:48:30,520 --> 00:48:32,560
think the idea for Android space,

1057
00:48:32,560 --> 00:48:34,200
I can't speak for all the other spaces,

1058
00:48:34,200 --> 00:48:37,920
the idea for Android space is that it

1059
00:48:37,920 --> 00:48:43,040
will be deprecated completely by like 2026, 7.

1060
00:48:43,040 --> 00:48:45,640
But that doesn't mean you can't not use it.

1061
00:48:45,640 --> 00:48:48,200
It just means that if you're going to use it,

1062
00:48:48,200 --> 00:48:50,520
you're going to literally use Angle.

1063
00:48:50,520 --> 00:48:53,120
So either the operating system will

1064
00:48:53,120 --> 00:48:57,120
have Angle compiled into it, and you'll still use OpenGL,

1065
00:48:57,120 --> 00:48:59,160
but you know you're going to take this overhead.

1066
00:48:59,160 --> 00:49:00,800
You're taking a tax, a performance tax,

1067
00:49:00,800 --> 00:49:02,360
if you use GL.

1068
00:49:02,360 --> 00:49:05,760
Or there's a possibility they stop shipping it,

1069
00:49:05,760 --> 00:49:07,440
and then you have to basically bring it

1070
00:49:07,440 --> 00:49:09,400
in as your own DLL in your application.

1071
00:49:09,400 --> 00:49:14,520
So like OpenGL will stop getting support, but like so.

1072
00:49:14,520 --> 00:49:16,680
Let's be honest, OpenGL stopped getting support

1073
00:49:16,680 --> 00:49:18,400
for the last seven, eight years.

1074
00:49:18,400 --> 00:49:22,760
So in that case, once Angle is like fully deployed,

1075
00:49:22,760 --> 00:49:24,760
is there any need to also update that,

1076
00:49:24,760 --> 00:49:29,480
because it's a converter for a static API?

1077
00:49:29,480 --> 00:49:30,440
There's always reasons.

1078
00:49:30,560 --> 00:49:32,320
People are always finding bugs.

1079
00:49:32,320 --> 00:49:34,200
People are always finding new things.

1080
00:49:34,200 --> 00:49:36,880
But OpenGL has been in maintenance mode

1081
00:49:36,880 --> 00:49:38,680
for at least four or five years.

1082
00:49:38,680 --> 00:49:41,720
And they do add extensions, but nobody really wants them to.

1083
00:49:41,720 --> 00:49:46,440
And so the goal here, at least from Samsung and Google's

1084
00:49:46,440 --> 00:49:48,800
perspective, I don't want to speak completely for Google,

1085
00:49:48,800 --> 00:49:51,760
but the idea is that we want everybody to move to Vulkan.

1086
00:49:51,760 --> 00:49:54,520
And so in the Android space, we want people to move to Vulkan.

1087
00:49:54,520 --> 00:49:57,960
If you want to develop on OpenGL and eventually move

1088
00:49:57,960 --> 00:49:59,560
to Vulkan, that's fine.

1089
00:49:59,600 --> 00:50:02,120
If you want to even do your shaders in GLSL or HLSL

1090
00:50:02,120 --> 00:50:03,560
and confirm SPUR-V, that's actually

1091
00:50:03,560 --> 00:50:05,200
the model that's being pushed.

1092
00:50:05,200 --> 00:50:07,080
So really, what they're asking for you to do

1093
00:50:07,080 --> 00:50:11,040
is do one of two really easy things, which is one,

1094
00:50:11,040 --> 00:50:13,440
use an existing engine that already has Vulkan supported,

1095
00:50:13,440 --> 00:50:16,840
which is all of them, or two, write your own rendering

1096
00:50:16,840 --> 00:50:18,880
engine in Vulkan.

1097
00:50:18,880 --> 00:50:22,320
And I think most people are just using an off-the-shelf engine.

1098
00:50:22,320 --> 00:50:26,040
And so if you get a Unity or an Unreal,

1099
00:50:26,040 --> 00:50:27,920
they're already going to have Vulkan support.

1100
00:50:27,920 --> 00:50:31,160
You just have to make sure you're using it.

1101
00:50:31,160 --> 00:50:33,960
And that's actually the whole reason that Vulkan exists,

1102
00:50:33,960 --> 00:50:36,880
is the paradigm that people are trying to say

1103
00:50:36,880 --> 00:50:40,240
is that we want people, or people

1104
00:50:40,240 --> 00:50:43,880
have been moving to game engines,

1105
00:50:43,880 --> 00:50:47,080
and we want those game engines to have full access

1106
00:50:47,080 --> 00:50:49,200
and full control of the GPU.

1107
00:50:49,200 --> 00:50:51,840
And the way to do that is to give them a low-level language.

1108
00:50:51,840 --> 00:50:56,480
Vulkan was never meant for the average Joe to program into.

1109
00:50:56,480 --> 00:51:00,160
It was meant for the game engines to program into.

1110
00:51:00,160 --> 00:51:03,240
And so all of these efforts actually make a lot of sense.

1111
00:51:03,240 --> 00:51:05,200
If you want to program OpenGL, great.

1112
00:51:05,200 --> 00:51:06,280
It'll get converted to Vulkan.

1113
00:51:06,280 --> 00:51:07,160
You'll lose a little bit.

1114
00:51:07,160 --> 00:51:08,560
Or CL, it'll get converted to Vulkan.

1115
00:51:08,560 --> 00:51:09,600
You'll lose a little bit.

1116
00:51:09,600 --> 00:51:10,640
It's fine.

1117
00:51:10,640 --> 00:51:12,060
You're losing a little bit anyway,

1118
00:51:12,060 --> 00:51:16,040
because the state machines that were incorporated in GL

1119
00:51:16,040 --> 00:51:17,400
were very inefficient.

1120
00:51:17,400 --> 00:51:20,320
And you're just reintroducing those state machines again.

1121
00:51:23,840 --> 00:51:25,840
But the hope is that most of the game engines

1122
00:51:25,840 --> 00:51:27,160
will go to Vulkan only.

1123
00:51:27,160 --> 00:51:31,880
And then you'll get that low overhead of the driver.

1124
00:51:31,880 --> 00:51:32,380
Someone?

1125
00:51:32,380 --> 00:51:34,880
Yeah.

1126
00:51:34,880 --> 00:51:36,720
How do you find, from your perspective,

1127
00:51:36,720 --> 00:51:38,720
the tooling around working on Vulkan?

1128
00:51:38,720 --> 00:51:41,320
Not good enough.

1129
00:51:41,320 --> 00:51:44,240
So we work with Lunar-G, and they

1130
00:51:44,240 --> 00:51:45,760
have a decent amount of tools.

1131
00:51:45,760 --> 00:51:48,440
A lot of translation tools are good.

1132
00:51:48,440 --> 00:51:50,640
RenderDoc, do you guys know what RenderDoc is?

1133
00:51:50,640 --> 00:51:52,680
All right, RenderDoc's actually not bad.

1134
00:51:52,720 --> 00:51:56,560
I mean, as a frame inspector goes, it's pretty good.

1135
00:51:56,560 --> 00:51:58,360
The other tools, like the profiling tools,

1136
00:51:58,360 --> 00:52:01,240
like Google has something called Perfetto, AGI GAPID.

1137
00:52:01,240 --> 00:52:02,640
Those tools can be improved.

1138
00:52:02,640 --> 00:52:05,700
We're hoping to help Google improve those soon.

1139
00:52:05,700 --> 00:52:07,320
So we do have plans to make that better.

1140
00:52:07,320 --> 00:52:09,080
But as an ecosystem, what's happened

1141
00:52:09,080 --> 00:52:10,500
is, because the tools aren't good,

1142
00:52:10,500 --> 00:52:13,240
we have hardware vendors, and we call them IHVs,

1143
00:52:13,240 --> 00:52:14,840
have their own tools for each IHV.

1144
00:52:14,840 --> 00:52:17,880
So it looks like an ARM tool and a Vulkan tool.

1145
00:52:17,880 --> 00:52:19,880
And Samsung doesn't want to have a Samsung tool.

1146
00:52:19,880 --> 00:52:22,720
So what we're trying to do is promote better tools

1147
00:52:22,720 --> 00:52:24,040
within Google.

1148
00:52:24,040 --> 00:52:27,080
And so, yeah, I don't think they're good enough.

1149
00:52:27,080 --> 00:52:27,840
That's the answer.

1150
00:52:27,840 --> 00:52:29,380
So hopefully, we'll make them better.

1151
00:52:29,380 --> 00:52:30,340
And it's a fun project.

1152
00:52:30,340 --> 00:52:33,800
So it should be fun in the process.

1153
00:52:33,800 --> 00:52:37,200
So software responsibilities, I just

1154
00:52:37,200 --> 00:52:39,800
want to say we have to support in maintenance mode.

1155
00:52:39,800 --> 00:52:40,920
It's kind of obvious.

1156
00:52:40,920 --> 00:52:44,760
For n plus 1 is next year, n minus 1 is last year.

1157
00:52:44,760 --> 00:52:47,200
n is this year.

1158
00:52:47,200 --> 00:52:48,920
For the next three years, we have

1159
00:52:48,920 --> 00:52:50,600
to OS update to make sure everything

1160
00:52:50,600 --> 00:52:52,920
is healthy in both conformance and performance.

1161
00:52:52,920 --> 00:52:55,520
But for the next year, or for the current year,

1162
00:52:55,520 --> 00:52:57,600
we have to validate the new OS to make sure

1163
00:52:57,600 --> 00:52:59,680
that it passes those monkey tests I talked about.

1164
00:52:59,680 --> 00:53:01,440
We have to do feature tuning to make sure

1165
00:53:01,440 --> 00:53:04,040
all the new features are working exactly how we expect them to.

1166
00:53:04,040 --> 00:53:05,880
We have to make sure everything's performance

1167
00:53:05,880 --> 00:53:11,600
tuned to make sure that everything, all of the policies

1168
00:53:11,600 --> 00:53:13,560
that we have in, say, the cache policies

1169
00:53:13,560 --> 00:53:17,520
are updated to give you the maximum performance.

1170
00:53:17,520 --> 00:53:21,240
You guys know what DBFS is?

1171
00:53:21,240 --> 00:53:22,880
You know what DBFS is?

1172
00:53:22,880 --> 00:53:23,880
Is it the volume system?

1173
00:53:23,880 --> 00:53:24,600
I don't know.

1174
00:53:24,600 --> 00:53:26,360
No, no, no.

1175
00:53:26,360 --> 00:53:30,080
It's voltage frequency scaling.

1176
00:53:30,080 --> 00:53:32,920
And that's when you can reduce the frequency of an IP

1177
00:53:32,920 --> 00:53:35,500
or increase it and reduce the voltage based

1178
00:53:35,500 --> 00:53:36,880
on that frequency or increase it.

1179
00:53:36,880 --> 00:53:39,920
It's a power management scheme.

1180
00:53:39,920 --> 00:53:42,080
And that's caused a lot of tuning.

1181
00:53:42,080 --> 00:53:43,640
Think of it as idle mode.

1182
00:53:43,640 --> 00:53:47,180
If you're not using your phone, you want things to go to sleep.

1183
00:53:47,180 --> 00:53:48,140
And if it's going to sleep, it's

1184
00:53:48,140 --> 00:53:49,060
going to take a lot less power.

1185
00:53:49,060 --> 00:53:51,740
That's kind of what we call DBFS in the silicon world.

1186
00:53:51,740 --> 00:53:55,580
So dynamic voltage and frequency scaling.

1187
00:53:55,580 --> 00:53:57,180
OK, yeah.

1188
00:53:57,180 --> 00:54:00,220
Being in the slide, I'm going to get into some cases here.

1189
00:54:00,220 --> 00:54:00,720
Yeah.

1190
00:54:03,420 --> 00:54:05,300
Every time a new phone comes out,

1191
00:54:05,300 --> 00:54:10,380
and there is a certain brand that I've been paying,

1192
00:54:10,380 --> 00:54:12,820
every time a new phone comes out, all the phone teams

1193
00:54:12,820 --> 00:54:18,700
know, or an existing phone team knows.

1194
00:54:18,700 --> 00:54:22,420
So the reason for that is battery.

1195
00:54:22,420 --> 00:54:25,740
And I think we found this out with the company

1196
00:54:25,740 --> 00:54:30,340
we're not talking about, where the battery starts

1197
00:54:30,340 --> 00:54:34,820
to have less and less power and retains a lot less charge.

1198
00:54:34,820 --> 00:54:39,060
And then the firmware detects that and compensates.

1199
00:54:39,100 --> 00:54:42,580
And then it's like a feedback loop.

1200
00:54:42,580 --> 00:54:44,300
And it gets slower and slower and slower.

1201
00:54:44,300 --> 00:54:46,620
If you remember that same company,

1202
00:54:46,620 --> 00:54:51,580
this had a recall and had to replace a bunch of batteries.

1203
00:54:51,580 --> 00:54:53,660
The number one thing people said was, man,

1204
00:54:53,660 --> 00:54:55,980
my phone is going so fast.

1205
00:54:55,980 --> 00:54:58,020
And it's not because they gave them a new chip.

1206
00:54:58,020 --> 00:55:01,180
It was because they gave them a new battery.

1207
00:55:01,180 --> 00:55:03,660
And unfortunately, I think that's battery technology

1208
00:55:03,660 --> 00:55:05,540
for you.

1209
00:55:05,540 --> 00:55:08,420
At some point, people wanted such slim phones

1210
00:55:08,420 --> 00:55:11,380
that they stopped having the removable battery packs on them.

1211
00:55:11,380 --> 00:55:13,140
And I almost feel like we need to go back

1212
00:55:13,140 --> 00:55:14,420
to removable battery packs.

1213
00:55:14,420 --> 00:55:16,780
But I'm not in charge of that.

1214
00:55:16,780 --> 00:55:19,620
You could basically keep your phone alive for probably 2x

1215
00:55:19,620 --> 00:55:22,340
longer if you just were able to get a fresh battery

1216
00:55:22,340 --> 00:55:24,060
without having to take the thing apart.

1217
00:55:24,060 --> 00:55:27,220
But then we wouldn't be paying $400 for a new phone.

1218
00:55:27,220 --> 00:55:29,500
You'd be paying $400 for a new battery.

1219
00:55:29,500 --> 00:55:31,260
Yeah.

1220
00:55:31,260 --> 00:55:34,860
OK, so we have OS integration is the new one.

1221
00:55:34,860 --> 00:55:37,420
And then we might be developing the new technology

1222
00:55:37,420 --> 00:55:39,700
on old OSes, because sure, why not?

1223
00:55:39,700 --> 00:55:41,460
We have feature development, feature spec,

1224
00:55:41,460 --> 00:55:44,460
and performance analysis is always happening.

1225
00:55:44,460 --> 00:55:46,500
Performance is always happening all the time.

1226
00:55:46,500 --> 00:55:48,580
We're always trying to look at workloads

1227
00:55:48,580 --> 00:55:52,780
and figure out, how can we squeeze an extra instruction?

1228
00:55:52,780 --> 00:55:56,820
What are common workloads doing that we can do something

1229
00:55:56,820 --> 00:55:58,020
different and make it better?

1230
00:55:58,020 --> 00:56:00,340
Like, if we coupled these two instructions

1231
00:56:00,340 --> 00:56:03,820
and put them in a single cycle and made that one thing faster,

1232
00:56:03,820 --> 00:56:05,820
how much boost would that give us?

1233
00:56:05,820 --> 00:56:07,100
So there's constant work.

1234
00:56:08,060 --> 00:56:10,060
This is kind of like microarchitecture work,

1235
00:56:10,060 --> 00:56:11,820
saying, looking at given shaders,

1236
00:56:11,820 --> 00:56:15,580
looking at assembly on the GPU, what are patterns we're seeing?

1237
00:56:15,580 --> 00:56:19,060
What are ways we can reduce work or eliminate work or streamline

1238
00:56:19,060 --> 00:56:25,020
or have concurrency involved to parallelize work?

1239
00:56:29,060 --> 00:56:32,780
In my team, we have various validation platforms.

1240
00:56:32,780 --> 00:56:35,380
I'm still, the theme of this part of the talk

1241
00:56:35,380 --> 00:56:38,060
is, what is it like to work in embedded graphics?

1242
00:56:38,060 --> 00:56:40,060
We start out, we have a C functional model,

1243
00:56:40,060 --> 00:56:41,740
which is for somebody who literally

1244
00:56:41,740 --> 00:56:45,180
writes a simulator of how each part of the GPU works.

1245
00:56:45,180 --> 00:56:47,660
And then you can actually run it, and it's extremely slow.

1246
00:56:47,660 --> 00:56:50,580
And it runs in tens of thousands, of course.

1247
00:56:50,580 --> 00:56:53,580
And we do a lot of validation and verification using that.

1248
00:56:53,580 --> 00:56:57,580
We also will load the RTL on an FPGA farm

1249
00:56:57,580 --> 00:57:01,500
that actually simulates the actual gates using FPGAs.

1250
00:57:01,500 --> 00:57:04,900
And then we'll run Linux on that and run workloads on that.

1251
00:57:04,900 --> 00:57:07,020
And then we'll also do the same thing for Android,

1252
00:57:07,020 --> 00:57:08,620
which is a little bit more complicated,

1253
00:57:08,620 --> 00:57:10,460
because it's kind of like an OS on an OS.

1254
00:57:10,460 --> 00:57:11,880
Like a lot of people don't realize

1255
00:57:11,880 --> 00:57:15,220
that Android is actually sitting on top of a flavor of Linux

1256
00:57:15,220 --> 00:57:15,720
also.

1257
00:57:18,380 --> 00:57:21,500
And then we get a couple rounds of Silicon.

1258
00:57:21,500 --> 00:57:23,260
I was at Intel for a long time, and they

1259
00:57:23,260 --> 00:57:25,540
used to do so many spins of Silicon

1260
00:57:25,540 --> 00:57:28,020
because they kept getting it wrong.

1261
00:57:28,020 --> 00:57:28,940
I'm not bashing them.

1262
00:57:28,940 --> 00:57:30,060
It's a hard problem.

1263
00:57:30,060 --> 00:57:31,900
But at Samsung, I'm really impressed

1264
00:57:31,900 --> 00:57:35,300
because we do two spins a year, and we get it right,

1265
00:57:35,300 --> 00:57:36,780
and we ship.

1266
00:57:36,780 --> 00:57:38,860
And so we do this preliminary Silicon

1267
00:57:38,860 --> 00:57:41,700
where we do all of the big macro architectural changes.

1268
00:57:41,700 --> 00:57:44,740
And then we do a final Silicon where we get the process right.

1269
00:57:44,740 --> 00:57:47,120
Because you have to think about it's like baking cookies.

1270
00:57:47,120 --> 00:57:49,340
They're always changing the ratios

1271
00:57:49,340 --> 00:57:51,140
of the different ingredients in the fab,

1272
00:57:51,140 --> 00:57:53,780
and maybe the transistor counts and variations

1273
00:57:53,780 --> 00:57:54,660
and combinations.

1274
00:57:54,660 --> 00:57:57,420
They're doing all of these process tweaks

1275
00:57:57,420 --> 00:58:00,540
just to get it right, to get a little bit more power,

1276
00:58:00,540 --> 00:58:02,540
a little bit more battery savings, a little bit

1277
00:58:02,540 --> 00:58:03,820
more performance.

1278
00:58:03,820 --> 00:58:05,740
And then so they do that kind of final polish

1279
00:58:05,740 --> 00:58:07,020
we call Silicon final.

1280
00:58:07,020 --> 00:58:09,180
And then we get these different types of prototypes.

1281
00:58:09,180 --> 00:58:11,460
So we get these prototype boards at first,

1282
00:58:11,460 --> 00:58:13,860
and they look like big one foot by one foot circuit boards

1283
00:58:13,860 --> 00:58:15,180
with all these pullouts.

1284
00:58:15,180 --> 00:58:17,580
And you can hook up these debuggers to it

1285
00:58:17,580 --> 00:58:20,820
and measure current and power and do all this really gnarly

1286
00:58:20,820 --> 00:58:22,860
lab work on them just to make sure they're all

1287
00:58:22,860 --> 00:58:23,640
working correctly.

1288
00:58:23,640 --> 00:58:25,340
And then we get these engineering boards

1289
00:58:25,340 --> 00:58:26,880
that sit on our desk for programmers,

1290
00:58:26,880 --> 00:58:29,540
and they look like really blocky phones

1291
00:58:29,540 --> 00:58:31,820
that you just plug into USB-C. And if you've ever

1292
00:58:31,820 --> 00:58:34,280
done Android stuff, you do the Android debugger,

1293
00:58:34,280 --> 00:58:36,300
and you just kind of program them.

1294
00:58:36,300 --> 00:58:38,180
And then we get basically what comes

1295
00:58:38,180 --> 00:58:39,340
to be like the final product.

1296
00:58:39,340 --> 00:58:41,220
So they come in three different spins.

1297
00:58:41,220 --> 00:58:42,300
And so that's pretty cool.

1298
00:58:42,300 --> 00:58:45,860
We do this every year, and we ship a new product every year.

1299
00:58:45,860 --> 00:58:50,940
So we've gotten very good at it.

1300
00:58:50,940 --> 00:58:52,640
So I want to talk about what does it mean

1301
00:58:52,640 --> 00:58:54,680
to do Silicon development?

1302
00:58:54,680 --> 00:58:59,140
This is such a foreign concept to software people, right?

1303
00:58:59,140 --> 00:58:59,980
It's kind of scary.

1304
00:58:59,980 --> 00:59:02,540
It's like magic or something.

1305
00:59:02,540 --> 00:59:03,940
Somebody's got to do it.

1306
00:59:03,940 --> 00:59:05,700
This hardware software co-design,

1307
00:59:05,700 --> 00:59:08,580
that's something that actually has to happen.

1308
00:59:08,580 --> 00:59:11,540
And so for a specific feature, I'm just being very vague here.

1309
00:59:11,540 --> 00:59:13,540
You have RTL design and RTL validation

1310
00:59:13,540 --> 00:59:14,700
happening at the same time.

1311
00:59:14,700 --> 00:59:16,700
CSIM is that C simulator, C functional model

1312
00:59:16,700 --> 00:59:17,360
we're talking about.

1313
00:59:17,360 --> 00:59:18,820
They write the code that's supposed

1314
00:59:18,820 --> 00:59:20,980
to emulate what you're trying to do at the same time

1315
00:59:20,980 --> 00:59:22,340
as somebody is writing the RTL.

1316
00:59:22,340 --> 00:59:23,860
And you have two different formats

1317
00:59:23,860 --> 00:59:25,380
to kind of prove that the functionality is

1318
00:59:25,380 --> 00:59:26,580
going to happen the same way.

1319
00:59:26,580 --> 00:59:28,900
And then they model it and make sure the timing's right,

1320
00:59:28,900 --> 00:59:31,100
it's doing what you're expected, it's big or small,

1321
00:59:31,100 --> 00:59:33,100
however many gates it needs to be.

1322
00:59:33,100 --> 00:59:34,660
And then they do RTL debug.

1323
00:59:34,660 --> 00:59:37,900
And then eventually they build it for those FPGA farms

1324
00:59:37,900 --> 00:59:38,980
I'm talking about.

1325
00:59:38,980 --> 00:59:41,500
And so we can intercept in this CSIM.

1326
00:59:41,500 --> 00:59:44,220
We can intercept in these FPGAs.

1327
00:59:44,220 --> 00:59:49,100
And then we can actually log in to an SSH terminal.

1328
00:59:49,100 --> 00:59:52,820
And we can turn on this FPGA that's emulating.

1329
00:59:52,820 --> 00:59:55,820
Has anybody done FPGA with Xilinx or any of that stuff?

1330
00:59:55,820 --> 00:59:58,020
You load up a RTL design in Xilinx.

1331
00:59:58,020 --> 01:00:01,140
This is just an extremely multiple hundreds

1332
01:00:01,140 --> 01:00:05,300
of thousands of dollars of FPGAs on a farm, just really big.

1333
01:00:05,300 --> 01:00:07,660
It's called like Xibu or something like that.

1334
01:00:07,660 --> 01:00:10,700
And we load the entire GPU and sometimes the entire SoC

1335
01:00:10,700 --> 01:00:11,540
on these FPGAs.

1336
01:00:11,540 --> 01:00:15,620
And we run it before it's actually put into the silicon.

1337
01:00:15,620 --> 01:00:18,500
And then we make sure it all works.

1338
01:00:18,500 --> 01:00:19,420
And we debug it.

1339
01:00:19,420 --> 01:00:21,680
And we work, both hardware and software,

1340
01:00:21,680 --> 01:00:24,380
work together to make sure that the new feature that they just

1341
01:00:24,380 --> 01:00:26,900
added didn't break anything and it works as expected.

1342
01:00:26,900 --> 01:00:29,300
And then we do software development, hacks,

1343
01:00:29,300 --> 01:00:31,740
and prototypes in that same process.

1344
01:00:31,740 --> 01:00:33,220
And it's kind of a circle, right?

1345
01:00:33,220 --> 01:00:35,580
There's a small circle here, software development, hacks,

1346
01:00:35,580 --> 01:00:36,420
and experimentation.

1347
01:00:36,420 --> 01:00:38,060
What can we do to make the GPU better?

1348
01:00:38,060 --> 01:00:40,500
And there's a big one, the RTL that was written.

1349
01:00:40,500 --> 01:00:41,900
How do we make sure that it's OK?

1350
01:00:46,100 --> 01:00:48,380
Similar thing, this is a performance flow.

1351
01:00:48,380 --> 01:00:50,300
It's a little bit different.

1352
01:00:50,300 --> 01:00:51,300
We'll skip up to here.

1353
01:00:51,300 --> 01:00:53,020
We have these FPGA builds.

1354
01:00:53,020 --> 01:00:54,500
We have software development hacks.

1355
01:00:54,500 --> 01:00:56,580
We do this thing called trace generation,

1356
01:00:56,580 --> 01:01:01,940
where we take a recording of a video game, OK?

1357
01:01:01,940 --> 01:01:06,140
And has anybody heard of like, when you do render doc

1358
01:01:06,140 --> 01:01:09,260
and you capture a game, like frame or something like that,

1359
01:01:09,260 --> 01:01:12,700
what you're actually capturing is all of the API calls

1360
01:01:12,700 --> 01:01:14,740
and all the assets being sent to the GPU

1361
01:01:14,740 --> 01:01:17,300
and your client intercepting those, right?

1362
01:01:17,300 --> 01:01:21,060
And you create this like player piano type of instruction

1363
01:01:21,060 --> 01:01:24,140
file like this to get that same frame rendered

1364
01:01:24,140 --> 01:01:26,220
without actually having a game behind it, right?

1365
01:01:26,380 --> 01:01:28,500
So you're taking a video game recording.

1366
01:01:28,500 --> 01:01:30,260
So what we do is we do something similar.

1367
01:01:30,260 --> 01:01:33,220
We take video game recordings, and then we

1368
01:01:33,220 --> 01:01:38,100
put them into special kind of like hardware traces

1369
01:01:38,100 --> 01:01:40,060
that can be interpreted by the model.

1370
01:01:40,060 --> 01:01:43,980
And then we run it through experimentation,

1371
01:01:43,980 --> 01:01:45,020
make sure it works right.

1372
01:01:45,020 --> 01:01:46,700
And then we do modeling and analysis.

1373
01:01:46,700 --> 01:01:49,980
We look at flame charts and buckets of histograms.

1374
01:01:49,980 --> 01:01:52,620
And we try to figure out, where are the bottlenecks?

1375
01:01:52,620 --> 01:01:53,940
And where can we make it better?

1376
01:01:53,940 --> 01:01:55,340
And we look at a bunch of graphs,

1377
01:01:55,340 --> 01:01:57,540
a bunch of really patient, smart people looking at it

1378
01:01:57,540 --> 01:02:00,380
and saying, ooh, this is bandwidth limited.

1379
01:02:00,380 --> 01:02:02,340
This is GPU shader limited.

1380
01:02:02,340 --> 01:02:06,580
This is CPU limited, the texture limited.

1381
01:02:06,580 --> 01:02:08,620
And you find out where your bottlenecks are,

1382
01:02:08,620 --> 01:02:10,460
and you try to increase or make that better

1383
01:02:10,460 --> 01:02:12,540
so you can make the overall game faster.

1384
01:02:12,540 --> 01:02:14,340
Because just like in most workloads,

1385
01:02:14,340 --> 01:02:17,100
you're going to have a place where everything is bottlenecked.

1386
01:02:17,100 --> 01:02:19,540
Everything's going slower because some things aren't

1387
01:02:19,540 --> 01:02:21,340
getting fed fast enough because other things

1388
01:02:21,340 --> 01:02:24,020
are going too slow.

1389
01:02:24,020 --> 01:02:24,900
Does that make sense?

1390
01:02:24,900 --> 01:02:26,300
Are there any questions on that?

1391
01:02:26,300 --> 01:02:28,140
AUDIENCE 2 If you do single class,

1392
01:02:28,140 --> 01:02:30,540
I showed them how to use on the NVIDIA profile.

1393
01:02:30,540 --> 01:02:32,180
Yeah.

1394
01:02:32,180 --> 01:02:34,580
Similar thing.

1395
01:02:34,580 --> 01:02:38,260
So this is where I go to the what's fancy in mobile part.

1396
01:02:38,260 --> 01:02:39,940
What are we working on?

1397
01:02:39,940 --> 01:02:44,060
The first one is, I'm going to put up a disclaimer.

1398
01:02:44,060 --> 01:02:47,700
It's not as fancy as NVIDIA because we're on a mobile phone,

1399
01:02:47,700 --> 01:02:49,100
OK?

1400
01:02:49,100 --> 01:02:51,100
Oh, and before I get to that, actually,

1401
01:02:51,100 --> 01:02:54,740
I like to have this slide because some things,

1402
01:02:54,740 --> 01:02:56,300
the ideas always come first.

1403
01:02:56,300 --> 01:02:59,740
But sometimes you don't have the technology to do it right.

1404
01:02:59,740 --> 01:03:02,940
And I would claim that VR is kind of there still.

1405
01:03:02,940 --> 01:03:06,620
We're getting so close, but we're not quite there.

1406
01:03:06,620 --> 01:03:08,500
But watches are successful.

1407
01:03:08,500 --> 01:03:09,460
Watches are there.

1408
01:03:09,460 --> 01:03:12,860
But you can imagine somebody had that watch idea 34 years ago.

1409
01:03:12,860 --> 01:03:15,820
And it just wasn't going to be as good.

1410
01:03:15,820 --> 01:03:19,220
And obviously, this is taking the 50s and 60s.

1411
01:03:19,220 --> 01:03:21,060
They knew it was coming, but they

1412
01:03:21,060 --> 01:03:23,740
needed to wait for the tech to get it to work.

1413
01:03:23,740 --> 01:03:25,140
I love this slide.

1414
01:03:25,140 --> 01:03:26,220
But let's talk about it.

1415
01:03:26,220 --> 01:03:30,460
So we actually have ray tracing on last year's phone.

1416
01:03:30,460 --> 01:03:34,260
We paid a company called Basemark

1417
01:03:34,260 --> 01:03:36,260
to come up with this demo because we

1418
01:03:36,260 --> 01:03:38,460
were the first to put ray tracing on a mobile phone.

1419
01:03:38,460 --> 01:03:42,020
There was no content, OK?

1420
01:03:42,020 --> 01:03:44,580
So what this look shows is they took

1421
01:03:44,580 --> 01:03:46,820
one of their previous demos.

1422
01:03:46,820 --> 01:03:48,620
And what I want to show you here is

1423
01:03:48,620 --> 01:03:50,780
we're not doing full global illumination

1424
01:03:50,780 --> 01:03:52,380
because that's crazy town.

1425
01:03:52,380 --> 01:03:57,860
But what we are doing is reflections, shadows,

1426
01:03:57,860 --> 01:03:58,820
and effects.

1427
01:03:58,820 --> 01:04:00,820
And so you can see all of the reflections

1428
01:04:00,820 --> 01:04:04,660
are all ray traced with one to two bounces.

1429
01:04:04,660 --> 01:04:10,060
This is no reflections and then ray tracing reflections.

1430
01:04:10,060 --> 01:04:11,900
In the past, if you didn't have ray tracing,

1431
01:04:11,900 --> 01:04:13,740
you'd have to do an environmental mapping.

1432
01:04:13,740 --> 01:04:15,220
And they'd have to put it in a box.

1433
01:04:15,220 --> 01:04:16,900
And you'd have to sample from that.

1434
01:04:16,900 --> 01:04:17,980
It'd be extremely painful.

1435
01:04:17,980 --> 01:04:21,980
Here, we can just ray trace it with the BVH,

1436
01:04:21,980 --> 01:04:23,620
put it in, and have it reflect.

1437
01:04:23,620 --> 01:04:24,820
And it's much cleaner.

1438
01:04:24,820 --> 01:04:26,740
And it's nice.

1439
01:04:26,740 --> 01:04:30,380
And so this is a marketing video, so it goes on too long.

1440
01:04:30,380 --> 01:04:33,620
But the idea is that Samsung, we're

1441
01:04:33,620 --> 01:04:35,900
actually first on ray tracing in mobile.

1442
01:04:35,900 --> 01:04:37,900
And other groups are starting to do this.

1443
01:04:37,900 --> 01:04:40,100
Some of the challenges we have is, like I said,

1444
01:04:40,100 --> 01:04:43,220
we're working on one to two terabytes, teraflops.

1445
01:04:43,220 --> 01:04:46,260
We're not going to be able to do what the desktop cards can do.

1446
01:04:46,260 --> 01:04:48,900
Anybody have a guess on how much global illumination costs?

1447
01:04:52,180 --> 01:04:55,300
Just on the order of.

1448
01:04:55,300 --> 01:04:58,220
Like, assume the latest NVIDIA is at 80 teraflops,

1449
01:04:58,220 --> 01:04:59,500
and they can do it.

1450
01:04:59,500 --> 01:05:01,860
How much do you think between 2 and 80

1451
01:05:01,860 --> 01:05:05,660
you might need to be able to do global illumination?

1452
01:05:05,660 --> 01:05:07,220
Something like that.

1453
01:05:07,220 --> 01:05:08,500
Yeah, I would say 20, actually.

1454
01:05:08,500 --> 01:05:12,260
I'd say 20 teraflops to do global illumination.

1455
01:05:12,260 --> 01:05:14,500
I can honestly say that phones are probably not

1456
01:05:14,500 --> 01:05:17,420
going to get there maybe this decade.

1457
01:05:17,420 --> 01:05:18,340
Maybe we will.

1458
01:05:18,340 --> 01:05:19,740
I'd love to be surprised.

1459
01:05:19,740 --> 01:05:22,220
But maybe we'll just get there by 2030.

1460
01:05:22,220 --> 01:05:22,940
I don't know.

1461
01:05:22,940 --> 01:05:24,060
I don't know.

1462
01:05:24,060 --> 01:05:25,860
But it's not going to happen overnight.

1463
01:05:25,860 --> 01:05:28,980
And so a lot of ray tracing, as we see it today,

1464
01:05:28,980 --> 01:05:33,180
is going to happen as an effects, as an ad,

1465
01:05:33,180 --> 01:05:35,380
not as a complete solution.

1466
01:05:35,380 --> 01:05:36,260
And I think that's OK.

1467
01:05:36,260 --> 01:05:38,500
Hybrid ray tracing is good.

1468
01:05:38,500 --> 01:05:39,980
And it will get better and better

1469
01:05:39,980 --> 01:05:42,780
as more performance capabilities come across.

1470
01:05:42,780 --> 01:05:43,860
Yeah.

1471
01:05:44,460 --> 01:05:46,700
I guess this is a general paradigm question

1472
01:05:46,700 --> 01:05:47,620
about ray tracing.

1473
01:05:47,620 --> 01:05:50,220
Because ray tracing is one big deal.

1474
01:05:50,220 --> 01:05:51,020
And it looks good.

1475
01:05:51,020 --> 01:05:52,300
And the results are good.

1476
01:05:52,300 --> 01:05:54,700
But I think something interesting to me

1477
01:05:54,700 --> 01:05:59,500
is this year, the Resident Evil 4 remake is coming out.

1478
01:05:59,500 --> 01:06:03,300
And the original Resident Evil came out on the GameCube

1479
01:06:03,300 --> 01:06:06,900
and the Xbox 360, that generation.

1480
01:06:06,900 --> 01:06:11,580
And this year, the PS5 remake of Resident Evil 4.

1481
01:06:11,620 --> 01:06:18,300
And the thing is, people don't really see the value.

1482
01:06:18,300 --> 01:06:19,020
It is fancy.

1483
01:06:19,020 --> 01:06:20,780
There are shadows and stuff.

1484
01:06:20,780 --> 01:06:23,940
But at this time, a lot of people

1485
01:06:23,940 --> 01:06:28,500
were like, it was good enough on GameCube.

1486
01:06:28,500 --> 01:06:32,500
And now that we have all this real-time ray tracing stuff,

1487
01:06:32,500 --> 01:06:34,860
if there are more people that are going to get it.

1488
01:06:34,860 --> 01:06:36,820
But I think that the product you're looking at

1489
01:06:36,820 --> 01:06:38,460
is probably not a great example.

1490
01:06:38,460 --> 01:06:41,300
And the reason is because if I was the marketing guy taking

1491
01:06:41,380 --> 01:06:44,060
Resident Evil, whatever, and putting ray tracing on it,

1492
01:06:44,060 --> 01:06:48,140
I'd be going after two people, Nostalgia,

1493
01:06:48,140 --> 01:06:50,900
and doing a remaster.

1494
01:06:50,900 --> 01:06:52,780
But it's not like you're creating new content

1495
01:06:52,780 --> 01:06:53,540
and you're creating a new game.

1496
01:06:53,540 --> 01:06:55,500
You're really just trying to milk an existing

1497
01:06:55,500 --> 01:06:56,580
product for more money.

1498
01:06:56,580 --> 01:06:59,900
Yeah, I mean, it's just a remake before the cash in on that.

1499
01:06:59,900 --> 01:07:00,420
Totally.

1500
01:07:00,420 --> 01:07:02,140
And so for that, their geniuses are

1501
01:07:02,140 --> 01:07:03,340
going to make a lot of money.

1502
01:07:03,340 --> 01:07:05,780
However, what I think is, as a purist,

1503
01:07:05,780 --> 01:07:08,100
you want to see somebody really using,

1504
01:07:08,100 --> 01:07:11,740
you want Pixar-quality graphics in a real game being

1505
01:07:11,740 --> 01:07:14,020
used amazingly well, right?

1506
01:07:14,020 --> 01:07:15,260
I think it's coming.

1507
01:07:15,260 --> 01:07:16,900
It's just very, very expensive.

1508
01:07:16,900 --> 01:07:22,020
And Z-buffer render graphics and forward-rendering graphics

1509
01:07:22,020 --> 01:07:24,980
just has so much more maturity.

1510
01:07:24,980 --> 01:07:26,140
And it does it so well.

1511
01:07:26,140 --> 01:07:28,940
And we can be fooled so well that it's

1512
01:07:28,940 --> 01:07:31,620
going to be very hard to top that immediately.

1513
01:07:31,620 --> 01:07:34,500
The other thing is that this hybrid rendering is probably

1514
01:07:34,500 --> 01:07:37,540
the right way to go until we get to that point

1515
01:07:37,540 --> 01:07:39,700
where people have really figured out all the nooks

1516
01:07:39,700 --> 01:07:41,620
and crannies of ray tracing for real-time.

1517
01:07:41,620 --> 01:07:44,940
Because it's a different ballgame

1518
01:07:44,940 --> 01:07:47,940
than doing ray tracing in RenderMan,

1519
01:07:47,940 --> 01:07:52,660
where you have 100,000 cores and two hours per frame.

1520
01:07:52,660 --> 01:07:57,300
So if you're trying to do 60 FPS, 1080p,

1521
01:07:57,300 --> 01:08:00,500
super-scaled with denoising, blah, blah, blah, blah, blah,

1522
01:08:00,500 --> 01:08:02,340
you could probably do it on NVIDIA.

1523
01:08:02,340 --> 01:08:04,100
But people haven't created that content yet

1524
01:08:04,100 --> 01:08:06,260
because they haven't thought.

1525
01:08:06,260 --> 01:08:07,220
It hasn't matured yet.

1526
01:08:07,220 --> 01:08:08,500
So I think, give it five years.

1527
01:08:08,500 --> 01:08:10,700
Somebody will come up with something good.

1528
01:08:10,700 --> 01:08:12,660
But yeah, is it real?

1529
01:08:12,660 --> 01:08:16,220
I think once computing is free, it'll never be free.

1530
01:08:16,220 --> 01:08:19,540
But once it's free enough that this is not tasking,

1531
01:08:19,540 --> 01:08:21,780
like 20 teraflops is what you have on your phone,

1532
01:08:21,780 --> 01:08:22,900
then it will be cool.

1533
01:08:22,900 --> 01:08:25,340
And because when phone has 20 teraflops,

1534
01:08:25,340 --> 01:08:28,900
means your desktop's going to have 200, or maybe even 500.

1535
01:08:28,900 --> 01:08:30,700
And then you can do everything.

1536
01:08:30,700 --> 01:08:34,700
And then it's just going to be so much easier for people

1537
01:08:34,700 --> 01:08:36,780
to do stuff because you're just describing scenes

1538
01:08:36,820 --> 01:08:38,740
and telling it to physically render them.

1539
01:08:38,740 --> 01:08:40,740
Yeah.

1540
01:08:40,740 --> 01:08:42,700
I mean, I guess just in that case,

1541
01:08:42,700 --> 01:08:47,180
is the end goal, or the end game, I guess,

1542
01:08:47,180 --> 01:08:49,700
because ray tracing, by being physically-based,

1543
01:08:49,700 --> 01:08:53,540
will give a bunch of things that forward rendering

1544
01:08:53,540 --> 01:08:55,180
has to update, right?

1545
01:08:55,180 --> 01:08:57,220
So ray tracing will give us all that

1546
01:08:57,220 --> 01:09:00,980
to treat if we're willing to shell out to the computer.

1547
01:09:00,980 --> 01:09:03,340
Is that inherently just going to be,

1548
01:09:03,700 --> 01:09:07,100
if the compute question is not a problem anymore,

1549
01:09:07,100 --> 01:09:11,980
is there no reason to not do ray tracing?

1550
01:09:11,980 --> 01:09:14,380
The compute problem is not a problem anymore.

1551
01:09:14,380 --> 01:09:16,460
I think that there's multiple answers.

1552
01:09:16,460 --> 01:09:17,940
There's no right answer to that.

1553
01:09:17,940 --> 01:09:19,900
So I just want to be, I'm trying to be safe.

1554
01:09:19,900 --> 01:09:20,860
What do I think?

1555
01:09:20,860 --> 01:09:26,020
I think that there's usually the circle of technology,

1556
01:09:26,020 --> 01:09:31,380
and this is how it happens, where everybody goes all out,

1557
01:09:31,420 --> 01:09:33,820
pedal to the metal, try to get the most performance.

1558
01:09:33,820 --> 01:09:36,100
And then they realize that that sucks

1559
01:09:36,100 --> 01:09:38,620
because now you have to have a kilowatt or two kilowatts.

1560
01:09:38,620 --> 01:09:39,460
And they realize, no, no, no,

1561
01:09:39,460 --> 01:09:41,580
really efficiency is important.

1562
01:09:41,580 --> 01:09:43,340
And they go down the circle again,

1563
01:09:43,340 --> 01:09:46,020
and then they start really maximizing efficiency.

1564
01:09:46,020 --> 01:09:46,860
And then they realize,

1565
01:09:46,860 --> 01:09:48,220
hey, we got the efficiency thing down.

1566
01:09:48,220 --> 01:09:49,900
Now we're going to go back to performance.

1567
01:09:49,900 --> 01:09:54,700
And this wheel of technology is always happening.

1568
01:09:54,700 --> 01:09:56,380
You had your desktop computer,

1569
01:09:56,380 --> 01:09:58,260
and then you got your cheap phone,

1570
01:09:58,260 --> 01:10:00,100
and then you got a faster desktop computer,

1571
01:10:00,100 --> 01:10:01,380
and then you got your mobile phone,

1572
01:10:01,380 --> 01:10:04,140
and eventually your mobile phone serves everybody, right?

1573
01:10:04,140 --> 01:10:07,340
So in my opinion, when the mobile phone's able to do

1574
01:10:07,340 --> 01:10:10,900
everything a desktop can do, maybe today or tomorrow,

1575
01:10:10,900 --> 01:10:13,140
then we get to the next tier of what the killer app is.

1576
01:10:13,140 --> 01:10:15,060
And so I don't know what the killer app is.

1577
01:10:15,060 --> 01:10:16,700
Maybe it's AR, maybe it's VR,

1578
01:10:16,700 --> 01:10:18,940
maybe it's the meta whatever.

1579
01:10:18,940 --> 01:10:20,340
I don't know.

1580
01:10:20,340 --> 01:10:22,700
But honestly, if you look at it,

1581
01:10:22,700 --> 01:10:25,700
we don't have anywhere near enough connectivity,

1582
01:10:25,700 --> 01:10:27,340
and we don't have anywhere near enough compute

1583
01:10:27,340 --> 01:10:29,460
for the metaverse yet.

1584
01:10:29,460 --> 01:10:30,860
And so we're not there yet.

1585
01:10:30,860 --> 01:10:32,900
And I think that we are going to have to do

1586
01:10:32,900 --> 01:10:37,140
these cheating things for a ridiculously long amount of time

1587
01:10:37,140 --> 01:10:39,380
partially because we're trying,

1588
01:10:39,380 --> 01:10:42,540
because our eyes and our ears are fixed.

1589
01:10:42,540 --> 01:10:43,780
Like our eyes and our ears,

1590
01:10:43,780 --> 01:10:44,980
at least for the short amount of time

1591
01:10:44,980 --> 01:10:47,420
until someone does the brain implant thing,

1592
01:10:47,420 --> 01:10:50,900
we're going to reach some kind of like limitation

1593
01:10:50,900 --> 01:10:52,500
where even today, have you,

1594
01:10:52,500 --> 01:10:54,460
anybody here about like Europe is thinking

1595
01:10:54,460 --> 01:10:56,020
of banning 8K screens?

1596
01:10:56,020 --> 01:10:57,100
Have anybody heard that?

1597
01:10:57,100 --> 01:10:59,020
Why do you think Europe would think about banning

1598
01:10:59,140 --> 01:10:59,980
8K screens?

1599
01:11:02,420 --> 01:11:03,260
And?

1600
01:11:04,660 --> 01:11:06,060
It takes too much energy.

1601
01:11:06,060 --> 01:11:06,900
What does that mean?

1602
01:11:06,900 --> 01:11:11,260
We've reached like the matrix level

1603
01:11:11,260 --> 01:11:15,380
of visual capability of a screen, you know?

1604
01:11:15,380 --> 01:11:16,620
So that's great.

1605
01:11:16,620 --> 01:11:19,180
Now it's, and so we're definitely reaching,

1606
01:11:19,180 --> 01:11:22,900
we're reaching these levels where like MP3 sound good to us

1607
01:11:22,900 --> 01:11:24,340
and they're not good,

1608
01:11:24,340 --> 01:11:27,420
but we're able to like fill in the gaps in the MP3

1609
01:11:27,420 --> 01:11:30,220
and make it, we perceive that it sounds good.

1610
01:11:30,220 --> 01:11:32,740
And so we're not really having to do truth.

1611
01:11:32,740 --> 01:11:34,380
We're having to do perceptual truth.

1612
01:11:34,380 --> 01:11:35,580
It becomes philosophy.

1613
01:11:35,580 --> 01:11:36,940
I don't know what's good enough,

1614
01:11:36,940 --> 01:11:41,940
but I also think there's just a science love of,

1615
01:11:42,220 --> 01:11:43,620
we want to do it and make it better

1616
01:11:43,620 --> 01:11:45,700
because it's awesome to try.

1617
01:11:46,580 --> 01:11:48,980
And I think every engineer will want to do that.

1618
01:11:48,980 --> 01:11:51,340
No engineers are going to be like, nope, nope, we're good.

1619
01:11:51,340 --> 01:11:54,220
We don't need to make any more products, you know?

1620
01:11:55,740 --> 01:11:57,220
Either it can be cheaper.

1621
01:11:57,980 --> 01:11:59,820
Use less battery or it can be faster.

1622
01:12:01,140 --> 01:12:03,100
So I don't have a great answer to that.

1623
01:12:04,420 --> 01:12:05,260
Yeah.

1624
01:12:07,820 --> 01:12:09,340
It's using ray tracing queries.

1625
01:12:09,340 --> 01:12:11,860
So if you guys know about ray tracing on Vulkan,

1626
01:12:11,860 --> 01:12:13,660
there's two modes, really two modes,

1627
01:12:14,820 --> 01:12:17,420
pipeline and queries, okay?

1628
01:12:17,420 --> 01:12:18,820
Pipeline's more asynchronous

1629
01:12:18,820 --> 01:12:20,740
and queries is kind of the cheap version

1630
01:12:20,740 --> 01:12:25,740
where you throw in like BVH loads and stores

1631
01:12:26,060 --> 01:12:29,020
and you do everything else basically is compute.

1632
01:12:29,020 --> 01:12:30,380
And that's kind of what this is doing.

1633
01:12:30,380 --> 01:12:33,780
So we started small.

1634
01:12:33,780 --> 01:12:35,660
It's mostly software enabled.

1635
01:12:35,660 --> 01:12:37,060
Pipeline's also supported.

1636
01:12:37,060 --> 01:12:39,100
It's also software enabled, it's just slower.

1637
01:12:39,100 --> 01:12:41,540
And then as ray tracing picks up,

1638
01:12:41,540 --> 01:12:43,820
you can imagine that Samsung's going to increase

1639
01:12:43,820 --> 01:12:46,060
the hardware that supports the ray tracing

1640
01:12:46,060 --> 01:12:46,900
to make it faster.

1641
01:12:46,900 --> 01:12:49,460
But right now, as it's so new,

1642
01:12:49,460 --> 01:12:52,700
they're not willing to put as much hardware investment

1643
01:12:52,700 --> 01:12:54,100
into it until it really picks off.

1644
01:12:54,500 --> 01:12:58,980
We made the only mobile ray tracing app at the time.

1645
01:13:00,140 --> 01:13:01,380
So the demand's not there.

1646
01:13:01,380 --> 01:13:04,020
We're trying to create the sandbox for people

1647
01:13:04,020 --> 01:13:05,420
to start creating content

1648
01:13:05,420 --> 01:13:08,820
and then we'll increase the capability as the demand grows.

1649
01:13:08,820 --> 01:13:10,620
Yeah, that's the question I had was,

1650
01:13:11,700 --> 01:13:14,420
given the performance limitations,

1651
01:13:14,420 --> 01:13:17,340
and maybe when keyed in on other things,

1652
01:13:17,340 --> 01:13:19,540
because if you try playing a ray tracing game,

1653
01:13:19,540 --> 01:13:21,860
you're certainly gonna find it's gonna be a bit slow.

1654
01:13:21,860 --> 01:13:24,500
But doing it with effects isn't that big.

1655
01:13:24,500 --> 01:13:25,340
I guess, yeah.

1656
01:13:25,340 --> 01:13:26,460
Yeah.

1657
01:13:26,460 --> 01:13:28,860
Do you think you'd like to see ray tracing

1658
01:13:28,860 --> 01:13:32,140
be applied on mobile phones to things like AR

1659
01:13:32,140 --> 01:13:34,780
and camera filters and other things

1660
01:13:34,780 --> 01:13:36,980
before we see it full on games?

1661
01:13:36,980 --> 01:13:38,300
I think so.

1662
01:13:38,300 --> 01:13:40,940
I think that ray tracing is going to be the easier path.

1663
01:13:40,940 --> 01:13:42,780
Maybe this is your question answer.

1664
01:13:42,780 --> 01:13:44,580
It's gonna be the easier path to AR.

1665
01:13:45,620 --> 01:13:48,500
I think if you can bring in light sources

1666
01:13:48,500 --> 01:13:50,380
and detect light sources in a room

1667
01:13:50,380 --> 01:13:52,740
and then physically remodel them

1668
01:13:52,740 --> 01:13:55,420
in the scene that you're trying to overlay

1669
01:13:55,420 --> 01:13:57,100
on top of using AR,

1670
01:13:57,100 --> 01:13:59,580
that's going to be a much easier problem to solve.

1671
01:14:01,140 --> 01:14:03,020
So, I mean, because if you think about it,

1672
01:14:03,020 --> 01:14:05,580
like everybody knows that like what,

1673
01:14:05,580 --> 01:14:07,580
you've done like the very simple ray trace,

1674
01:14:07,580 --> 01:14:08,700
like path tracers, right?

1675
01:14:08,700 --> 01:14:10,820
Where you like, you draw a circle without shadows

1676
01:14:10,820 --> 01:14:12,500
and you realize it doesn't look right.

1677
01:14:12,500 --> 01:14:13,780
And then you add a shadow and you're like,

1678
01:14:13,780 --> 01:14:16,460
oh man, that's like night and day, right?

1679
01:14:16,460 --> 01:14:18,620
And then you throw on like specular

1680
01:14:18,620 --> 01:14:20,260
and all this other stuff and you're like,

1681
01:14:21,140 --> 01:14:21,980
wow, that looks pretty good.

1682
01:14:21,980 --> 01:14:24,660
And it doesn't, but you're like, that looks pretty good.

1683
01:14:24,660 --> 01:14:25,900
And then you throw a material on,

1684
01:14:25,900 --> 01:14:27,220
you're like, this is magic.

1685
01:14:27,220 --> 01:14:29,180
And you really didn't like do that much, right?

1686
01:14:29,180 --> 01:14:30,860
You put in the circle equation

1687
01:14:30,860 --> 01:14:32,740
and you put in a couple of intercepts

1688
01:14:32,740 --> 01:14:33,700
and then you throw in a KD tree

1689
01:14:33,700 --> 01:14:35,420
and you're like, I'm amazing, right?

1690
01:14:35,420 --> 01:14:37,100
And everybody does the same thing, right?

1691
01:14:37,100 --> 01:14:39,020
And so think about that.

1692
01:14:39,020 --> 01:14:40,700
That's so much easier to program.

1693
01:14:40,700 --> 01:14:42,340
The paradigm is so much easier.

1694
01:14:42,340 --> 01:14:45,340
Now say I want to detect and I want a 3D,

1695
01:14:45,340 --> 01:14:49,220
like what do you call it, slam the room

1696
01:14:49,220 --> 01:14:51,100
where you're modeling what the room's looking like.

1697
01:14:51,100 --> 01:14:52,180
And then you're going to try to put something

1698
01:14:52,180 --> 01:14:55,340
in the center of it and using ray tracing to do that.

1699
01:14:55,340 --> 01:14:57,180
Probably going to be the faster path

1700
01:14:57,180 --> 01:14:59,700
if you have all the compute you need.

1701
01:14:59,700 --> 01:15:01,780
So I don't know, I'm making stuff up.

1702
01:15:03,340 --> 01:15:04,540
Okay.

1703
01:15:04,540 --> 01:15:06,980
Next thing that we've done on last year's

1704
01:15:06,980 --> 01:15:08,420
was variable rate shading.

1705
01:15:08,420 --> 01:15:10,060
Has anybody heard of variable rate shading?

1706
01:15:10,060 --> 01:15:10,900
Yeah.

1707
01:15:10,900 --> 01:15:12,460
You want to describe what it is?

1708
01:15:15,020 --> 01:15:16,660
Yes, that's perfect.

1709
01:15:16,660 --> 01:15:19,180
I would call this the inverse of MSAA

1710
01:15:20,020 --> 01:15:21,620
MSAA, what does MSAA do?

1711
01:15:23,780 --> 01:15:26,100
It renders, so like for instance, MSAA4

1712
01:15:26,100 --> 01:15:28,180
will take four samples around the pixel,

1713
01:15:28,180 --> 01:15:30,660
average them to draw a single pixel, right?

1714
01:15:30,660 --> 01:15:32,020
This does the opposite.

1715
01:15:32,020 --> 01:15:35,060
It has different kernel sizes, like one by one,

1716
01:15:35,060 --> 01:15:36,780
or one by two, two by one, two by two,

1717
01:15:36,780 --> 01:15:39,220
four by two, two by four, four by four.

1718
01:15:39,220 --> 01:15:40,860
And if you can get away with it,

1719
01:15:40,860 --> 01:15:44,540
if either the application designer says

1720
01:15:44,540 --> 01:15:46,740
this part of the scene's not important,

1721
01:15:46,740 --> 01:15:49,780
then you can actually render through one pixel shader

1722
01:15:49,780 --> 01:15:53,220
and duplicate that information on multiple pixels.

1723
01:15:53,220 --> 01:15:54,620
This has become more prevalent.

1724
01:15:54,620 --> 01:15:57,500
Like this is almost backwards thinking in like 10 years ago

1725
01:15:57,500 --> 01:15:59,140
because we're trying to get more resolution,

1726
01:15:59,140 --> 01:16:01,100
but now we have too much resolution.

1727
01:16:01,100 --> 01:16:03,220
So now we need to do less work.

1728
01:16:03,220 --> 01:16:05,740
And so they're actually going backwards.

1729
01:16:05,740 --> 01:16:08,820
The two different flavors of this are attachment VRS,

1730
01:16:08,820 --> 01:16:10,780
which is where you have a lookup map

1731
01:16:10,780 --> 01:16:13,420
of the different areas you want different kernel sizes.

1732
01:16:13,420 --> 01:16:15,060
I call the kernel sizes like that,

1733
01:16:15,100 --> 01:16:18,660
four by four, two by two, or whatever.

1734
01:16:18,660 --> 01:16:22,420
And you can see that in yellow, those are smaller,

1735
01:16:22,420 --> 01:16:24,180
like one by two, two by two.

1736
01:16:24,180 --> 01:16:26,020
In white, it's one by one.

1737
01:16:26,020 --> 01:16:28,620
And then in orange, it's two by two.

1738
01:16:28,620 --> 01:16:29,860
Our device, this last year,

1739
01:16:29,860 --> 01:16:32,140
we only supported up to two by two.

1740
01:16:32,140 --> 01:16:33,540
We're looking to do more in the future,

1741
01:16:33,540 --> 01:16:36,900
but we need to get feedback and see if it's worth it.

1742
01:16:36,900 --> 01:16:38,180
Pipeline is different.

1743
01:16:38,180 --> 01:16:39,740
It means for every draw call,

1744
01:16:39,740 --> 01:16:42,380
the whole draw call is going to be in one by two,

1745
01:16:42,380 --> 01:16:44,820
two by one, two by two, or whatever.

1746
01:16:45,580 --> 01:16:46,500
So you can see that the whole draw is orange,

1747
01:16:46,500 --> 01:16:47,700
and this is an overlay,

1748
01:16:47,700 --> 01:16:49,780
and this is what the original scene looked like.

1749
01:16:49,780 --> 01:16:52,620
And so there is a lot of really interesting goodness

1750
01:16:52,620 --> 01:16:54,700
where if you want to see if you can save something,

1751
01:16:54,700 --> 01:16:59,100
you can probably do some analysis of your last scene

1752
01:16:59,100 --> 01:17:00,700
and then extrapolate that to your new scene.

1753
01:17:00,700 --> 01:17:03,060
I'll give you an example, like a typical,

1754
01:17:03,060 --> 01:17:05,260
like anybody know how MP3 works?

1755
01:17:06,260 --> 01:17:09,380
Does anybody know how it's like JPEG compression works?

1756
01:17:09,380 --> 01:17:11,740
The idea is that you're going to play

1757
01:17:11,740 --> 01:17:14,980
with the perceptions of the viewer or the listener, right?

1758
01:17:14,980 --> 01:17:18,860
An MP3, if you have a very dynamic sound wave,

1759
01:17:18,860 --> 01:17:21,500
you could probably throw away the small noise

1760
01:17:21,500 --> 01:17:23,100
next to that dynamic sound wave,

1761
01:17:23,100 --> 01:17:25,340
and you save some of that space in memory, right?

1762
01:17:25,340 --> 01:17:26,740
That's called compression.

1763
01:17:26,740 --> 01:17:27,740
Video is the same way.

1764
01:17:27,740 --> 01:17:30,260
If you have a very stark part of the scene

1765
01:17:30,260 --> 01:17:31,580
or a very gradual,

1766
01:17:31,580 --> 01:17:34,700
you could probably reduce the detail on the gradual

1767
01:17:34,700 --> 01:17:36,220
because it's not very perceptible

1768
01:17:36,220 --> 01:17:40,980
because our eyes are like derivative machines.

1769
01:17:40,980 --> 01:17:43,100
We're looking for change.

1770
01:17:43,100 --> 01:17:45,060
And so with this,

1771
01:17:45,060 --> 01:17:48,380
you can do some like DX, DY type calculations

1772
01:17:48,380 --> 01:17:50,060
and say, this is where we can cheat

1773
01:17:50,060 --> 01:17:51,620
because it's barely changing.

1774
01:17:51,620 --> 01:17:52,980
And this is where we can't cheat

1775
01:17:52,980 --> 01:17:55,780
because it's a sharp edge, right?

1776
01:17:55,780 --> 01:17:56,660
Very simple stuff.

1777
01:17:56,660 --> 01:17:57,500
Yeah.

1778
01:17:57,500 --> 01:18:02,500
This can be, you can actually do this as post-process.

1779
01:18:08,420 --> 01:18:10,220
And so you can feed,

1780
01:18:10,220 --> 01:18:12,140
it depends on how the application wants to do it.

1781
01:18:12,140 --> 01:18:14,580
So this is application dependent.

1782
01:18:14,580 --> 01:18:16,660
If you know what the previous scene

1783
01:18:16,660 --> 01:18:18,340
is going to be basically the same as the next scene,

1784
01:18:18,340 --> 01:18:19,460
like you didn't move,

1785
01:18:19,460 --> 01:18:22,940
let's say you're a character and you're standing still,

1786
01:18:22,940 --> 01:18:24,380
you know the last scene and the next scene

1787
01:18:24,380 --> 01:18:25,340
are pretty much similar.

1788
01:18:25,340 --> 01:18:27,180
You could probably take a sampling of the last scene

1789
01:18:27,180 --> 01:18:28,660
and have it infer your next scene.

1790
01:18:28,660 --> 01:18:30,660
And then what you're telling your pixel shader is,

1791
01:18:30,660 --> 01:18:32,980
hey, for these pixels, you're gonna be this kernel,

1792
01:18:32,980 --> 01:18:35,060
throw away, if it's like a two by two,

1793
01:18:35,060 --> 01:18:37,620
throw away three of the pixel shaders and reuse them.

1794
01:18:37,620 --> 01:18:38,660
Does that make sense?

1795
01:18:39,660 --> 01:18:40,500
Yeah.

1796
01:18:43,260 --> 01:18:47,180
Coming soon, algorithmic DNN or super resolution.

1797
01:18:47,180 --> 01:18:49,100
This is something everybody's playing around with.

1798
01:18:49,100 --> 01:18:53,620
You guys have heard of like DLSS or the Intel, whatever,

1799
01:18:53,620 --> 01:18:55,300
or the AMD has one.

1800
01:18:56,700 --> 01:18:58,300
The problem with this,

1801
01:18:58,300 --> 01:19:01,220
and I was telling a few people about this,

1802
01:19:02,260 --> 01:19:05,180
is that the cost of doing neural necks

1803
01:19:05,380 --> 01:19:09,380
on an embedded device is extremely expensive.

1804
01:19:09,380 --> 01:19:13,220
NVIDIA can get away with doing super resolution

1805
01:19:13,220 --> 01:19:17,260
because let's say they're operating at like 40 teraflops.

1806
01:19:17,260 --> 01:19:19,820
If they can shave off a couple of teraflops

1807
01:19:19,820 --> 01:19:24,540
by like rendering at 720 and upscaling to 4K,

1808
01:19:24,540 --> 01:19:25,980
then they have a couple of teraflops

1809
01:19:25,980 --> 01:19:28,180
to do this neural net on.

1810
01:19:28,180 --> 01:19:30,260
We don't have that kind of like spare change.

1811
01:19:30,260 --> 01:19:33,140
And so the cost of doing the neural net

1812
01:19:33,140 --> 01:19:38,140
has to supersede the savings in not rendering those pixels.

1813
01:19:38,700 --> 01:19:42,940
And the ratio for embedded isn't as good.

1814
01:19:42,940 --> 01:19:46,100
And so instead I wrote this word algorithmic,

1815
01:19:46,100 --> 01:19:48,300
which is, anybody heard of FSR?

1816
01:19:48,300 --> 01:19:49,860
It's like what AMD does.

1817
01:19:49,860 --> 01:19:50,740
And so what it is,

1818
01:19:50,740 --> 01:19:53,740
is it's basically like a classic upscaler

1819
01:19:53,740 --> 01:19:55,220
with a sharpener.

1820
01:19:55,220 --> 01:19:58,420
You get like a Kalman filter,

1821
01:19:58,420 --> 01:20:00,100
which is like you're taking sampling

1822
01:20:00,100 --> 01:20:01,540
and you're interpolating upwards,

1823
01:20:01,540 --> 01:20:03,140
and then you do a sharpening pass,

1824
01:20:03,140 --> 01:20:05,420
and then that gets pretty good results.

1825
01:20:05,420 --> 01:20:06,380
And it's fairly cheap.

1826
01:20:06,380 --> 01:20:08,780
It's basically like good enough graphics,

1827
01:20:08,780 --> 01:20:09,700
and you could probably do that

1828
01:20:09,700 --> 01:20:12,100
if you really want to save power

1829
01:20:12,100 --> 01:20:14,460
or you want to save bandwidth

1830
01:20:14,460 --> 01:20:17,900
or you want to save processing power, increase your FPS.

1831
01:20:17,900 --> 01:20:20,060
And so we are looking at things like this.

1832
01:20:20,060 --> 01:20:22,260
And so this is kind of ongoing research.

1833
01:20:24,180 --> 01:20:26,700
Mesh shaders, anybody heard of mesh shaders before?

1834
01:20:27,660 --> 01:20:29,740
That's what AMD is, right?

1835
01:20:32,540 --> 01:20:33,380
It's, what is it called?

1836
01:20:33,380 --> 01:20:35,180
It's called the Nanite.

1837
01:20:35,180 --> 01:20:36,980
Nanite is using mesh shaders.

1838
01:20:38,020 --> 01:20:40,940
You have a form for manual framing

1839
01:20:40,940 --> 01:20:43,060
in 2020 of mesh shaders,

1840
01:20:43,060 --> 01:20:44,900
but it's a brand new thing.

1841
01:20:44,900 --> 01:20:48,700
I am not completely sold on mesh shaders.

1842
01:20:48,700 --> 01:20:50,300
We will probably support them

1843
01:20:50,300 --> 01:20:52,180
because we like to support everything.

1844
01:20:53,140 --> 01:20:58,140
There aren't a whole lot of killer apps for it yet.

1845
01:20:58,220 --> 01:21:00,100
That's not to say that there won't be.

1846
01:21:00,100 --> 01:21:01,460
I am optimistic that somebody

1847
01:21:01,460 --> 01:21:02,740
will come up with some amazing stuff.

1848
01:21:02,740 --> 01:21:05,820
The couple examples I've seen are,

1849
01:21:05,820 --> 01:21:07,980
this bunny shows like all the different colors

1850
01:21:07,980 --> 01:21:09,580
or different meshlets.

1851
01:21:09,580 --> 01:21:12,220
And so breaking up and procedurally generating

1852
01:21:12,220 --> 01:21:13,980
a larger mesh with a bunch of smaller ones,

1853
01:21:13,980 --> 01:21:17,820
each meshlet is going to provide

1854
01:21:17,820 --> 01:21:19,780
better localization and cache,

1855
01:21:19,780 --> 01:21:24,340
which means it's close to where all the other vertices

1856
01:21:24,340 --> 01:21:26,900
that it's being worked on are in memory.

1857
01:21:26,900 --> 01:21:29,980
And you're going to get a lot better localization

1858
01:21:29,980 --> 01:21:31,700
or cache utilization using that.

1859
01:21:31,700 --> 01:21:32,820
So that's one way of doing it.

1860
01:21:32,820 --> 01:21:35,020
And if you can avoid having to just look

1861
01:21:35,020 --> 01:21:36,700
all of these vertices up,

1862
01:21:36,700 --> 01:21:39,220
then you're also saving bandwidth there.

1863
01:21:39,220 --> 01:21:43,060
Another way is bounding box culling based on this.

1864
01:21:43,060 --> 01:21:45,500
And so you can do culling based on each one of these.

1865
01:21:45,500 --> 01:21:48,340
But if you look at what a mesh shader really is,

1866
01:21:48,340 --> 01:21:51,660
it's like you smooshed the vertex tests

1867
01:21:51,660 --> 01:21:53,980
and geometry shader into a single thing.

1868
01:21:54,900 --> 01:21:59,740
And some people really disliked how the vertex,

1869
01:21:59,740 --> 01:22:02,260
the front half of the pipeline evolved over time.

1870
01:22:02,260 --> 01:22:04,740
Like how many people, I almost know nobody

1871
01:22:04,740 --> 01:22:08,180
who's ever done tessellation ever.

1872
01:22:09,260 --> 01:22:10,340
Like just ever.

1873
01:22:13,980 --> 01:22:16,620
I actually, I wrote a tessellation translation layer

1874
01:22:16,620 --> 01:22:19,220
for a company to go from OpenGL to Vulkan.

1875
01:22:19,220 --> 01:22:21,780
So I know it intimately and it's painful.

1876
01:22:21,780 --> 01:22:25,100
And it's not easy and it's not very intuitive.

1877
01:22:25,100 --> 01:22:28,100
And then geometry shader, as soon as tessellation came out,

1878
01:22:28,100 --> 01:22:30,460
geometry shader kind of like the only extra thing

1879
01:22:30,460 --> 01:22:33,340
that geometry shader did was transform feedback.

1880
01:22:33,340 --> 01:22:35,620
Does anybody know what that is?

1881
01:22:35,620 --> 01:22:36,460
Oh, he does.

1882
01:22:36,460 --> 01:22:38,740
Does anybody else know what transform feedback?

1883
01:22:38,740 --> 01:22:40,860
It's when you can either take the output

1884
01:22:40,860 --> 01:22:43,780
of the geometry shader and spit it to the CPU

1885
01:22:43,780 --> 01:22:45,700
and CPU visible memory,

1886
01:22:45,700 --> 01:22:47,860
or you can take the output of the geometry shader

1887
01:22:47,860 --> 01:22:49,980
and do something called draw auto

1888
01:22:49,980 --> 01:22:53,140
and then have it introduced to a different vertex shader

1889
01:22:53,140 --> 01:22:54,860
without having CPU intervention.

1890
01:22:54,860 --> 01:22:57,220
It's like you're doing a second pass

1891
01:22:57,220 --> 01:22:59,380
without the CPU doing anything different.

1892
01:22:59,380 --> 01:23:02,140
This was very exciting in 2014.

1893
01:23:03,220 --> 01:23:07,980
And both of these things were kind of superseded.

1894
01:23:07,980 --> 01:23:09,820
So the ability to do computations

1895
01:23:09,820 --> 01:23:10,660
where you have to have a CPU,

1896
01:23:10,660 --> 01:23:13,220
that's because CPU shaders didn't exist yet.

1897
01:23:13,220 --> 01:23:14,900
Or compute shaders, I mean.

1898
01:23:15,020 --> 01:23:16,020
The compute shaders didn't exist,

1899
01:23:16,020 --> 01:23:19,340
so they bastardized this geometry shader to use it.

1900
01:23:19,340 --> 01:23:21,220
And then tessellation didn't exist,

1901
01:23:21,220 --> 01:23:24,220
so geometry shader was trying to pretend to be tessellation.

1902
01:23:24,220 --> 01:23:25,780
And so then once tessellation came out,

1903
01:23:25,780 --> 01:23:28,060
this really became useless.

1904
01:23:28,060 --> 01:23:30,100
And then tessellation never got used.

1905
01:23:30,100 --> 01:23:32,060
And so we have these three shader stages

1906
01:23:32,060 --> 01:23:34,380
that are really underutilized.

1907
01:23:34,380 --> 01:23:35,660
And they're like, you know what we need?

1908
01:23:35,660 --> 01:23:37,100
We need a new paradigm.

1909
01:23:37,100 --> 01:23:38,820
And I'm like, great, more shaders.

1910
01:23:39,820 --> 01:23:42,140
I'm not saying that people won't do exciting things about it.

1911
01:23:42,140 --> 01:23:45,100
I am saying that the bloat is a little disheartening.

1912
01:23:46,180 --> 01:23:47,020
Okay.

1913
01:23:48,780 --> 01:23:51,780
So I was asked to talk about careers in graphics,

1914
01:23:51,780 --> 01:23:53,740
and this might be a more interesting part.

1915
01:23:53,740 --> 01:23:57,580
So I kind of did high level of like,

1916
01:23:57,580 --> 01:24:00,500
talking about silicon and how it interacts with graphics.

1917
01:24:00,500 --> 01:24:02,220
It's a lot less exciting than really sexy

1918
01:24:02,220 --> 01:24:03,300
like drawing pictures part,

1919
01:24:03,300 --> 01:24:05,700
but it is kind of more pedal to the metal,

1920
01:24:05,700 --> 01:24:07,260
rubber meets road type of part.

1921
01:24:08,260 --> 01:24:09,820
So there are about,

1922
01:24:09,820 --> 01:24:12,620
I kind of like categorize six different areas

1923
01:24:12,620 --> 01:24:13,900
of graphics careers.

1924
01:24:13,900 --> 01:24:14,860
These are the first three,

1925
01:24:14,860 --> 01:24:17,620
and I call them the application careers, okay?

1926
01:24:18,940 --> 01:24:20,220
And I've interacted with a lot of these.

1927
01:24:20,220 --> 01:24:22,700
So you have the complete artists

1928
01:24:22,700 --> 01:24:24,060
where they're technical artists,

1929
01:24:24,060 --> 01:24:28,060
writing shaders, animators, doing mocap and translation

1930
01:24:28,060 --> 01:24:29,980
and updates of animation streams,

1931
01:24:29,980 --> 01:24:32,100
material designers, which is a real thing

1932
01:24:32,100 --> 01:24:35,740
where you do nothing but develop and design materials

1933
01:24:36,100 --> 01:24:38,420
so that they're read back and look beautiful.

1934
01:24:38,420 --> 01:24:41,100
And then lighting experts, which is a complete career.

1935
01:24:41,100 --> 01:24:44,420
Like I used to work on Mad and I shipped,

1936
01:24:44,420 --> 01:24:46,500
and there was like a time where like,

1937
01:24:46,500 --> 01:24:48,100
you have to freeze development

1938
01:24:48,100 --> 01:24:50,420
and then we're gonna let our lighting guy work on it.

1939
01:24:50,420 --> 01:24:52,900
And then the lighting guy tweaked every single material,

1940
01:24:52,900 --> 01:24:54,780
every single light source, every single shader

1941
01:24:54,780 --> 01:24:56,460
to make sure that the lighting looked good.

1942
01:24:56,460 --> 01:24:59,300
And he was, he sat in this black room

1943
01:24:59,300 --> 01:25:02,940
with like black paint on the walls and like,

1944
01:25:02,940 --> 01:25:05,300
foam, I don't know how foam helps light.

1945
01:25:05,860 --> 01:25:06,700
And then he would just,

1946
01:25:06,700 --> 01:25:09,220
he'd look at seven different types of screens

1947
01:25:09,220 --> 01:25:12,540
that all had different, you know,

1948
01:25:12,540 --> 01:25:15,620
profiles of colors and gamma

1949
01:25:15,620 --> 01:25:17,780
and figure out what lighting looked like on all of them

1950
01:25:17,780 --> 01:25:19,660
to make sure it looked the best for all of them.

1951
01:25:19,660 --> 01:25:20,900
That's a real career.

1952
01:25:20,900 --> 01:25:23,740
And it actually, in film, the same thing happens

1953
01:25:23,740 --> 01:25:27,900
where like an inordinate amount of time is spent

1954
01:25:27,900 --> 01:25:30,620
on just tweaking lighting because our eyes

1955
01:25:30,620 --> 01:25:32,460
and the way we feel about things

1956
01:25:32,860 --> 01:25:35,180
will make or break the uncanny valley.

1957
01:25:36,900 --> 01:25:37,740
Okay.

1958
01:25:38,900 --> 01:25:42,100
3D game engine developer, 3D tools maker.

1959
01:25:42,100 --> 01:25:43,380
I say 3D tools maker,

1960
01:25:43,380 --> 01:25:45,740
I don't think people think about that as a career.

1961
01:25:45,740 --> 01:25:46,820
It's a very important career.

1962
01:25:46,820 --> 01:25:47,860
We went to SIGGRAPH.

1963
01:25:47,860 --> 01:25:49,660
I feel like every talk at SIGGRAPH this last year

1964
01:25:49,660 --> 01:25:51,980
was talking about the lack of content creators

1965
01:25:53,060 --> 01:25:55,060
for the meta whatever.

1966
01:25:55,060 --> 01:25:57,380
And so the fact that we're gonna have this metaverse

1967
01:25:57,380 --> 01:25:58,980
or whatever, there's gonna be this world

1968
01:25:58,980 --> 01:26:02,780
and average mom and pop can't make a 3D model

1969
01:26:02,780 --> 01:26:04,500
to save their lives.

1970
01:26:04,500 --> 01:26:05,660
They all want to do something.

1971
01:26:05,660 --> 01:26:07,140
So we're gonna have to create these tools

1972
01:26:07,140 --> 01:26:08,260
to create 3D models.

1973
01:26:08,260 --> 01:26:10,500
And they're gonna have to be very approachable

1974
01:26:10,500 --> 01:26:12,420
and usable by common people.

1975
01:26:12,420 --> 01:26:15,300
And so it's like, that's a big deal.

1976
01:26:15,300 --> 01:26:16,300
And how are we gonna do that?

1977
01:26:16,300 --> 01:26:17,380
We have to have tools

1978
01:26:17,380 --> 01:26:19,180
and those tools are gonna be super important.

1979
01:26:19,180 --> 01:26:21,020
And I think there's gonna be a huge demand

1980
01:26:21,020 --> 01:26:22,820
in the tool industry for that kind of thing.

1981
01:26:22,820 --> 01:26:24,660
And you have to know all of the graphic stuff.

1982
01:26:24,660 --> 01:26:25,900
You have to know all the hardware stuff.

1983
01:26:25,900 --> 01:26:27,140
You have to know all the formats.

1984
01:26:27,180 --> 01:26:29,140
You have to know what the UI, UX,

1985
01:26:29,140 --> 01:26:30,940
how people wanna work with things.

1986
01:26:30,940 --> 01:26:32,900
You have to think about the person, the HMI.

1987
01:26:32,900 --> 01:26:35,260
That's actually a really insightful and hard problem.

1988
01:26:35,260 --> 01:26:36,740
You also have to know psychology.

1989
01:26:36,740 --> 01:26:39,300
The really, I work with a UX firm

1990
01:26:39,300 --> 01:26:41,540
and they have like multiple psychologists

1991
01:26:41,540 --> 01:26:43,620
working on the team because they wanna think

1992
01:26:43,620 --> 01:26:45,180
about how people will think.

1993
01:26:46,780 --> 01:26:48,500
That's a big deal.

1994
01:26:48,500 --> 01:26:49,980
And then I think this is kind of obvious

1995
01:26:49,980 --> 01:26:54,980
with visual effects and physics modeling for like film.

1996
01:26:55,980 --> 01:26:59,180
And I met somebody who used to work at the Foundry

1997
01:26:59,180 --> 01:27:00,500
and everybody heard the Foundry.

1998
01:27:00,500 --> 01:27:02,100
And so they do the Nuke thing.

1999
01:27:02,100 --> 01:27:03,900
And so like I was talking to him, I was like,

2000
01:27:03,900 --> 01:27:04,740
what is it?

2001
01:27:04,740 --> 01:27:05,580
Tell me what the Foundry does.

2002
01:27:05,580 --> 01:27:09,580
And he's like, well, every time a hundred million

2003
01:27:09,580 --> 01:27:11,020
or billion dollar movie comes out,

2004
01:27:11,020 --> 01:27:12,940
they make brand new tools for that movie.

2005
01:27:12,940 --> 01:27:14,500
And then they finish the movie

2006
01:27:14,500 --> 01:27:16,260
and they throw all the tools away.

2007
01:27:16,260 --> 01:27:19,780
And so the Foundry like buys the rights to these tools

2008
01:27:19,780 --> 01:27:22,140
and then maintains them, puts them into a package

2009
01:27:22,140 --> 01:27:23,700
and sells them to smaller theaters

2010
01:27:23,900 --> 01:27:26,780
and gives the original makers the licensing fee.

2011
01:27:26,780 --> 01:27:28,100
So that's where like Nuke came in

2012
01:27:28,100 --> 01:27:29,220
and all these other things.

2013
01:27:29,220 --> 01:27:31,020
I thought that was very interesting.

2014
01:27:34,500 --> 01:27:38,220
Hardware and low level software is kind of more at my area.

2015
01:27:38,220 --> 01:27:40,220
So you have high performance computing.

2016
01:27:40,220 --> 01:27:42,260
So HPC doing things in the cloud,

2017
01:27:42,260 --> 01:27:44,500
visualization for science, visualization for weather,

2018
01:27:44,500 --> 01:27:48,380
visualization for whatever, using multiple clouds.

2019
01:27:48,380 --> 01:27:52,100
And I think this kind of, it's not quite like movie and film.

2020
01:27:52,100 --> 01:27:53,900
It's kind of a different ball game.

2021
01:27:55,020 --> 01:27:57,060
Desktop game console, it's obvious.

2022
01:27:57,060 --> 01:27:58,580
Mobile industrial IOT and automotive,

2023
01:27:58,580 --> 01:27:59,660
we kind of talked about.

2024
01:27:59,660 --> 01:28:01,660
These are other areas.

2025
01:28:01,660 --> 01:28:02,500
Okay.

2026
01:28:02,500 --> 01:28:04,100
So I guess here's my career advice.

2027
01:28:04,100 --> 01:28:05,020
I'm gonna go pretty quick.

2028
01:28:05,020 --> 01:28:06,620
I'm almost done.

2029
01:28:06,620 --> 01:28:08,820
I like to think of this and I'm an optimist.

2030
01:28:08,820 --> 01:28:11,380
Every company is a university that actually pays you.

2031
01:28:11,380 --> 01:28:12,700
And actually if you're getting a master's

2032
01:28:12,700 --> 01:28:15,660
and you're not getting paid, that's also a problem

2033
01:28:15,660 --> 01:28:17,980
because you're basically an indentured servant.

2034
01:28:19,220 --> 01:28:21,540
So if you're an RA or TA, you should be getting paid

2035
01:28:21,940 --> 01:28:22,980
to go to grad school.

2036
01:28:24,020 --> 01:28:25,980
If you don't care about the product or research,

2037
01:28:25,980 --> 01:28:27,500
you won't stretch yourself to succeed.

2038
01:28:27,500 --> 01:28:29,060
So you really have to care about what you're doing.

2039
01:28:29,060 --> 01:28:29,900
You have to be exciting.

2040
01:28:29,900 --> 01:28:32,300
You have to wanna go to work in the morning.

2041
01:28:32,300 --> 01:28:35,060
Don't go for the money, at least at the beginning.

2042
01:28:35,060 --> 01:28:36,900
Go for what you actually wanna learn.

2043
01:28:38,340 --> 01:28:40,700
However, and this happened multiple times in my life,

2044
01:28:40,700 --> 01:28:41,900
canceled projects hurt.

2045
01:28:42,820 --> 01:28:45,300
Just be really, it's like losing a child.

2046
01:28:45,300 --> 01:28:47,220
And so realize that you're gonna care about something

2047
01:28:47,220 --> 01:28:50,940
and you have to realize, hey, the product really was me.

2048
01:28:50,980 --> 01:28:51,980
The product that got canceled,

2049
01:28:51,980 --> 01:28:54,580
that just happened to be the vehicle I used to learn.

2050
01:28:56,140 --> 01:28:58,700
And the one thing most projects do is get canceled.

2051
01:28:59,700 --> 01:29:01,300
Every team you work on becomes your family.

2052
01:29:01,300 --> 01:29:02,580
People should always come first,

2053
01:29:02,580 --> 01:29:03,980
even at the expense of work.

2054
01:29:04,980 --> 01:29:06,260
How did I come here?

2055
01:29:06,260 --> 01:29:08,380
Well, I had a great conversation at SIGGRAPH.

2056
01:29:08,380 --> 01:29:09,860
We're gonna be friends now.

2057
01:29:09,860 --> 01:29:13,900
And then the graphics community is just like that.

2058
01:29:13,900 --> 01:29:16,260
You operate on the same standards boards.

2059
01:29:16,260 --> 01:29:18,500
You talk to the same people at SIGGRAPH.

2060
01:29:18,500 --> 01:29:19,860
You work with them and then come,

2061
01:29:19,860 --> 01:29:21,060
you probably, two companies later,

2062
01:29:21,060 --> 01:29:22,220
probably work with them again.

2063
01:29:22,220 --> 01:29:24,140
Hell, they might get you the job at the third company.

2064
01:29:24,140 --> 01:29:25,140
Who knows?

2065
01:29:25,140 --> 01:29:26,220
So just be nice to everybody.

2066
01:29:26,220 --> 01:29:29,180
Realize that graphics is a very small, tight-knit community.

2067
01:29:29,180 --> 01:29:30,020
Don't be a jerk.

2068
01:29:31,980 --> 01:29:33,340
Okay.

2069
01:29:33,340 --> 01:29:34,620
Stages of a career.

2070
01:29:36,260 --> 01:29:37,580
I'm gonna go through this before.

2071
01:29:37,580 --> 01:29:39,420
I think this part's pretty obvious.

2072
01:29:41,380 --> 01:29:42,460
When you first get to a job,

2073
01:29:42,460 --> 01:29:44,740
learn as much as you can about everything.

2074
01:29:44,740 --> 01:29:46,860
Be humble, ask a lot of dumb questions.

2075
01:29:46,860 --> 01:29:48,460
I still ask dumb questions all the time

2076
01:29:49,220 --> 01:29:50,060
because I want to encourage other people

2077
01:29:50,060 --> 01:29:51,060
to ask dumb questions.

2078
01:29:51,060 --> 01:29:53,060
So if I'm the guy and I'm supposed to be in charge

2079
01:29:53,060 --> 01:29:54,140
and I'm asking dumb questions,

2080
01:29:54,140 --> 01:29:55,300
then it's free for all.

2081
01:29:56,700 --> 01:29:59,060
Take on more responsibility as you can.

2082
01:29:59,060 --> 01:30:00,980
Grow that, be aware.

2083
01:30:00,980 --> 01:30:03,780
Mentor others when you feel competent enough to.

2084
01:30:04,780 --> 01:30:07,260
Try to understand the big picture in your company

2085
01:30:07,260 --> 01:30:09,660
after you've done one, two, three.

2086
01:30:09,660 --> 01:30:12,060
Rotate teams and positions and then start again.

2087
01:30:14,100 --> 01:30:17,700
I hired this VP from a very big video company

2088
01:30:17,740 --> 01:30:18,860
and he's working for me now.

2089
01:30:18,860 --> 01:30:21,220
And I said, why are you gonna take this pay cut?

2090
01:30:22,540 --> 01:30:24,260
Why are you gonna come work as an IC?

2091
01:30:24,260 --> 01:30:25,420
You're a VP.

2092
01:30:25,420 --> 01:30:26,860
And he's like, that's how I do my thing.

2093
01:30:26,860 --> 01:30:27,980
I started a company.

2094
01:30:27,980 --> 01:30:29,260
I'm always an individual contributor

2095
01:30:29,260 --> 01:30:30,100
and I make my way up to VP.

2096
01:30:30,100 --> 01:30:31,860
And he's done it three times.

2097
01:30:31,860 --> 01:30:33,540
And I'm like, great, you can take my job sometime.

2098
01:30:33,540 --> 01:30:34,380
It's great.

2099
01:30:34,380 --> 01:30:37,780
But he's like, if you do get to a position

2100
01:30:37,780 --> 01:30:39,220
where you're up here,

2101
01:30:41,620 --> 01:30:43,780
it's always good to keep your hands dirty,

2102
01:30:43,780 --> 01:30:44,860
understanding what you're talking about.

2103
01:30:44,860 --> 01:30:47,580
Don't underestimate the people under you

2104
01:30:48,460 --> 01:30:50,620
and appreciate what they do and constantly learn.

2105
01:30:50,620 --> 01:30:51,620
That's the best part.

2106
01:30:51,620 --> 01:30:54,380
If you're not learning, then I think it's not worth it.

2107
01:30:55,700 --> 01:30:56,900
And Samsung's hiring.

2108
01:30:59,620 --> 01:31:01,580
I was surprised to see this.

2109
01:31:01,580 --> 01:31:03,100
We're actually number one on Forbes' list.

2110
01:31:03,100 --> 01:31:04,220
I think that might be the only list,

2111
01:31:04,220 --> 01:31:05,940
but we are a big company.

2112
01:31:05,940 --> 01:31:07,220
We're doing a lot of things.

2113
01:31:07,220 --> 01:31:09,420
I have many, many recs in GPU group.

2114
01:31:09,420 --> 01:31:11,420
If you are interested in internships or full-time,

2115
01:31:11,420 --> 01:31:12,700
let me know.

2116
01:31:12,700 --> 01:31:13,580
That's my plug.

2117
01:31:14,540 --> 01:31:15,380
That's it.

2118
01:31:17,580 --> 01:31:18,420
Okay.

2119
01:31:21,540 --> 01:31:23,300
I can answer any career questions,

2120
01:31:23,300 --> 01:31:27,100
GPU questions, bag questions, personal questions, whatever.

2121
01:31:27,100 --> 01:31:27,940
Yeah.

2122
01:31:30,220 --> 01:31:31,060
Yeah.

2123
01:31:45,540 --> 01:31:47,260
I don't know any Verilog.

2124
01:31:48,260 --> 01:31:49,820
I don't want to give the impression

2125
01:31:49,820 --> 01:31:51,260
that I'm a super-duper hardware guy.

2126
01:31:51,260 --> 01:31:53,260
I'm like a low-level software guy.

2127
01:31:54,180 --> 01:31:57,340
And the funny thing is that low-level software

2128
01:31:57,340 --> 01:31:58,980
is all still written in C.

2129
01:31:58,980 --> 01:32:01,540
It's starting to convert to Rust.

2130
01:32:01,540 --> 01:32:04,020
But then that's like the kernel.

2131
01:32:05,540 --> 01:32:07,460
Most of our drivers are C++,

2132
01:32:07,460 --> 01:32:09,020
and most of it's already written.

2133
01:32:09,020 --> 01:32:11,020
And so when you think about coming in,

2134
01:32:11,020 --> 01:32:11,980
I think people have this fear,

2135
01:32:11,980 --> 01:32:13,180
like, I won't know anything.

2136
01:32:13,180 --> 01:32:14,180
I'll be like, well, guess what?

2137
01:32:14,180 --> 01:32:15,700
The code is there.

2138
01:32:15,740 --> 01:32:18,020
Just be willing to learn the code, ask questions.

2139
01:32:18,020 --> 01:32:18,860
And as long as...

2140
01:32:18,860 --> 01:32:21,420
I think this is kind of how I try to hire.

2141
01:32:21,420 --> 01:32:22,980
I try to hire really smart people,

2142
01:32:22,980 --> 01:32:25,540
and then I try to find a place for them.

2143
01:32:25,540 --> 01:32:28,380
And so if you're willing to learn and you can code

2144
01:32:28,380 --> 01:32:30,660
and you can talk your way out of a box,

2145
01:32:30,660 --> 01:32:32,820
then there's a possibility for you

2146
01:32:32,820 --> 01:32:34,020
to go wherever you want to go.

2147
01:32:34,020 --> 01:32:38,500
And for embedded, I think it's the same.

2148
01:32:38,500 --> 01:32:41,500
Everybody has to get their first embedded job, right?

2149
01:32:41,500 --> 01:32:42,900
Coming out of school is a great excuse

2150
01:32:42,900 --> 01:32:44,060
to get that first embedded job.

2151
01:32:44,060 --> 01:32:45,780
You could be like, what did your experience have?

2152
01:32:45,780 --> 01:32:47,940
I don't, I'm out of school.

2153
01:32:47,940 --> 01:32:49,500
Hire me, you know?

2154
01:32:49,500 --> 01:32:51,140
And so I think it's fine.

2155
01:32:51,140 --> 01:32:53,580
So I don't think there are prerequisites

2156
01:32:53,580 --> 01:32:56,260
other than a desire to want to do hardware.

2157
01:32:56,260 --> 01:32:58,860
I think kind of what this class teaches

2158
01:32:58,860 --> 01:33:01,140
to all of its students on an abstract level

2159
01:33:01,140 --> 01:33:04,180
is good programming, how to use the debugger,

2160
01:33:04,180 --> 01:33:05,380
how to use the profiler.

2161
01:33:05,380 --> 01:33:06,220
Yeah.

2162
01:33:06,220 --> 01:33:07,500
And that's kind of fundaments

2163
01:33:07,500 --> 01:33:09,660
of any programming job in my opinion.

2164
01:33:09,660 --> 01:33:10,500
Totally.

2165
01:33:10,500 --> 01:33:13,260
I think don't be scared of disassembly, you know?

2166
01:33:13,260 --> 01:33:14,860
That's another hardware thing.

2167
01:33:14,860 --> 01:33:16,420
Be able to use a debugger.

2168
01:33:19,300 --> 01:33:21,900
Don't be afraid of like reading register specs

2169
01:33:21,900 --> 01:33:23,140
and things like that.

2170
01:33:23,140 --> 01:33:24,340
I know that's kind of weird,

2171
01:33:24,340 --> 01:33:25,300
but like, have you ever,

2172
01:33:25,300 --> 01:33:28,340
have you guys taken like a microcontroller class?

2173
01:33:28,340 --> 01:33:30,500
You don't talk, anybody taken a microcontroller class?

2174
01:33:30,500 --> 01:33:32,380
What happens is that you get this big spec

2175
01:33:32,380 --> 01:33:34,700
on what the pins do, what the register states are

2176
01:33:34,700 --> 01:33:35,820
and how to program it.

2177
01:33:35,820 --> 01:33:37,460
And it's just like reading standard instructions.

2178
01:33:37,460 --> 01:33:39,020
Just don't be as scared of that.

2179
01:33:39,020 --> 01:33:40,260
And then a lot of times,

2180
01:33:40,260 --> 01:33:43,260
most of my guys that work in the user mode level,

2181
01:33:43,260 --> 01:33:45,780
they have no idea how the hardware works.

2182
01:33:45,780 --> 01:33:48,140
They just know that this is the command

2183
01:33:48,140 --> 01:33:51,020
I have to send to the GPU to get that work done.

2184
01:33:51,020 --> 01:33:51,940
And that's okay.

2185
01:33:51,940 --> 01:33:54,300
And so we have different levels of abstraction

2186
01:33:54,300 --> 01:33:58,100
so that different spheres can work on different problems

2187
01:33:58,100 --> 01:34:00,540
and not have to worry about the whole full stack.

2188
01:34:01,580 --> 01:34:02,700
And so if you want to start out here

2189
01:34:02,700 --> 01:34:03,980
and work your way down, that's great.

2190
01:34:03,980 --> 01:34:05,620
If you want to work on your way down and move up here,

2191
01:34:05,620 --> 01:34:06,460
that's the other thing.

2192
01:34:06,460 --> 01:34:07,620
So sometimes I'll hire people

2193
01:34:07,620 --> 01:34:08,700
that are really good kernel people

2194
01:34:08,700 --> 01:34:10,940
that have never touched a GPU before, and that's fine.

2195
01:34:10,940 --> 01:34:13,820
We'll teach you GPU if you can do the kernel stuff.

2196
01:34:13,820 --> 01:34:14,820
Or if you know the GPU stuff,

2197
01:34:14,820 --> 01:34:16,300
we'll teach you the kernel stuff.

2198
01:34:16,300 --> 01:34:17,380
You can't know everything.

2199
01:34:17,380 --> 01:34:18,580
That kind of goes back to my point

2200
01:34:18,580 --> 01:34:22,940
that every job is a university that pays you.

2201
01:34:22,940 --> 01:34:24,180
We're willing to have to train you.

2202
01:34:24,180 --> 01:34:27,980
And we usually give rule of thumb, new hires,

2203
01:34:27,980 --> 01:34:30,780
I say six months to nine months to ramp up.

2204
01:34:30,780 --> 01:34:33,500
Experienced mid-level guys, I say three to six months.

2205
01:34:33,500 --> 01:34:34,380
And super senior guys,

2206
01:34:34,380 --> 01:34:36,620
I'd hope they'd be ramped up within three months.

2207
01:34:39,700 --> 01:34:41,380
Any other questions?

2208
01:34:45,420 --> 01:34:46,260
Maybe one for me.

2209
01:34:46,260 --> 01:34:47,100
Yeah.

2210
01:34:47,100 --> 01:34:49,020
On the second last slide.

2211
01:34:49,020 --> 01:34:49,860
Yeah.

2212
01:34:52,860 --> 01:34:53,700
This one?

2213
01:34:53,700 --> 01:34:56,460
Yeah, the one with the text.

2214
01:34:56,460 --> 01:34:58,700
The second one that you say,

2215
01:34:58,700 --> 01:35:01,660
care about the product, which I completely agree with.

2216
01:35:01,660 --> 01:35:02,700
Yeah.

2217
01:35:02,700 --> 01:35:07,100
As all of my students go to interview me,

2218
01:35:07,180 --> 01:35:08,620
how do you find out?

2219
01:35:08,620 --> 01:35:11,980
Like, as somebody who does interviews,

2220
01:35:11,980 --> 01:35:16,020
what are your recommendations for questions

2221
01:35:16,020 --> 01:35:18,860
as interviewees should ask?

2222
01:35:18,860 --> 01:35:22,420
Or learn more about what they might be working on?

2223
01:35:22,420 --> 01:35:23,900
Okay, so there's multiple parts to this question.

2224
01:35:23,900 --> 01:35:27,100
So if I was to interview with a new company,

2225
01:35:27,100 --> 01:35:28,540
let's put it that way,

2226
01:35:28,540 --> 01:35:30,580
I would be like, what project am I working on?

2227
01:35:30,580 --> 01:35:32,740
Similar to like, if you went to a university,

2228
01:35:32,740 --> 01:35:33,660
a lot of people would be like,

2229
01:35:33,660 --> 01:35:35,100
who's the professor I'd be working on?

2230
01:35:35,100 --> 01:35:37,100
I'm almost more worried about the professor

2231
01:35:37,100 --> 01:35:38,340
than I am the university.

2232
01:35:38,340 --> 01:35:41,580
At some point, it depends completely on your research.

2233
01:35:41,580 --> 01:35:44,500
For a job, it'd be the project and the people.

2234
01:35:44,500 --> 01:35:46,420
You'd wanna be able to have a beer with the people

2235
01:35:46,420 --> 01:35:47,260
that you wanna work with.

2236
01:35:47,260 --> 01:35:48,420
You wanna know that you're going to every day,

2237
01:35:48,420 --> 01:35:49,340
they're eventually gonna be your family.

2238
01:35:49,340 --> 01:35:51,060
Can you see yourself hanging out with those folks?

2239
01:35:51,060 --> 01:35:52,860
Honestly, that's something that's a big deal for me.

2240
01:35:52,860 --> 01:35:54,860
Maybe it's all project-free, that's fine.

2241
01:35:54,860 --> 01:35:55,700
Second part is,

2242
01:35:55,700 --> 01:35:58,900
is the project something you'd be proud to brag about?

2243
01:35:58,900 --> 01:35:59,740
You know?

2244
01:36:00,700 --> 01:36:02,300
I mean, you'd wanna be able to tell,

2245
01:36:02,300 --> 01:36:04,700
I wanna be able to tell my kids, you know, what do I do?

2246
01:36:05,300 --> 01:36:06,140
And I'd be like, hey, I make cell phones,

2247
01:36:06,140 --> 01:36:08,500
or I make video games, or I make car screens,

2248
01:36:08,500 --> 01:36:09,500
or I don't know, whatever.

2249
01:36:09,500 --> 01:36:11,500
And so you say, you wanna be proud of it.

2250
01:36:11,500 --> 01:36:13,980
You wanna know that by doing this thing,

2251
01:36:13,980 --> 01:36:16,740
you're making, you know, you're helping people,

2252
01:36:16,740 --> 01:36:18,980
or you're stretching technology,

2253
01:36:18,980 --> 01:36:20,580
or you're making yourself smarter

2254
01:36:20,580 --> 01:36:22,980
and giving yourself a broader level of experience.

2255
01:36:22,980 --> 01:36:26,140
So maybe the next move is going to be way better for you.

2256
01:36:26,140 --> 01:36:27,020
Because sometimes,

2257
01:36:28,540 --> 01:36:31,780
this job might be preparing you for the next job.

2258
01:36:31,780 --> 01:36:32,820
In fact, they all should be.

2259
01:36:32,820 --> 01:36:34,820
But maybe you even plan that this job's

2260
01:36:34,820 --> 01:36:36,020
going to prepare me for the next job.

2261
01:36:36,020 --> 01:36:37,380
Like, I know a lot of people say,

2262
01:36:37,380 --> 01:36:38,860
how do I get into video games?

2263
01:36:40,620 --> 01:36:44,700
And the answer is, be willing to work for no money.

2264
01:36:45,700 --> 01:36:49,580
There are a lot of people who wanna get into video games.

2265
01:36:49,580 --> 01:36:50,900
Yeah.

2266
01:36:50,900 --> 01:36:53,980
I got into video games by working for a graphics drivers

2267
01:36:53,980 --> 01:36:55,340
and knowing the hardware really well,

2268
01:36:55,340 --> 01:36:57,180
and then being able to talk like that

2269
01:36:57,180 --> 01:36:59,620
when I went to an interview for video games.

2270
01:36:59,620 --> 01:37:01,140
And then they kind of looked at me and said,

2271
01:37:01,140 --> 01:37:04,420
so how much, how excited?

2272
01:37:04,420 --> 01:37:05,260
I love this question.

2273
01:37:05,260 --> 01:37:07,020
How excited are you to work at video games?

2274
01:37:07,020 --> 01:37:09,580
And I go, not excited enough to take a pay cut.

2275
01:37:11,300 --> 01:37:12,820
Just be careful.

2276
01:37:12,820 --> 01:37:14,180
They said, okay.

2277
01:37:15,260 --> 01:37:18,060
So just be your own advocate on that part.

2278
01:37:18,060 --> 01:37:19,620
But yeah, I think video games are exciting.

2279
01:37:19,620 --> 01:37:24,540
Sometimes video games are redundant, and I'll say that.

2280
01:37:24,540 --> 01:37:26,180
Like, if you're working on an engine

2281
01:37:26,180 --> 01:37:27,620
and you're not writing the engine,

2282
01:37:27,620 --> 01:37:28,780
then really what you're doing

2283
01:37:28,780 --> 01:37:30,820
is you're babysitting assets and shaders.

2284
01:37:32,100 --> 01:37:34,260
If you're into the rendering side,

2285
01:37:34,260 --> 01:37:36,060
if you're not in the rendering side,

2286
01:37:37,220 --> 01:37:38,740
then maybe you're doing animations.

2287
01:37:38,740 --> 01:37:39,780
Maybe that blows your head back.

2288
01:37:39,780 --> 01:37:40,620
Maybe you're doing,

2289
01:37:40,620 --> 01:37:42,580
I mean, there's a lot of parts of video games

2290
01:37:42,580 --> 01:37:44,540
and not all of them have to do with rendering.

2291
01:37:44,540 --> 01:37:47,460
Like there's animators, there's gameplay designers,

2292
01:37:47,460 --> 01:37:52,140
there's physics modelers, there's gameplay logicians

2293
01:37:52,140 --> 01:37:53,660
that are figuring out like, is this fair?

2294
01:37:53,660 --> 01:37:54,500
Is this unfair?

2295
01:37:54,500 --> 01:37:57,020
Is this gonna make for a really exciting game?

2296
01:37:57,020 --> 01:37:59,460
There are technical artists and they're rendering guys.

2297
01:37:59,620 --> 01:38:01,420
There's performance guys and there's connective.

2298
01:38:01,420 --> 01:38:02,940
There's so many different places to be in video games.

2299
01:38:02,940 --> 01:38:05,540
So just be very accurate within your own mind

2300
01:38:05,540 --> 01:38:09,220
of what you mean when you say I wanna work on video games.

2301
01:38:09,220 --> 01:38:10,540
And then realize what that entails.

2302
01:38:10,540 --> 01:38:12,900
For rendering, because this is a rendering class,

2303
01:38:12,900 --> 01:38:16,180
if you work for a video game company

2304
01:38:16,180 --> 01:38:20,180
that uses somebody else's engine,

2305
01:38:20,180 --> 01:38:22,180
there is a lot of creativity in that.

2306
01:38:22,180 --> 01:38:25,260
But sometimes, like I worked on Madden, year after year,

2307
01:38:25,260 --> 01:38:26,500
somebody told me this was happening

2308
01:38:26,500 --> 01:38:28,100
and I didn't believe him.

2309
01:38:28,100 --> 01:38:30,180
He says, at one point, Gabe, you're gonna think,

2310
01:38:30,180 --> 01:38:32,580
I don't give a crap what the grass looks like.

2311
01:38:32,580 --> 01:38:36,260
And so, but I think other things,

2312
01:38:36,260 --> 01:38:38,140
you work on this dragon game and you get to design

2313
01:38:38,140 --> 01:38:39,700
how the dragon looks and what the textures are

2314
01:38:39,700 --> 01:38:41,820
and it's beautiful, that's exciting.

2315
01:38:41,820 --> 01:38:43,900
You get to design the physics and the rendering

2316
01:38:43,900 --> 01:38:45,900
of how the flame and the smoke comes out.

2317
01:38:45,900 --> 01:38:48,140
We were at SIGGRAPH, one guy talked about clouds

2318
01:38:48,140 --> 01:38:50,900
for three hours, he was so excited.

2319
01:38:50,900 --> 01:38:52,700
I mean, things that blow your hair back,

2320
01:38:52,700 --> 01:38:55,780
just know what they are for you and then go after it.

2321
01:38:55,780 --> 01:38:57,300
But just realize that once you've made it

2322
01:38:57,380 --> 01:38:59,620
into video games, maybe it's not the flavor

2323
01:38:59,620 --> 01:39:01,820
of the slice of video games that you actually wanna do.

2324
01:39:02,820 --> 01:39:04,620
So then just taking a look at it from the inside

2325
01:39:04,620 --> 01:39:05,460
and thinking how-

2326
01:39:05,460 --> 01:39:06,300
Exactly, yeah.

2327
01:39:08,620 --> 01:39:10,620
The other question I had was,

2328
01:39:10,620 --> 01:39:15,620
so you, right now you're writing all these graphics APIs

2329
01:39:15,620 --> 01:39:19,020
that get used by game engines of Google Graphics

2330
01:39:19,020 --> 01:39:21,180
and in your previous role on Madden,

2331
01:39:21,180 --> 01:39:24,220
you were the person using those graphics APIs.

2332
01:39:24,220 --> 01:39:27,060
How does it compare to what you've done before?

2333
01:39:27,820 --> 01:39:29,660
And maybe what you do on the big screen.

2334
01:39:29,660 --> 01:39:30,860
I'd like to change it.

2335
01:39:30,860 --> 01:39:32,860
So I like analogy I use a lot,

2336
01:39:32,860 --> 01:39:35,340
which is like when I started on drivers,

2337
01:39:35,340 --> 01:39:37,220
I felt like I was a mechanic

2338
01:39:37,220 --> 01:39:41,420
and that the GPU was like the engine or the car.

2339
01:39:41,420 --> 01:39:44,500
And I kept using and tweaking how the car was running,

2340
01:39:44,500 --> 01:39:46,100
but I never got to drive the car.

2341
01:39:47,780 --> 01:39:49,900
And eventually I was like, I wanna get out of this.

2342
01:39:49,900 --> 01:39:51,060
I wanna start driving the car.

2343
01:39:51,060 --> 01:39:52,820
So I got my monkey suit off

2344
01:39:52,820 --> 01:39:54,220
and I jumped in the driver's seat

2345
01:39:54,220 --> 01:39:56,780
and I was working on Madden and then you're using it.

2346
01:39:57,500 --> 01:39:58,780
And then there's other limitations, right?

2347
01:39:58,780 --> 01:40:02,060
They're saying you have an artistic director who's saying,

2348
01:40:02,060 --> 01:40:04,020
and when I worked at Madden, I worked on two things.

2349
01:40:04,020 --> 01:40:06,500
I worked on crowds, what the crowds look like.

2350
01:40:06,500 --> 01:40:10,060
And I worked on player indicators like the hit X,

2351
01:40:11,140 --> 01:40:14,100
kick the field goal, here's a rainbow, that kind of stuff.

2352
01:40:14,100 --> 01:40:16,860
And make that look fancy and all this other stuff.

2353
01:40:16,860 --> 01:40:20,020
And so you're not in control of what it gets to look like.

2354
01:40:20,020 --> 01:40:23,340
You're being given specs and saying,

2355
01:40:23,340 --> 01:40:25,900
this is exactly what the artists rendered using Photoshop.

2356
01:40:25,900 --> 01:40:28,700
We want you to make it look that way on the GPU.

2357
01:40:28,700 --> 01:40:30,780
So there's no like, I'm not being like,

2358
01:40:30,780 --> 01:40:32,140
I really think it looks better purple.

2359
01:40:32,140 --> 01:40:33,500
They don't care what I think.

2360
01:40:33,500 --> 01:40:35,220
They just say, make it run exactly like that

2361
01:40:35,220 --> 01:40:37,540
and make it run fast, okay?

2362
01:40:39,020 --> 01:40:41,220
Then I came and I was like, I get it.

2363
01:40:41,220 --> 01:40:44,500
And then honestly, it's a tough life.

2364
01:40:44,500 --> 01:40:47,140
Like the crunch times in video games is exhausting.

2365
01:40:47,140 --> 01:40:49,540
I had a family and I'm like, peace out.

2366
01:40:49,540 --> 01:40:54,540
And so I like went from video games to work on car GPUs

2367
01:40:54,900 --> 01:40:56,980
and SOC architecture and computer chips again.

2368
01:40:56,980 --> 01:40:58,540
So I like went back forth, back forth.

2369
01:40:58,540 --> 01:41:00,140
Then I, after that, I worked in VMware

2370
01:41:00,140 --> 01:41:03,020
and I worked on graphics translations for VMs,

2371
01:41:03,020 --> 01:41:05,860
making Windows VMs work on Linux boxes

2372
01:41:05,860 --> 01:41:09,060
and Linux boxes work on metal and all this other stuff.

2373
01:41:09,060 --> 01:41:10,180
So I did all of that translation.

2374
01:41:10,180 --> 01:41:11,900
That was pretty cool, working for a software company.

2375
01:41:11,900 --> 01:41:13,180
And then I went back, I keep going,

2376
01:41:13,180 --> 01:41:14,860
hardware company, software company,

2377
01:41:14,860 --> 01:41:17,340
hardware company, software company, hardware company.

2378
01:41:17,340 --> 01:41:18,700
And so now I'm back at a hardware company

2379
01:41:18,700 --> 01:41:21,500
that thinks it's a software company, so.

2380
01:41:22,500 --> 01:41:24,860
Like something, I don't know,

2381
01:41:24,860 --> 01:41:26,780
maybe something electronic for a hardware company.

2382
01:41:26,780 --> 01:41:27,620
Exactly.

2383
01:41:29,500 --> 01:41:31,300
Well, I mean, the main software we provide

2384
01:41:31,300 --> 01:41:33,460
is a tweak off of the Android OS.

2385
01:41:33,460 --> 01:41:36,220
So I kind of feel like I'm part of the hardware component

2386
01:41:36,220 --> 01:41:38,180
of a hardware company, yeah.

2387
01:41:38,180 --> 01:41:41,100
Software, I'm a software person in a hardware world.

2388
01:41:42,860 --> 01:41:43,940
I don't know what the question was.

2389
01:41:43,940 --> 01:41:44,940
I think I lost track.

2390
01:41:47,420 --> 01:41:49,220
It's just different.

2391
01:41:49,220 --> 01:41:50,460
Also, here's the other thing,

2392
01:41:50,660 --> 01:41:55,100
the progression on the next slide is real.

2393
01:41:55,100 --> 01:41:59,300
You go from being this and nine to five,

2394
01:41:59,300 --> 01:42:01,860
hands down, code, code, code, I got it,

2395
01:42:01,860 --> 01:42:03,780
I didn't get it, I'm frustrated, I'm not frustrated,

2396
01:42:03,780 --> 01:42:06,260
I got my project done, great, here's a new project.

2397
01:42:07,220 --> 01:42:11,420
And then you go into project, self-project,

2398
01:42:11,420 --> 01:42:15,060
now you're in charge of a larger module or whatever.

2399
01:42:15,060 --> 01:42:16,380
And now you're dealing with other people,

2400
01:42:16,380 --> 01:42:18,540
you're making sure that you get things going

2401
01:42:18,540 --> 01:42:19,380
and you're changing.

2402
01:42:19,380 --> 01:42:21,740
Now, honestly, the higher you get,

2403
01:42:21,740 --> 01:42:23,460
the more people you have to deal with.

2404
01:42:23,460 --> 01:42:25,340
And so it's not just about the technology,

2405
01:42:25,340 --> 01:42:27,380
it's about the technology and the relationships.

2406
01:42:27,380 --> 01:42:29,380
And then I'm in the point where I'm in a director now,

2407
01:42:29,380 --> 01:42:33,340
and all it is is people who talk technology

2408
01:42:33,340 --> 01:42:34,900
and are not good communicators.

2409
01:42:36,900 --> 01:42:38,660
And so that's also a different challenge.

2410
01:42:38,660 --> 01:42:39,980
I love talking to people,

2411
01:42:39,980 --> 01:42:42,220
and I love talking to people when I was down here,

2412
01:42:42,220 --> 01:42:43,980
but I also was very self-conscious

2413
01:42:43,980 --> 01:42:46,940
and I wanted to be as technically competent as possible.

2414
01:42:46,940 --> 01:42:49,820
And so I really strove to be as technically competent

2415
01:42:49,820 --> 01:42:50,660
than I wanted.

2416
01:42:50,660 --> 01:42:51,620
And when I was down here,

2417
01:42:51,620 --> 01:42:53,180
I wanted to go the principal route

2418
01:42:53,180 --> 01:42:55,580
and then circumstance changed me somewhere around here

2419
01:42:55,580 --> 01:42:58,500
and I went the management route, happens.

2420
01:42:58,500 --> 01:42:59,900
The difference in that,

2421
01:42:59,900 --> 01:43:01,100
it's just like, you're gonna have to figure out

2422
01:43:01,100 --> 01:43:03,260
if your personality likes it or not.

2423
01:43:03,260 --> 01:43:04,540
I get to be at the big boy table

2424
01:43:04,540 --> 01:43:06,860
when decisions get made, which is awesome.

2425
01:43:06,860 --> 01:43:08,180
But I'm also like not the guy,

2426
01:43:08,180 --> 01:43:11,860
like the people go to to say, how does this work exactly?

2427
01:43:13,020 --> 01:43:15,380
You just have to be comfortable with what you're good at

2428
01:43:15,420 --> 01:43:17,420
and what you can strive and do well in.

2429
01:43:20,700 --> 01:43:21,540
Yeah.

2430
01:43:22,540 --> 01:43:23,380
Yeah.

2431
01:43:45,180 --> 01:43:46,620
Let me go back to this slide.

2432
01:43:49,660 --> 01:43:51,300
It's an answer without an answer.

2433
01:43:52,300 --> 01:43:53,140
Sorry, too many.

2434
01:43:55,940 --> 01:43:59,260
It's gonna be right about...

2435
01:44:05,100 --> 01:44:06,700
Oh man, it's really farther up.

2436
01:44:06,700 --> 01:44:07,540
Sorry.

2437
01:44:08,980 --> 01:44:12,540
And yeah, there's a lot of slides.

2438
01:44:12,540 --> 01:44:13,380
Hold on.

2439
01:44:15,260 --> 01:44:16,100
Yes.

2440
01:44:17,100 --> 01:44:17,940
Yes.

2441
01:44:25,300 --> 01:44:26,340
I think that's a better question.

2442
01:44:26,340 --> 01:44:28,140
I can't answer what Samsung's planning on doing

2443
01:44:28,140 --> 01:44:29,220
that we haven't released.

2444
01:44:29,220 --> 01:44:32,500
So I'll just say that because this is being recorded.

2445
01:44:32,500 --> 01:44:36,140
And I'll say that everything that we currently do

2446
01:44:36,140 --> 01:44:39,900
for a mobile phone can be applied to that space.

2447
01:44:39,900 --> 01:44:40,740
What are the new...

2448
01:44:40,740 --> 01:44:41,580
Let's talk about the use case.

2449
01:44:41,580 --> 01:44:43,100
What is the use case for VR and AR

2450
01:44:43,100 --> 01:44:44,900
that's different from a mobile phone?

2451
01:44:45,900 --> 01:44:47,220
I think this is a good exercise.

2452
01:44:47,220 --> 01:44:48,860
We can just talk about it.

2453
01:44:48,860 --> 01:44:51,380
If you were going to create a VR or AR chipset,

2454
01:44:51,380 --> 01:44:52,380
what would you need?

2455
01:45:02,180 --> 01:45:04,420
Yeah, I mean, so, but let's go even further.

2456
01:45:04,420 --> 01:45:05,740
Let's go even further.

2457
01:45:05,740 --> 01:45:07,580
What are your inputs and outputs?

2458
01:45:12,740 --> 01:45:13,580
Let's look at this picture.

2459
01:45:13,620 --> 01:45:15,780
What are your inputs and outputs?

2460
01:45:15,780 --> 01:45:18,580
You need to have lots of cameras for orientation, right?

2461
01:45:20,340 --> 01:45:22,940
You have at least two displays, right?

2462
01:45:22,940 --> 01:45:26,460
Maybe one big display that's bisected into two displays.

2463
01:45:26,460 --> 01:45:27,300
Right?

2464
01:45:28,820 --> 01:45:29,660
Yeah.

2465
01:45:30,820 --> 01:45:32,100
Potentially, if you're playing video,

2466
01:45:32,100 --> 01:45:33,420
you're gonna need one of those.

2467
01:45:33,420 --> 01:45:36,900
You're gonna need what they call a GNSS

2468
01:45:36,900 --> 01:45:40,300
or some kind of gyroscope accelerometer situation going on.

2469
01:45:41,300 --> 01:45:44,460
Maybe you have other sensors that are using like UART

2470
01:45:45,540 --> 01:45:46,820
for tracking for,

2471
01:45:49,460 --> 01:45:52,260
there's different ways of doing depth perception, right?

2472
01:45:52,260 --> 01:45:54,340
You can do stereo camera.

2473
01:45:54,340 --> 01:45:56,100
You can do time of flight.

2474
01:45:56,100 --> 01:45:57,420
You can do structured light.

2475
01:45:57,420 --> 01:45:58,700
You can do IR.

2476
01:45:58,700 --> 01:46:01,620
You can do new things that haven't.

2477
01:46:11,300 --> 01:46:14,620
Sure, actuator, cameras, iris tracking.

2478
01:46:26,100 --> 01:46:27,700
But honestly, like,

2479
01:46:30,860 --> 01:46:32,460
so taking it from for consideration

2480
01:46:32,460 --> 01:46:35,060
that what would you have to do to get it to work?

2481
01:46:35,060 --> 01:46:37,100
What would you have to do to get it to work?

2482
01:46:37,660 --> 01:46:39,380
So taking it from for consideration

2483
01:46:39,380 --> 01:46:40,380
that what would you have to do?

2484
01:46:40,380 --> 01:46:43,980
So one thing that people don't think about with AR and VR

2485
01:46:43,980 --> 01:46:48,020
is the refresh rate requirements for AR, VR

2486
01:46:48,020 --> 01:46:48,860
is incredibly high.

2487
01:46:48,860 --> 01:46:50,500
We'd have to do something called chasing the beam.

2488
01:46:50,500 --> 01:46:51,940
Does anybody know what that means?

2489
01:46:51,940 --> 01:46:54,220
You've heard of chasing the beam?

2490
01:46:54,220 --> 01:46:55,060
And this is-

2491
01:46:55,060 --> 01:46:57,380
Is the beam referred to the gaming?

2492
01:46:57,380 --> 01:46:59,660
No, it's an anachronism, okay?

2493
01:46:59,660 --> 01:47:02,940
It's like, you know why we double buffer?

2494
01:47:04,860 --> 01:47:06,060
Why do we double buffer?

2495
01:47:07,100 --> 01:47:09,460
Because we can't have a next frame.

2496
01:47:09,460 --> 01:47:10,300
Yeah, that's too late.

2497
01:47:10,300 --> 01:47:11,740
We can't have a next frame

2498
01:47:11,740 --> 01:47:14,220
because you want the camera to update

2499
01:47:14,220 --> 01:47:15,700
as quickly as you move.

2500
01:47:15,700 --> 01:47:17,300
So instead of having a double buffer,

2501
01:47:17,300 --> 01:47:21,260
it's a single buffer that is updating all the time.

2502
01:47:21,260 --> 01:47:24,260
And so you can't afford the double buffer

2503
01:47:24,260 --> 01:47:27,260
because you don't want to have to do this ping pong flip.

2504
01:47:27,260 --> 01:47:28,980
You're literally chasing the beam.

2505
01:47:28,980 --> 01:47:30,500
So as you update the next one,

2506
01:47:30,500 --> 01:47:33,220
you need to be computing the one after that, okay?

2507
01:47:33,220 --> 01:47:35,220
That's what chasing the beam means.

2508
01:47:35,620 --> 01:47:37,740
That's more like a scanline kind of thing.

2509
01:47:37,740 --> 01:47:38,580
Exactly.

2510
01:47:38,580 --> 01:47:40,260
You go to the next scanline

2511
01:47:40,260 --> 01:47:42,180
and start processing the previous one for the next frame.

2512
01:47:42,180 --> 01:47:43,020
Exactly.

2513
01:47:43,020 --> 01:47:45,100
And so they do things like they cheat.

2514
01:47:45,100 --> 01:47:48,380
And so another thing is that there's a lot of hardware

2515
01:47:48,380 --> 01:47:52,380
in the VR thing that like Oculus uses, for instance,

2516
01:47:52,380 --> 01:47:54,140
where they overdraw.

2517
01:47:54,140 --> 01:47:57,300
Overdraw is drawing an image way bigger than your viewport

2518
01:47:57,300 --> 01:47:59,900
so that if you do move quickly based on accelerometers,

2519
01:47:59,900 --> 01:48:01,820
you can pan the existing image

2520
01:48:01,820 --> 01:48:04,180
even if you haven't had time to render it.

2521
01:48:04,220 --> 01:48:05,900
And so that's a cheat.

2522
01:48:05,900 --> 01:48:09,820
Another cheat that they do is they have focal lenses

2523
01:48:09,820 --> 01:48:10,660
and foveation.

2524
01:48:10,660 --> 01:48:12,260
You know what foveation is?

2525
01:48:12,260 --> 01:48:13,100
What's foveation?

2526
01:48:13,100 --> 01:48:17,460
So render a left pixel in the corners of a VR headset.

2527
01:48:17,460 --> 01:48:20,780
Which actually uses, I can't do this, too many slides,

2528
01:48:20,780 --> 01:48:22,220
the VRS thing I talked about.

2529
01:48:22,220 --> 01:48:25,500
So if you VRS around the outside of your vision,

2530
01:48:25,500 --> 01:48:27,940
the periphery, then that's going to save space

2531
01:48:27,940 --> 01:48:30,660
and you can actually get better performance.

2532
01:48:30,660 --> 01:48:32,660
You may not even have to update the periphery.

2533
01:48:32,660 --> 01:48:35,540
Maybe you update the periphery at a much lower rate

2534
01:48:35,540 --> 01:48:36,660
than you do the center.

2535
01:48:36,660 --> 01:48:40,940
So you have to do perceptual hacks to make VR much more,

2536
01:48:40,940 --> 01:48:43,980
because otherwise if it's any lag at all, you get a headache.

2537
01:48:47,260 --> 01:48:48,860
So a lot of this has to do with sensors,

2538
01:48:48,860 --> 01:48:50,660
but also a lot of it has to do with compute.

2539
01:48:50,660 --> 01:48:53,140
And you probably want dedicated display controllers

2540
01:48:53,140 --> 01:48:53,980
for each eye.

2541
01:48:54,980 --> 01:48:58,500
And you probably want maybe even a dedicated GPU for each eye.

2542
01:48:59,500 --> 01:49:04,140
And you probably want even a dedicated CPU and NPU

2543
01:49:04,140 --> 01:49:05,980
and all of this other tracking for each eye

2544
01:49:05,980 --> 01:49:09,140
or for each camera on the bug lens on the outside.

2545
01:49:09,980 --> 01:49:13,940
So there's, you can, I mean, can one SoC do it?

2546
01:49:13,940 --> 01:49:15,420
Yeah, they have them.

2547
01:49:15,420 --> 01:49:17,980
And then, you know, the Qualcomm one has it.

2548
01:49:17,980 --> 01:49:19,340
Is it a perfect solution?

2549
01:49:19,340 --> 01:49:22,220
No, they're going to iterate on it every year

2550
01:49:22,220 --> 01:49:23,740
and figure out ways to do it better.

2551
01:49:23,740 --> 01:49:25,700
Could my chip do it potentially?

2552
01:49:28,540 --> 01:49:29,380
Yeah.

2553
01:49:29,380 --> 01:49:32,380
I have a question about the chip.

2554
01:49:32,380 --> 01:49:35,180
So, you know that the cloud consistency

2555
01:49:35,180 --> 01:49:36,540
is kind of a point out.

2556
01:49:36,540 --> 01:49:39,620
So, some larger mobile phones,

2557
01:49:39,620 --> 01:49:42,620
they're going to have to be integrated with the console

2558
01:49:42,620 --> 01:49:43,740
if you're going to do that,

2559
01:49:43,740 --> 01:49:46,740
or the cloud has to be integrated with the console?

2560
01:49:46,740 --> 01:49:49,260
So, what happened to Stadia?

2561
01:49:49,260 --> 01:49:51,300
I mean, it's serious.

2562
01:49:51,300 --> 01:49:53,740
I think, you know, I think it's a good idea.

2563
01:49:53,740 --> 01:49:55,580
I mean, I think it's a good idea.

2564
01:49:55,780 --> 01:49:56,620
I mean, it's serious.

2565
01:49:56,620 --> 01:50:00,620
I think Google did an amazing job on Stadia, by the way.

2566
01:50:00,620 --> 01:50:01,940
It worked.

2567
01:50:01,940 --> 01:50:03,820
Why did they cancel it?

2568
01:50:06,620 --> 01:50:09,620
No, what problem are they solving?

2569
01:50:09,620 --> 01:50:12,500
Like, what problem did they solve

2570
01:50:12,500 --> 01:50:14,740
that wasn't already solved in a different way?

2571
01:50:16,500 --> 01:50:20,260
So, like, you want a game for a reasonable amount of money?

2572
01:50:20,260 --> 01:50:21,740
Get a console.

2573
01:50:21,740 --> 01:50:23,420
If you don't have a console,

2574
01:50:24,300 --> 01:50:25,940
if you don't have a console,

2575
01:50:25,940 --> 01:50:29,340
you're probably not going to have 10 bucks a month, okay?

2576
01:50:29,340 --> 01:50:32,340
If you want, if you don't want a powerful phone or whatever,

2577
01:50:32,340 --> 01:50:34,660
I mean, it's like, they just didn't have,

2578
01:50:34,660 --> 01:50:36,180
honestly, like, it was like,

2579
01:50:36,180 --> 01:50:37,300
almost like a proof of concept

2580
01:50:37,300 --> 01:50:38,700
that tried to go in productization,

2581
01:50:38,700 --> 01:50:40,860
but they didn't do like a focus study on it.

2582
01:50:41,940 --> 01:50:43,700
And I think, and I just want to say the engineers,

2583
01:50:43,700 --> 01:50:46,340
I know the engineers, they did an amazing job,

2584
01:50:46,340 --> 01:50:48,380
but unfortunately, like, you read the reviews,

2585
01:50:48,380 --> 01:50:50,500
and I read the reviews, why did Stadia fail?

2586
01:50:50,500 --> 01:50:51,660
And the number one thing would be like,

2587
01:50:51,660 --> 01:50:53,980
they didn't solve a problem that wasn't already solved.

2588
01:50:53,980 --> 01:50:57,180
They didn't solve it in a way that was cheaper or better.

2589
01:50:57,180 --> 01:50:58,340
And so the question becomes,

2590
01:50:58,340 --> 01:51:00,820
and this has always been the question,

2591
01:51:00,820 --> 01:51:03,700
it's, can you get away with a thin client

2592
01:51:03,700 --> 01:51:06,980
and not have a powerful end client?

2593
01:51:06,980 --> 01:51:09,860
And the answer is yes, per situation.

2594
01:51:09,860 --> 01:51:12,220
Like, if you want information security,

2595
01:51:12,220 --> 01:51:13,660
the best way to do that is a thin client

2596
01:51:13,660 --> 01:51:15,980
to store it somewhere in a vault.

2597
01:51:15,980 --> 01:51:18,540
If you want, like, we do, like,

2598
01:51:18,540 --> 01:51:21,020
all of these engineers that make the computer chips,

2599
01:51:21,020 --> 01:51:22,460
they need so much processing power,

2600
01:51:22,460 --> 01:51:23,900
they can't carry that around.

2601
01:51:23,900 --> 01:51:28,900
So they SSH into a grid of hundreds of thousands of nodes,

2602
01:51:29,060 --> 01:51:30,420
and they launch their things,

2603
01:51:30,420 --> 01:51:32,300
and then they go get a cup of coffee.

2604
01:51:32,300 --> 01:51:34,780
You know, that's a thin client, that works for sure.

2605
01:51:34,780 --> 01:51:36,220
But other things you want on the end,

2606
01:51:36,220 --> 01:51:38,860
because connectivity is never assured,

2607
01:51:40,180 --> 01:51:43,420
and the central server, if it goes down,

2608
01:51:43,420 --> 01:51:45,860
is not decentralized enough to make you happy.

2609
01:51:45,860 --> 01:51:48,140
I mean, think about like, what was it?

2610
01:51:48,140 --> 01:51:50,500
I used to have like one of these IoT companies,

2611
01:51:51,300 --> 01:51:52,900
and it went down, and my house stopped working.

2612
01:51:54,260 --> 01:51:57,380
You need to have a fallback for everything, right?

2613
01:51:57,380 --> 01:52:01,820
And so, to me, I'm not like a,

2614
01:52:01,820 --> 01:52:04,300
I always joke about the zombie apocalypse, you know?

2615
01:52:04,300 --> 01:52:06,060
But if that happened, you don't wanna put all your eggs

2616
01:52:06,060 --> 01:52:09,460
in a cloud somewhere that you're not gonna have access to.

2617
01:52:09,460 --> 01:52:10,740
Yeah, yeah.

2618
01:52:15,220 --> 01:52:16,060
Yeah.

2619
01:52:21,140 --> 01:52:25,140
Why does Qualcomm take so long to produce data?

2620
01:52:25,140 --> 01:52:27,740
Do you use Qualcomm?

2621
01:52:27,740 --> 01:52:28,740
We do use Qualcomm.

2622
01:52:28,740 --> 01:52:31,420
So like, half of our phones come from Qualcomm,

2623
01:52:31,420 --> 01:52:33,260
and half of them come from Exynos.

2624
01:52:33,260 --> 01:52:35,300
And I'll tell you a very easy way, it's money.

2625
01:52:35,300 --> 01:52:38,140
What happens when you have a single monopolistic source?

2626
01:52:39,540 --> 01:52:41,260
Prices go up.

2627
01:52:41,260 --> 01:52:45,140
Yeah, so Qualcomm can say, you know, this year,

2628
01:52:45,140 --> 01:52:47,980
I'm gonna give you an offer you can't refuse.

2629
01:52:47,980 --> 01:52:49,180
And then they're gonna say,

2630
01:52:49,180 --> 01:52:51,260
we're gonna charge you umpteen hundred dollars

2631
01:52:51,260 --> 01:52:52,820
because what else are you gonna do?

2632
01:52:52,820 --> 01:52:55,100
We got your entire business.

2633
01:52:55,100 --> 01:52:58,660
And so what you do is you have a secondary source,

2634
01:52:58,660 --> 01:53:01,980
and then that secondary source balances out

2635
01:53:01,980 --> 01:53:04,140
and gives competition to that primary source,

2636
01:53:04,140 --> 01:53:05,140
or I don't wanna call it primary,

2637
01:53:05,140 --> 01:53:07,740
but that first source and that second source.

2638
01:53:07,740 --> 01:53:10,340
And then also it de-risks the situation, right?

2639
01:53:10,340 --> 01:53:14,580
And so the other thing is, is that we don't control

2640
01:53:14,580 --> 01:53:16,580
where people wanna fab their stuff.

2641
01:53:16,580 --> 01:53:17,740
And we have our own fabs.

2642
01:53:17,780 --> 01:53:20,180
So another reason to do it is to fill our own fabs.

2643
01:53:22,300 --> 01:53:25,340
So a lot of times the cell phone will pipe clean the fabs

2644
01:53:25,340 --> 01:53:27,060
and use the most fastest node,

2645
01:53:27,060 --> 01:53:30,300
even if our yield is low, because we get double benefit.

2646
01:53:30,300 --> 01:53:34,500
So we get a discount on the fabrication costs

2647
01:53:34,500 --> 01:53:36,860
because we're also proving out the technology.

2648
01:53:37,380 --> 01:53:38,380
Everything's a monetary decision.

2649
01:53:38,380 --> 01:53:43,380
I mean, honestly, everything's a monetary decision.

2650
01:53:43,380 --> 01:53:45,580
Like we wouldn't make phones if they didn't make money.

2651
01:53:49,580 --> 01:53:50,420
Yeah.

2652
01:53:50,740 --> 01:53:53,660
I mean, honestly, everything's a monetary decision.

2653
01:53:53,660 --> 01:53:56,060
Like we wouldn't make phones if they didn't make money.

2654
01:53:56,060 --> 01:53:56,900
Yeah.

2655
01:53:59,900 --> 01:54:02,100
I mean, honestly, everything's a monetary decision.

2656
01:54:02,100 --> 01:54:07,100
Like we wouldn't make phones if they didn't make money.

2657
01:54:20,780 --> 01:54:21,620
Yeah.

2658
01:54:22,860 --> 01:54:25,300
I mean, honestly, like my job is a different job

2659
01:54:25,300 --> 01:54:26,580
from most engineers' jobs.

2660
01:54:26,580 --> 01:54:29,300
My job is to say, how can I do the best,

2661
01:54:29,300 --> 01:54:31,740
most interesting work and get rid of the stuff

2662
01:54:31,740 --> 01:54:33,660
that I don't wanna worry about anymore?

2663
01:54:33,660 --> 01:54:35,460
So a lot of these things may not sound exciting to you.

2664
01:54:35,460 --> 01:54:36,980
They sound amazingly exciting to me.

2665
01:54:36,980 --> 01:54:39,740
One is that I get to reduce something called TCO,

2666
01:54:39,740 --> 01:54:41,380
total cost of ownership.

2667
01:54:41,380 --> 01:54:43,860
If I don't have to maintain a layer and it's open sourced

2668
01:54:43,860 --> 01:54:46,540
and there's a thriving community and it works,

2669
01:54:46,540 --> 01:54:47,900
I get to take those same engineers

2670
01:54:47,900 --> 01:54:49,300
that would have been doing something like that

2671
01:54:49,300 --> 01:54:51,260
and put them on something fun.

2672
01:54:51,260 --> 01:54:52,100
You know?

2673
01:54:52,100 --> 01:54:56,660
And so by eating your vegetables, you eat dessert.

2674
01:54:56,660 --> 01:54:58,460
And so that's one thing.

2675
01:54:58,460 --> 01:55:00,540
And so is that like long-term vision?

2676
01:55:00,540 --> 01:55:01,860
No, that's just one part.

2677
01:55:01,860 --> 01:55:04,260
I do wanna make really good tools.

2678
01:55:04,260 --> 01:55:06,420
I think tools are extremely awesome

2679
01:55:06,420 --> 01:55:08,500
and I wanna make really, really great tools.

2680
01:55:08,500 --> 01:55:10,060
We're gonna work with people to do that.

2681
01:55:10,060 --> 01:55:11,980
I hired an entire team to do that

2682
01:55:11,980 --> 01:55:12,820
and they're really, really good.

2683
01:55:12,820 --> 01:55:13,780
I'm excited about it.

2684
01:55:13,780 --> 01:55:14,620
That's fun for me.

2685
01:55:14,620 --> 01:55:15,660
I'm excited about that.

2686
01:55:16,660 --> 01:55:18,820
We're also like on all of the standards committees

2687
01:55:19,340 --> 01:55:20,180
for Kronos.

2688
01:55:20,180 --> 01:55:22,180
So we're talking about what's coming out next.

2689
01:55:22,180 --> 01:55:23,780
Do I believe in mesh shaders?

2690
01:55:23,780 --> 01:55:24,900
I don't know, the jury's still out.

2691
01:55:24,900 --> 01:55:26,700
But we're gonna do it and we're gonna see what it's like.

2692
01:55:26,700 --> 01:55:29,260
We're gonna work with like game engine companies

2693
01:55:29,260 --> 01:55:30,860
and see if they can help us

2694
01:55:30,860 --> 01:55:32,900
to make these things work really well

2695
01:55:32,900 --> 01:55:34,540
and then get a lot of goodness out there

2696
01:55:34,540 --> 01:55:37,580
so the next super video game

2697
01:55:37,580 --> 01:55:39,180
can run on our phones very well.

2698
01:55:42,220 --> 01:55:44,060
So it's just like a positive thing.

2699
01:55:44,060 --> 01:55:45,260
Yeah.

2700
01:55:45,260 --> 01:55:50,260
So kind of like the vision is to support all new features

2701
01:55:51,100 --> 01:55:52,500
that are coming out.

2702
01:55:52,500 --> 01:55:56,020
They adopt the new features into the Samsung.

2703
01:55:56,020 --> 01:55:56,860
Mm-hmm.

2704
01:55:58,060 --> 01:55:59,220
Yeah.

2705
01:55:59,220 --> 01:56:01,780
So that's the vision?

2706
01:56:01,780 --> 01:56:02,620
No, no, no.

2707
01:56:02,620 --> 01:56:05,660
The vision is to make, I don't wanna, I mean,

2708
01:56:06,940 --> 01:56:07,860
the vision for my team

2709
01:56:07,860 --> 01:56:09,260
and the vision for Samsung as a whole.

2710
01:56:09,260 --> 01:56:10,540
There's different perspectives.

2711
01:56:10,540 --> 01:56:12,220
So the vision for Samsung as a whole

2712
01:56:12,220 --> 01:56:14,780
is probably to be an amazing electronics provider

2713
01:56:15,300 --> 01:56:17,140
that solves all of your problems, right?

2714
01:56:17,140 --> 01:56:18,580
Makes a lot of money doing it,

2715
01:56:18,580 --> 01:56:20,140
makes the world a better place.

2716
01:56:21,180 --> 01:56:24,060
Cutting edge technology, yada, yada, yada.

2717
01:56:26,580 --> 01:56:31,580
For my team, I wanna put out the best mobile phone GPUs

2718
01:56:31,820 --> 01:56:33,140
as I can, because that's my mandate.

2719
01:56:33,140 --> 01:56:37,420
I also want to start to pour into other adjacent markets.

2720
01:56:37,420 --> 01:56:40,380
Like I wanna prove myself out of mobile

2721
01:56:40,380 --> 01:56:42,540
and then start going into a bunch of other markets

2722
01:56:42,580 --> 01:56:46,980
like automotive and refrigerators, why not?

2723
01:56:46,980 --> 01:56:49,420
And drones and God knows whatever.

2724
01:56:49,420 --> 01:56:51,340
As many markets as I can do

2725
01:56:51,340 --> 01:56:53,780
and start fighting all those really interesting problems

2726
01:56:53,780 --> 01:56:57,740
and maybe VR, AR, maybe mocap.

2727
01:56:57,740 --> 01:56:59,740
I don't know, whatever products out there,

2728
01:56:59,740 --> 01:57:00,660
I'd love to be in it.

2729
01:57:00,660 --> 01:57:02,340
And because a GPU is so versatile,

2730
01:57:02,340 --> 01:57:03,460
it can do a lot of things.

2731
01:57:03,460 --> 01:57:05,740
So the other thing is to find those new markets,

2732
01:57:05,740 --> 01:57:07,460
talk to them, convince them they wanna use us,

2733
01:57:07,460 --> 01:57:09,500
convince Samsung that we wanna be able to be in this

2734
01:57:09,500 --> 01:57:10,860
and kind of get that going.

2735
01:57:10,860 --> 01:57:12,380
So there's also a business aspect

2736
01:57:13,220 --> 01:57:14,060
and a lot of this is driven by software

2737
01:57:14,060 --> 01:57:16,180
because we have the most insight.

2738
01:57:16,180 --> 01:57:18,540
Like hardware guys are like, just tell us what to build.

2739
01:57:18,540 --> 01:57:21,300
Software guys are like, I want this to be better.

2740
01:57:31,220 --> 01:57:32,580
I think eventually you're supposed to be talking

2741
01:57:32,580 --> 01:57:33,700
about your projects.

2742
01:57:34,900 --> 01:57:37,780
One last question, Matt, I was gonna do.

2743
01:57:37,780 --> 01:57:40,780
Less of a question, but I like working

2744
01:57:40,980 --> 01:57:42,820
in the chip packaging industry for a bit.

2745
01:57:42,820 --> 01:57:44,900
So I'm wondering what kind of design considerations

2746
01:57:44,900 --> 01:57:48,180
you make with building the chip?

2747
01:57:50,180 --> 01:57:52,380
How does packaging come into it?

2748
01:57:52,380 --> 01:57:53,460
I wish I was more of an expert.

2749
01:57:53,460 --> 01:57:55,700
I can tell you what little I know

2750
01:57:55,700 --> 01:57:59,540
is we have to fit an extremely small phone

2751
01:58:01,220 --> 01:58:02,220
and that it's very small.

2752
01:58:02,220 --> 01:58:03,740
I mean, it's very, very small.

2753
01:58:03,740 --> 01:58:05,420
And that not only the packaging,

2754
01:58:05,420 --> 01:58:07,380
I think we're almost more worried about the thermals

2755
01:58:07,380 --> 01:58:09,420
on the packaging than anything else

2756
01:58:09,420 --> 01:58:12,140
because we have to dissipate all that thermal energy

2757
01:58:12,140 --> 01:58:14,340
into that slim, slim case.

2758
01:58:14,340 --> 01:58:17,260
And then people don't think about this.

2759
01:58:17,260 --> 01:58:19,460
The minute you put one of these covers on your phone,

2760
01:58:19,460 --> 01:58:21,980
it makes our problem way worse.

2761
01:58:21,980 --> 01:58:24,500
You know, if everybody could just strap like three fans

2762
01:58:24,500 --> 01:58:26,340
on the back of their phone, that would be great.

2763
01:58:26,340 --> 01:58:28,220
We would be so good.

2764
01:58:28,220 --> 01:58:32,580
Yeah, Asus had this like huge, like ROC, like fan chassis.

2765
01:58:32,580 --> 01:58:33,580
I'm like, that's what you need.

2766
01:58:33,580 --> 01:58:35,100
If you want a game on a phone, do one of those.

2767
01:58:35,100 --> 01:58:36,780
But honestly, it's just a physics question.

2768
01:58:36,780 --> 01:58:38,140
So like, we're not doing anything bad.

2769
01:58:38,660 --> 01:58:39,500
We have electrons.

2770
01:58:39,500 --> 01:58:43,420
Electrons create heat, deal, you know?

2771
01:58:43,420 --> 01:58:47,060
And so, but packaging, I think one of our biggest concerns

2772
01:58:47,060 --> 01:58:49,020
is size and thermals.

2773
01:58:50,100 --> 01:58:50,940
Yeah.

2774
01:58:53,940 --> 01:58:56,620
The last question I have is a very dumb question.

2775
01:58:56,620 --> 01:58:57,460
No.

2776
01:58:57,460 --> 01:59:00,180
It may or may not be a dumb question.

2777
01:59:00,180 --> 01:59:05,180
What is your reaction when somebody at a concert tells you

2778
01:59:06,020 --> 01:59:08,380
we want to put a GPU on a refrigerator?

2779
01:59:09,780 --> 01:59:11,180
I looked at those refrigerators.

2780
01:59:11,180 --> 01:59:12,380
I couldn't figure it out,

2781
01:59:12,380 --> 01:59:14,940
but I was afraid my wife wanted one.

2782
01:59:14,940 --> 01:59:16,620
And she did.

2783
01:59:16,620 --> 01:59:17,580
I don't have one.

2784
01:59:17,580 --> 01:59:18,900
I pushed back on it.

2785
01:59:18,900 --> 01:59:23,900
But the thing is, is that marketing is emotions.

2786
01:59:25,420 --> 01:59:27,260
And sometimes things that don't make sense,

2787
01:59:27,260 --> 01:59:28,820
you can still sell things with.

2788
01:59:30,300 --> 01:59:31,260
I got two fun facts.

2789
01:59:31,260 --> 01:59:33,980
So one of them was, there was a study,

2790
01:59:33,980 --> 01:59:36,940
there was a psychological study done

2791
01:59:36,940 --> 01:59:40,700
where a person was in a room with two screens,

2792
01:59:40,700 --> 01:59:42,620
and they were the exact same screens,

2793
01:59:42,620 --> 01:59:45,220
and they had two different audio systems.

2794
01:59:45,220 --> 01:59:47,260
And the audio on one system was better

2795
01:59:47,260 --> 01:59:49,900
than the audio on the other system.

2796
01:59:49,900 --> 01:59:52,900
And they asked the question of the person,

2797
01:59:52,900 --> 01:59:54,620
which picture is better?

2798
01:59:56,340 --> 01:59:59,860
And you can guess, there's like 80% sigma,

2799
01:59:59,860 --> 02:00:01,740
like significant.

2800
02:00:01,740 --> 02:00:04,540
They said the picture with the better sound

2801
02:00:04,540 --> 02:00:05,860
was better picture.

2802
02:00:06,980 --> 02:00:08,420
Okay.

2803
02:00:08,420 --> 02:00:10,660
And that to me is marketing.

2804
02:00:11,900 --> 02:00:14,260
It's basically lying to you to your face

2805
02:00:14,260 --> 02:00:15,580
and making you say yes.

2806
02:00:19,380 --> 02:00:23,260
And so it's like, which one makes the food colder?

2807
02:00:23,260 --> 02:00:25,700
The one with video screen on the front.

2808
02:00:28,540 --> 02:00:29,380
So I don't know.

2809
02:00:30,260 --> 02:00:32,340
Maybe I'll do one last political question.

2810
02:00:33,980 --> 02:00:34,820
Yeah.

2811
02:00:34,820 --> 02:00:38,180
I guess this is like kind of half joking,

2812
02:00:38,180 --> 02:00:41,740
but like a potential like ethical issue in the future

2813
02:00:41,740 --> 02:00:45,220
is like when you install all this like hardware

2814
02:00:45,220 --> 02:00:48,900
into an appliance, it's like a car or refrigerator

2815
02:00:48,900 --> 02:00:50,300
or like your air conditioning.

2816
02:00:50,300 --> 02:00:54,340
Like ethically speaking, doesn't that give like Samsung

2817
02:00:54,340 --> 02:00:56,460
an inordinate amount of control

2818
02:00:56,540 --> 02:01:01,300
over your everyday appliances?

2819
02:01:01,300 --> 02:01:06,060
Like if you don't pay your Samsung subscription,

2820
02:01:06,060 --> 02:01:11,060
your car won't show you like gas gauge anymore

2821
02:01:11,380 --> 02:01:13,180
or like now you're-

2822
02:01:13,180 --> 02:01:14,460
I hear what you're saying.

2823
02:01:14,460 --> 02:01:16,140
I don't think Samsung is sophisticated like that.

2824
02:01:16,140 --> 02:01:17,260
We're not Google.

2825
02:01:17,260 --> 02:01:22,100
Like we honestly like, we don't do phone home very well.

2826
02:01:24,020 --> 02:01:25,820
I'm saying this, I'm gonna get fired.

2827
02:01:26,260 --> 02:01:28,260
We really are just saying like,

2828
02:01:30,020 --> 02:01:31,460
we barely do phone home, right?

2829
02:01:31,460 --> 02:01:34,140
So we are a hardware company

2830
02:01:34,140 --> 02:01:36,500
that supports other people's ecosystems

2831
02:01:36,500 --> 02:01:37,980
like an automobile company.

2832
02:01:37,980 --> 02:01:42,180
Like we wanna sell you the devices

2833
02:01:42,180 --> 02:01:45,420
and we've tried really hard to have the Galaxy store

2834
02:01:45,420 --> 02:01:47,460
be something and it hasn't really taken off

2835
02:01:47,460 --> 02:01:49,860
like the Google or Apple store has.

2836
02:01:49,860 --> 02:01:52,660
We don't have that kind of leverage that we think we have.

2837
02:01:53,660 --> 02:01:56,780
But I hear the, let's go back to the ethical concern.

2838
02:01:56,780 --> 02:01:59,860
If you are a company and you have all of this data,

2839
02:01:59,860 --> 02:02:02,100
then yes, there is some kind of quandary

2840
02:02:02,100 --> 02:02:03,540
that does need to be,

2841
02:02:05,740 --> 02:02:08,980
there do need to be laws that get made to protect people.

2842
02:02:08,980 --> 02:02:11,500
And I think that's kind of a place

2843
02:02:11,500 --> 02:02:15,020
where engineers are not good at regulating themselves.

2844
02:02:15,020 --> 02:02:17,820
And so that needs to happen in the public.

2845
02:02:17,820 --> 02:02:20,340
I don't really have a great answer for that.

2846
02:02:20,380 --> 02:02:22,380
It's just like the dystopian notion of like,

2847
02:02:22,380 --> 02:02:25,260
you didn't pay your Samsung subscription

2848
02:02:25,260 --> 02:02:30,260
and now your refrigerator doesn't open

2849
02:02:31,140 --> 02:02:32,940
or something like that.

2850
02:02:32,940 --> 02:02:34,340
Yeah, I mean,

2851
02:02:34,340 --> 02:02:37,420
I don't think people would buy that refrigerator.

2852
02:02:37,420 --> 02:02:41,660
BMW at the heated car seats,

2853
02:02:41,660 --> 02:02:43,300
Tesla did it with the auto drive.

2854
02:02:45,020 --> 02:02:46,660
The minute people take things back,

2855
02:02:46,660 --> 02:02:48,100
oh, people get pissed.

2856
02:02:48,140 --> 02:02:50,500
So I think that it's actually not a good model.

2857
02:02:50,500 --> 02:02:54,860
In fact, a lot of these as a service type things

2858
02:02:54,860 --> 02:02:56,260
are hitting a lot of resistance

2859
02:02:56,260 --> 02:02:59,660
because people just wanna own something and buy it once

2860
02:02:59,660 --> 02:03:01,620
and then eventually maybe get an upgrade.

2861
02:03:01,620 --> 02:03:03,220
They don't wanna continually pay for it

2862
02:03:03,220 --> 02:03:04,540
for the rest of their lives.

2863
02:03:04,540 --> 02:03:05,940
And so some people like,

2864
02:03:05,940 --> 02:03:09,660
I think as a service works great for corporations

2865
02:03:09,660 --> 02:03:11,460
because corporations work like,

2866
02:03:11,460 --> 02:03:12,300
I have a budget,

2867
02:03:12,300 --> 02:03:16,500
I wanna have deterministic finance oversight

2868
02:03:16,500 --> 02:03:17,700
for a long period of time.

2869
02:03:18,300 --> 02:03:20,980
And this as a service model averages all of that out.

2870
02:03:20,980 --> 02:03:22,300
Kind of like when you have that option

2871
02:03:22,300 --> 02:03:25,420
on your utility bill to like pay the same bill all year

2872
02:03:25,420 --> 02:03:27,900
and they'll average it and change it a little bit.

2873
02:03:27,900 --> 02:03:29,340
Corporations love that.

2874
02:03:29,340 --> 02:03:30,700
And that's their main customer for that.

2875
02:03:30,700 --> 02:03:31,660
People hate it.

2876
02:03:32,540 --> 02:03:35,860
People just wanna like buy the movie once.

2877
02:03:35,860 --> 02:03:38,060
People wanna buy the video game once.

2878
02:03:38,060 --> 02:03:41,060
And so, and people hate recurring costs.

2879
02:03:42,260 --> 02:03:43,620
I do anyway, I don't know.

2880
02:03:43,620 --> 02:03:44,460
Yeah.

2881
02:03:47,100 --> 02:03:47,940
Okay.

2882
02:03:47,940 --> 02:03:49,660
Thanks so much for that lovely talk

2883
02:03:49,660 --> 02:03:52,020
and answering all those questions.

2884
02:03:52,020 --> 02:03:54,300
Thanks again for flying in and joining us.

2885
02:03:54,300 --> 02:03:55,140
Yeah.

2886
02:03:59,340 --> 02:04:00,300
Okay.

2887
02:04:00,300 --> 02:04:01,860
If anybody wants to talk to Gabe

2888
02:04:01,860 --> 02:04:03,460
about position building at Samsung,

2889
02:04:03,460 --> 02:04:04,980
I'm sure he'd love to talk to that.

2890
02:04:04,980 --> 02:04:06,140
Yeah.

2891
02:04:06,140 --> 02:04:06,980
Come on down.

2892
02:04:06,980 --> 02:04:08,300
There's also swag.

2893
02:04:08,300 --> 02:04:10,580
And there's more swag than what's on the table.

2894
02:04:10,580 --> 02:04:11,660
So come grab it.

2895
02:04:11,660 --> 02:04:13,860
There's cord bags or toilet.

2896
02:04:13,860 --> 02:04:14,700
I don't know.

2897
02:04:14,700 --> 02:04:15,700
It's a bag.

2898
02:04:15,700 --> 02:04:17,340
You can put stuff in it.

2899
02:04:17,340 --> 02:04:18,500
And then here's another bag.

2900
02:04:18,500 --> 02:04:20,420
It's a tote for groceries or whatever.

2901
02:04:21,700 --> 02:04:25,540
I believe Samsung is banning or has banned plastic bags.

2902
02:04:25,540 --> 02:04:26,380
So it's great.

2903
02:04:26,380 --> 02:04:27,220
Yeah.

2904
02:04:27,220 --> 02:04:28,780
Take one or two and awesome.

2905
02:04:29,940 --> 02:04:30,780
Yeah, please do.

2906
02:04:30,780 --> 02:04:31,620
Yeah.

2907
02:04:41,660 --> 02:04:42,500
Thank you.

